include(${ROOT}/cmake/GenHelpers.cmake)

message(STATUS "Generating under tests")
set(P_TESTS
    "(‚äë‚â°‚äë‚åæ‚ä¢) ‚ü®‚Üï3,2,<\\\"abc\\\"‚ü©"
    "3 (+‚â°+‚åæ‚ä£) 4"
    "(¬Ø2‚ä∏‚Üì ‚â° 2‚ä∏‚Üì‚åæ‚åΩ) ‚Üï6"
    "(1‚ä∏‚Üì‚åæ‚çâ ‚â° 1‚ä∏‚ÜìÀò) ‚Üï3‚Äø3"
    "7(‚•ä‚åæ(<Àò)‚â°¬∑<Àò‚Åº‚•ä‚üú(<Àò))3‚Äø3‚•ä‚Üï9"
    "\\\"abcd\\\" (‚ä£‚â°¬ª‚åæ‚âç) ‚Üï4"
    "(‚åΩ‚àò|‚ä∏/4‚Äø¬Ø3) ‚â° ‚Üï‚àò‚â†‚ä∏-‚åæ(3‚ä∏‚åΩ)‚Üï7"
    "\\\"bbcd\\\" ‚â° 1‚ä∏+‚åæ‚äë \\\"abcd\\\""
    "(<‚àò- ‚â° -‚åæ‚äë) 4"
    "(‚åΩ‚åæ‚äè ‚â° ‚åΩ‚ä∏‚âçÀù) \\\"abc\\\"‚âç\\\"def\\\""
    "1 ‚â° \\\"cd\\\"‚Äø\\\"ab\\\"‚ä∏‚äê‚åæ< \\\"ab\\\""
    "(0‚Äø1+‚åú0‚Äø4‚Äø2) ‚â° ‚çã‚àò‚çã‚åæ‚•ä \\\"apl\\\"‚âç\\\"bqn\\\""
    "2 (‚åΩ‚åæ‚•ä ‚â° 12|+) ‚•ä‚üú(‚Üï√ó¬¥)6‚Äø2"
    "‚Üï‚àò‚â†‚ä∏+{ùîΩ‚â°ùîΩ¬®‚åæ‚Üë} \\\"abcde\\\""
    "2‚ä∏+{ùîΩ‚â°ùîΩ¬®‚åæ‚Üì} \\\"abcde\\\""
    "(‚åΩ‚çí‚åä2√∑Àú‚Üï7) ‚â° ‚åΩÀò‚åæ(‚åä‚Äø2‚•ä‚ä¢)‚Üï7"
    "¬Ø1‚Äø0‚Äø1‚Äø3 ‚â° -‚üú(+¬¥√∑‚â†)‚åæ(3‚ä∏‚Üë)‚Üï4"
    "\\\"adcb\\\" ‚â° ‚åΩ‚åæ(1‚ä∏‚Üì)\\\"abcd\\\""
    "5‚Äø6‚Äø3‚Äø0 ‚â° (5‚Äø3‚Äø1‚åæ(0‚Äø0‚ä∏‚çâ)4‚Äø3‚•ä0) +¬¥‚àò√ó‚éâ1‚Äø‚àû 1+‚Üï3"
    "\\\"AbcD\\\" ‚â° ('A'-'a')‚ä∏+‚åæ(1‚Äø0‚Äø0‚Äø1‚ä∏/)\\\"abcd\\\""
    "\\\"AbcD\\\" ‚â° \\\"ABCD\\\"‚ä£‚åæ(1‚Äø0‚Äø0‚Äø1‚ä∏/)\\\"abcd\\\""
    "(1‚ä∏‚åΩ ‚â° 2‚ä∏‚åΩ‚åæ(2‚ä∏/)) ‚Üï5"
    "\\\"bdca\\\" ‚â° 1‚ä∏‚åΩ‚åæ(1‚Äø3‚Äø0‚ä∏‚äè)\\\"abcd\\\""
    "((¬Ø1‚ãÜ2‚àß‚åú‚óã(‚åΩ0=‚Üï)3)‚ä∏√ó ‚â° -‚åæ(1‚Äø2‚äë‚ä¢))‚Üï2‚Äø3"
    "((0‚Äø3‚âç1‚Äø2)‚ä∏+ ‚â° ‚ü®1,2‚Äø3‚ü©‚ä∏+‚åæ(‚ü®1‚Äø0,‚ü®1‚Äø1,0‚Äø1‚ü©‚ü©‚ä∏‚äë))‚Üï2‚Äø2"
    "(1+‚Üï3) ‚â° 1‚ä∏‚Üì‚åæ(@‚ä¢¬∑‚äë<)‚Üï4"
    "\\\"210abc\\\" ‚â° ‚åΩ‚åæ((2√∑Àú‚â†)‚ä∏‚Üë)\\\"012abc\\\""
    "\\\"bac\\\"‚Äø'd' ‚â° ‚åΩ‚åæ(2‚Üë‚äë)\\\"abc\\\"‚Äø'd'"
    "(‚åΩ¬®‚åæ(<2‚Äø3‚ä∏‚äè) ‚â° ‚åΩ‚åæ(2‚Äø3‚ä∏‚äè)) \\\"abcdef\\\""
    "\\\"bdca\\\" ‚â° 1‚ä∏‚åΩ‚åæ(1‚Äø3‚Äø0Àô‚äè‚ä¢)\\\"abcd\\\""
    #"3 % 1‚ä∏+‚åæ-4"
    #"20 % ‚åä0.5+ 4+‚åæ(‚ãÜ‚Åº)5"
    #"2 % ‚ä¢‚åæ2 3"
    #"-2 % ‚ä¢‚åæ(2‚àò-) 3"
    "‚àò‚Äø+ ‚â° ‚ä¢‚åæ‚àò‚Äø+ 1"
)

set(P_TEST_SOURCE "${BUILDDIR}/test_under.cpp")
init_gen_file(${P_TEST_SOURCE})

foreach(test ${P_TESTS})
  execute_process(
    COMMAND ${BASH} -c
            "${BQN} ${ROOT}/test/ccxx.bqn ${ROOT}/ext//bqn -i \"${test}\""
    WORKING_DIRECTORY "${ROOT}/ext//cbqn"
    OUTPUT_VARIABLE compiled_test
  )
  string(REPLACE "\\`" "`" noesc "${test}")
  string(REPLACE "¬Ø" "-" minus "${compiled_test}")
  file(
    APPEND ${P_TEST_SOURCE}
    "
  TEST_CASE(\"${noesc}\") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical(\"test='{}'\", \"${noesc}\");
  CompileParams p( ${minus} );
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies, p.source_indices.value(), p.source_str);
    REQUIRE(nullptr != ret.v);
    REQUIRE(nullptr != ret.scp);
    auto n = dynamic_pointer_cast<Number>(ret.v);
    REQUIRE(nullptr != n);
    CHECK(1 == doctest::Approx(n->v));
  }
"
  )
endforeach()
