/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-10T08:47:00
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("0≡¯2+2") {
  spdlog::critical("test='{}'", "0≡¯2+2");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[0], runtime[18], 0, -2, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1e4≡5e3+5e3") {
  spdlog::critical("test='{}'", "1e4≡5e3+5e3");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[0], runtime[18], 10000, 5000},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡'a'+2") {
  spdlog::critical("test='{}'", "'c'≡'a'+2");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 2, 0, 0, 0, 4, 17, 0, 1, 0, 3, 17, 7},
      {runtime[0], runtime[18], 2, new Character(U'c'), new Character(U'a')},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≡¯2+'c'") {
  spdlog::critical("test='{}'", "'a'≡¯2+'c'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 0, 0, 2, 17, 0, 1, 0, 3, 17, 7},
      {runtime[0], runtime[18], -2, new Character(U'a'), new Character(U'c')},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯∞≡1e6-∞") {
  spdlog::critical("test='{}'", "¯∞≡1e6-∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[1], runtime[18], new Number(-1.0 / 0.0), 1000000,
                   new Number(1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡-¯4") {
  spdlog::critical("test='{}'", "4≡-¯4");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[1], runtime[18], 4, -4},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯∞≡-∞") {
  spdlog::critical("test='{}'", "¯∞≡-∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
      {runtime[1], runtime[18], new Number(-1.0 / 0.0), new Number(1.0 / 0.0)},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∞≡-¯∞") {
  spdlog::critical("test='{}'", "∞≡-¯∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
      {runtime[1], runtime[18], new Number(1.0 / 0.0), new Number(-1.0 / 0.0)},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡9-5") {
  spdlog::critical("test='{}'", "4≡9-5");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[1], runtime[18], 4, 9, 5},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("@≡'a'-97") {
  spdlog::critical("test='{}'", "@≡'a'-97");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 2, 0, 0, 0, 4, 17, 0, 1, 0, 3, 17, 7},
      {runtime[1], runtime[18], 97, new Character(U'\0'), new Character(U'a')},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡'d'-'a'") {
  spdlog::critical("test='{}'", "3≡'d'-'a'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
      {runtime[1], runtime[18], 3, new Character(U'd'), new Character(U'a')},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'Q'≡'q'+'A'-'a'") {
  spdlog::critical("test='{}'", "'Q'≡'q'+'A'-'a'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 6, 0, 1, 0, 5, 17, 0, 0, 0, 4, 17, 0, 2, 0, 3, 17, 7},
                  {runtime[0], runtime[1], runtime[18], new Character(U'Q'),
                   new Character(U'q'), new Character(U'A'),
                   new Character(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡÷0.25") {
  spdlog::critical("test='{}'", "4≡÷0.25");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[3], runtime[18], 4, 0.25},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∞≡÷0") {
  spdlog::critical("test='{}'", "∞≡÷0");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[3], runtime[18], new Number(1.0 / 0.0), 0},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡÷∞") {
  spdlog::critical("test='{}'", "0≡÷∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[3], runtime[18], 0, new Number(1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡⋆0") {
  spdlog::critical("test='{}'", "1≡⋆0");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[4], runtime[18], 1, 0},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1≡¯1⋆5") {
  spdlog::critical("test='{}'", "¯1≡¯1⋆5");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[4], runtime[18], -1, 5},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡¯1⋆¯6") {
  spdlog::critical("test='{}'", "1≡¯1⋆¯6");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[4], runtime[18], 1, -1, -6},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡⌊3.9") {
  spdlog::critical("test='{}'", "3≡⌊3.9");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[6], runtime[18], 3, 3.9},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯4≡⌊¯3.9") {
  spdlog::critical("test='{}'", "¯4≡⌊¯3.9");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[6], runtime[18], -4, -3.9},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∞≡⌊∞") {
  spdlog::critical("test='{}'", "∞≡⌊∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[6], runtime[18], new Number(1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯∞≡⌊¯∞") {
  spdlog::critical("test='{}'", "¯∞≡⌊¯∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[6], runtime[18], new Number(-1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1e30≡⌊¯1e30") {
  spdlog::critical("test='{}'", "¯1e30≡⌊¯1e30");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[6], runtime[18], -1e30},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡1=1") {
  spdlog::critical("test='{}'", "1≡1=1");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[15], runtime[18], 1},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¯1=∞") {
  spdlog::critical("test='{}'", "0≡¯1=∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[15], runtime[18], 0, -1, new Number(1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡'a'='a'") {
  spdlog::critical("test='{}'", "1≡'a'='a'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[15], runtime[18], 1, new Character(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡'a'='A'") {
  spdlog::critical("test='{}'", "0≡'a'='A'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
      {runtime[15], runtime[18], 0, new Character(U'a'), new Character(U'A')},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡{F←+⋄f=f}") {
  spdlog::critical("test='{}'", "1≡{F←+⋄f=f}");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{1,  1, 0,  2, 0, 3, 17, 7,  0, 0, 33, 0, 0,
                   48, 6, 32, 0, 0, 0, 1,  34, 0, 0, 17, 7},
                  {runtime[0], runtime[15], runtime[18], 1},
                  {{0, 1, 0}, {0, 1, 1}},
                  {{0, 0}, {8, 1}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡{a‿b←⟨+´,+´⟩⋄a=b}") {
  spdlog::critical("test='{}'", "1≡{a‿b←⟨+´,+´⟩⋄a=b}");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{1,  1, 0,  2,  0,  4, 17, 7,  0, 3,  0,  0, 26, 0,
                   3,  0, 0,  26, 11, 2, 33, 0,  0, 33, 0,  1, 12, 2,
                   48, 6, 34, 0,  1,  0, 1,  34, 0, 0,  17, 7},
                  {runtime[0], runtime[15], runtime[18], runtime[49], 1},
                  {{0, 1, 0}, {0, 1, 1}},
                  {{0, 0}, {8, 2}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡{_op←{𝕗}⋄op='o'}") {
  spdlog::critical("test='{}'", "0≡{_op←{𝕗}⋄op='o'}");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{1, 1, 0, 1, 0, 2,  17, 7, 1,  2, 33, 0, 0, 48,
                   6, 0, 3, 0, 0, 34, 0,  0, 17, 7, 34, 0, 1, 7},
                  {runtime[15], runtime[18], 0, new Character(U'o')},
                  {{0, 1, 0}, {0, 1, 1}, {1, 1, 2}},
                  {{0, 0}, {8, 1}, {24, 2}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡{F←{𝕩}⋄G←{𝕩}⋄f=g}") {
  spdlog::critical("test='{}'", "0≡{F←{𝕩}⋄G←{𝕩}⋄f=g}");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{1, 1, 0,  1,  0,  2, 17, 7, 1,  2, 33, 0, 0, 48,
                   6, 1, 3,  33, 0,  1, 48, 6, 34, 0, 1,  0, 0, 34,
                   0, 0, 17, 7,  34, 0, 1,  7, 34, 0, 1,  7},
                  {runtime[15], runtime[18], 0},
                  {{0, 1, 0}, {0, 1, 1}, {0, 0, 2}, {0, 0, 3}},
                  {{0, 0}, {8, 2}, {32, 3}, {36, 3}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡{F←{𝕩}⋄f=f}") {
  spdlog::critical("test='{}'", "1≡{F←{𝕩}⋄f=f}");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{1,  1, 0, 1, 0, 2,  17, 7, 1,  2, 33, 0, 0, 48, 6,
                   32, 0, 0, 0, 0, 34, 0,  0, 17, 7, 34, 0, 1, 7},
                  {runtime[15], runtime[18], 1},
                  {{0, 1, 0}, {0, 1, 1}, {0, 0, 2}},
                  {{0, 0}, {8, 1}, {25, 3}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡1≤1") {
  spdlog::critical("test='{}'", "1≡1≤1");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[16], runtime[18], 1},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡¯∞≤¯1e3") {
  spdlog::critical("test='{}'", "1≡¯∞≤¯1e3");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[16], runtime[18], 1, new Number(-1.0 / 0.0), -1000},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡∞≤¯∞") {
  spdlog::critical("test='{}'", "0≡∞≤¯∞");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[16], runtime[18], 0, new Number(1.0 / 0.0),
                   new Number(-1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡∞≤@") {
  spdlog::critical("test='{}'", "1≡∞≤@");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[16], runtime[18], 1, new Number(1.0 / 0.0),
                   new Character(U'\0')},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡'z'≤¯0.5") {
  spdlog::critical("test='{}'", "0≡'z'≤¯0.5");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 0, 4, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[16], runtime[18], 0, -0.5, new Character(U'z')},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡'a'≤'a'") {
  spdlog::critical("test='{}'", "1≡'a'≤'a'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[16], runtime[18], 1, new Character(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡'c'≤'a'") {
  spdlog::critical("test='{}'", "0≡'c'≤'a'");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
      {runtime[16], runtime[18], 0, new Character(U'c'), new Character(U'a')},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢<2") {
  spdlog::critical("test='{}'", "⟨⟩≡≢<2");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 0, 16, 0, 2, 16, 0, 1, 11, 0, 17, 7},
                  {runtime[12], runtime[18], runtime[19], 2},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3⟩≡≢\"abc\"") {
  spdlog::critical("test='{}'", "⟨3⟩≡≢\"abc\"");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 16, 0, 0, 0, 2, 11, 1, 17, 7},
                  {runtime[18], runtime[19], 3, new Array(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨2,3⟩≡≢>\"abc\"‿\"fed\"") {
  spdlog::critical("test='{}'", "⟨2,3⟩≡≢>\"abc\"‿\"fed\"");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 6, 11, 2, 0, 0, 16, 0, 2, 16, 0, 1, 0, 3, 0, 4, 11, 2, 17, 7},
      {runtime[13], runtime[18], runtime[19], 2, 3, new Array(U"abc"),
       new Array(U"fed")},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨2,3,4,5⟩≡≢2‿3‿4‿5⥊↕120") {
  spdlog::critical("test='{}'", "⟨2,3,4,5⟩≡≢2‿3‿4‿5⥊↕120");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 8, 0,  3, 16, 0, 2, 0, 4, 0, 5, 0, 6, 0,  7, 11, 4, 17,
       0, 1, 16, 0, 0,  0, 4, 0, 5, 0, 6, 0, 7, 11, 4, 17, 7},
      {runtime[18], runtime[19], runtime[22], runtime[27], 2, 3, 4, 5, 120},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨6⟩≡≢⥊>\"abc\"‿\"fed\"") {
  spdlog::critical("test='{}'", "⟨6⟩≡≢⥊>\"abc\"‿\"fed\"");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0,  6, 11, 2, 0, 0,  16, 0,  3, 16,
                   0, 2, 16, 0, 1,  0, 4, 11, 1,  17, 7},
                  {runtime[13], runtime[18], runtime[19], runtime[22], 6,
                   new Array(U"abc"), new Array(U"fed")},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡0⊑\"abc\"‿\"de\"") {
  spdlog::critical("test='{}'", "\"abc\"≡0⊑\"abc\"‿\"de\"");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 4, 11, 2, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
      {runtime[18], runtime[36], 0, new Array(U"abc"), new Array(U"de")},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"de\"≡1⊑\"abc\"‿\"de\"") {
  spdlog::critical("test='{}'", "\"de\"≡1⊑\"abc\"‿\"de\"");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 3, 11, 2, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
      {runtime[18], runtime[36], 1, new Array(U"de"), new Array(U"abc")},
      {{0, 1, 0}},
      {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡↕0") {
  spdlog::critical("test='{}'", "⟨⟩≡↕0");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[27], 0},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨0⟩≡↕1") {
  spdlog::critical("test='{}'", "⟨0⟩≡↕1");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 16, 0, 0, 0, 2, 11, 1, 17, 7},
                  {runtime[18], runtime[27], 0, 1},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨0,1,2,3,4,5,6⟩≡↕7") {
  spdlog::critical("test='{}'", "⟨0,1,2,3,4,5,6⟩≡↕7");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 1, 16, 0, 0, 0, 2,  0, 3,  0, 4,
                   0, 5, 0, 6, 0,  7, 0, 8, 11, 7, 17, 7},
                  {runtime[18], runtime[27], 0, 1, 2, 3, 4, 5, 6, 7},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡!1") {
  spdlog::critical("test='{}'", "1≡!1");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[42], 1},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡'e'!1") {
  spdlog::critical("test='{}'", "1≡'e'!1");
  const auto rt = provides::get_runtime();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[42], 1, new Character(U'e')},
                  {{0, 1, 0}},
                  {{0, 0}}};

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  Number *n = dynamic_cast<Number *>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
