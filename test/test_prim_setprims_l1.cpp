/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:48
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("3≡4>◶+‿-1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡4>◶+‿-1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[1],
                            runtime[13],          runtime[18],
                            runtime[59],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 0, 0,  1, 11, 2, 0, 4,  0,
             2, 27, 0, 6, 17, 0, 3,  0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡4⊢◶+‿-1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡4⊢◶+‿-1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[1],
                            runtime[18],          runtime[21],
                            runtime[59],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 0, 0,  1, 11, 2, 0, 4,  0,
             3, 27, 0, 6, 17, 0, 2,  0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡4 1◶+‿-1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡4 1◶+‿-1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[1],
                            runtime[18],          runtime[59],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6,  0, 0, 0,  1, 11, 2, 0, 3,  0,
             6, 27, 0, 5, 17, 0, 2,  0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡4<◶+‿-1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡4<◶+‿-1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[1],
                            runtime[12],          runtime[18],
                            runtime[59],          CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 0, 0,  1, 11, 2, 0, 4,  0,
             2, 27, 0, 6, 17, 0, 3,  0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡4 0◶+‿-1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡4 0◶+‿-1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[1],
                            runtime[18],          runtime[59],
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 0, 0,  1, 11, 2, 0, 3,  0,
             6, 27, 0, 5, 17, 0, 2,  0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡-⊘0 ¯1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡-⊘0 ¯1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[18],
                            runtime[58],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, -1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 4, 0, 2, 0, 0, 27, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡¯1-⊘+2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡¯1-⊘+2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[1],
                            runtime[18],          runtime[58],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 0, 0, 3, 0, 1, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡⊢\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡⊢\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[21], CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"\"≡3⊢\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"\"≡3⊢\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[21], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡⊣⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡⊣⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[20]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 16, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"≡\"ab\"⊣⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ab\"≡\"ab\"⊣⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[20], CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡+˜2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡+˜2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[18], runtime[45],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 0, 26, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡1-˜4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡1-˜4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[18],
                            runtime[45],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 0, 26, 0, 4, 17, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡-∘×¯6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡-∘×¯6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[2],
                            runtime[18],          runtime[53],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, -6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 3, 0, 0, 27, 16, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯6≡2-∘×3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯6≡2-∘×3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],
                            runtime[2],
                            runtime[18],
                            runtime[53],
                            CXBQN_NEW(Number, -6),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 3, 0, 0, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡-○×¯7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡-○×¯7");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[2],
                            runtime[18],          runtime[54],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, -7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 3, 0, 0, 27, 16, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡5-○×¯7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡5-○×¯7");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[2],
                            runtime[18],          runtime[54],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, -7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 3, 0, 0, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯20≡1⊸-⊸×5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯20≡1⊸-⊸×5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],
                            runtime[2],
                            runtime[18],
                            runtime[55],
                            CXBQN_NEW(Number, -20),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 3, 0, 0, 0, 3, 0, 5, 27, 27, 16, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿2+⌜0‿1)≡(>⟨\"ab\",\"cd\"⟩)≢⊸⥊↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿2+⌜0‿1)≡(>⟨\"ab\",\"cd\"⟩)≢⊸⥊↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[13],
                            runtime[18],
                            runtime[19],
                            runtime[22],
                            runtime[28],
                            runtime[48],
                            runtime[55],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"cd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 5, 16, 0,  4,  0, 7, 0,  3, 27, 0,  12, 0,
             13, 11, 2, 0, 1,  16, 17, 0, 2, 0,  8, 0,  10, 11, 2,
             0,  6,  0, 0, 26, 0,  8,  0, 9, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("20≡×⟜(-⟜1)5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "20≡×⟜(-⟜1)5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],
                            runtime[2],
                            runtime[18],
                            runtime[56],
                            CXBQN_NEW(Number, 20),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 5, 0, 3, 0, 0, 27, 0, 3, 0, 1, 27, 16, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡5+⟜×¯3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡5+⟜×¯3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[2],
                            runtime[18],          runtime[56],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, -3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 3, 0, 0, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡5+⟜2 ¯3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7≡5+⟜2 ¯3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[56],          CXBQN_NEW(Number, 7),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 5, 0, 2, 0, 0, 27, 0, 4, 17, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡√4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡√4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[5], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡3√27") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡3√27");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[5], runtime[18], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 27)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6≡2∧3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6≡2∧3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10], runtime[18], CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¯2∧0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡¯2∧0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0.75≡∨˜0.5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0.75≡∨˜0.5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[11], runtime[18], runtime[45],
                            CXBQN_NEW(Number, 0.75), CXBQN_NEW(Number, 0.5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 0, 26, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1.75≡2∨0.25") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1.75≡2∨0.25");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[11], runtime[18], CXBQN_NEW(Number, 1.75),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0.25)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¬1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡¬1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡¬0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡¬0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡¬¯1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡¬¯1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡3¬4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡3¬4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡4¬3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡4¬3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡5¬2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡5¬2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡'g'¬'c'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡'g'¬'c'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Character, U'g'),
                            CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'b'≡'c'¬2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'b'≡'c'¬2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'b'),
                            CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 4, 17, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡|0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡|0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18], CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡|¯5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡|¯5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18], CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, -5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6≡|6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6≡|6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18], CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∞≡|¯∞") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∞≡|¯∞");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18],
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, -1.0 / 0.0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡3|8") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡3|8");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 8)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡3|¯7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡3|¯7");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, -7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1≡¯3|8") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1≡¯3|8");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], runtime[18], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, -3), CXBQN_NEW(Number, 8)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⥊<'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"≡⥊<'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[22],
                            CXBQN_NEW(Character, U'a'), CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 2, 16, 0, 1, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\"≡⊑<\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"≡⊑<\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[37],
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 2, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢<⟨2,⟨3,4⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡≢<⟨2,⟨3,4⟩⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[19],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3,  0, 4, 0,  5, 11, 2,  11, 2,  0,
             0, 16, 0, 2, 16, 0, 1,  11, 0,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡4<2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡4<2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡5>5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡5>5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[13], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡3≥4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡3≥4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[17], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≠\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡≠\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14], runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≠\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡≠\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14], runtime[18], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≠'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡≠'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14], runtime[18], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≠\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡≠\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("25≡≠↕25") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "25≡≠↕25");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14], runtime[18], runtime[28],
                            CXBQN_NEW(Number, 25)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 16, 0, 0, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡×5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡×5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2], runtime[18], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1≡×¯2.5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1≡×¯2.5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2], runtime[18], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, -2.5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡3⌊4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡3⌊4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[6], runtime[18], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯3≡¯3⌊∞") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯3≡¯3⌊∞");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[6], runtime[18], CXBQN_NEW(Number, -3),
                            CXBQN_NEW(Number, 1.0 / 0.0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡3⌈4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡3⌈4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[7], runtime[18], CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡1⌈¯1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡1⌈¯1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[7], runtime[18], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, -1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡⌈4.01") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡⌈4.01");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[7], runtime[18], CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 4.01)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡≢'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[19],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡≢0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[19], CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨0⟩‿⟨1⟩‿⟨2⟩≡⥊¨↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨0⟩‿⟨1⟩‿⟨2⟩≡⥊¨↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[28],          runtime[47],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  7, 0, 2, 16, 0, 3, 0, 1,  26, 16, 0, 0,  0, 4,
             11, 1, 0, 5, 11, 1, 0, 6, 11, 1,  11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE(
    "(↕6)≡⟜(≠¨)○(2‿3⊸⥊)⟨⟩‿\"a\"‿\"ab\"‿\"abc\"‿\"abcd\"‿\"abcde\"‿\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(↕6)≡⟜(≠¨)○(2‿3⊸⥊)"
                   "⟨⟩‿\"a\"‿\"ab\"‿\"abc\"‿\"abcd\"‿\"abcde\"‿\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14],
                            runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[47],
                            runtime[54],
                            runtime[55],
                            runtime[56],
                            CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"abcd"),
                            CXBQN_NEW(Array, U"abcde"),
                            CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0,  0, 11, 0, 12, 0,  13, 0,  14, 0,  15, 0,  16, 11, 7,
             0,  2,  0, 6,  0, 9,  0,  10, 11, 2,  27, 0,  5,  0,  4,  0,
             0,  26, 0, 7,  0, 1,  27, 27, 0,  8,  0,  3,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜(≠¨)4‿0‿2⥊↕0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜(≠¨)4‿0‿2⥊↕0");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[14],          runtime[18],          runtime[22],
        runtime[28],          runtime[47],          runtime[56],
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 3, 16, 0, 2,  0, 6, 0, 7, 0,  8,  11,
             3, 17, 0, 4, 0,  0, 26, 0, 5, 0, 1, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6≡+´↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6≡+´↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[28],          runtime[50],
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 16, 0, 3, 0, 0, 26, 16, 0, 1, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[20],
                            runtime[37],
                            runtime[50],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"d")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 4, 0,  5, 0, 7, 11, 2,  11, 3,
             0, 3, 0, 1, 26, 0, 0, 0, 2,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],           runtime[20],
                            runtime[37],           runtime[50],
                            CXBQN_NEW(Number, 0),  CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),  CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"d")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 5,  0, 6, 0, 8, 11, 2, 11, 3,  0,
             3, 0, 1, 26, 0, 0, 0, 2, 21, 0, 4,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2⊸⊑≡⊢´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2⊸⊑≡⊢´)\"a\"‿2‿(3‿\"d\")");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],           runtime[21],
                            runtime[37],           runtime[50],
                            runtime[55],           CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),  CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"d")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 5, 0, 6, 0, 8, 11, 2, 11, 3,  0,  3, 0,
             1, 26, 0, 0, 0, 2, 0, 4, 0,  5, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2(⊣≡⊢´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2(⊣≡⊢´)\"a\"‿2‿(3‿\"d\")");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[20],
                            runtime[21],
                            runtime[50],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"d")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 4,  0, 5, 0, 7, 11, 2, 11, 3,  0,
             3, 0, 2, 26, 0, 0, 0, 1, 21, 0, 4,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7‿10≡+¨´⟨⟨2,3⟩,⟨5,7⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7‿10≡+¨´⟨⟨2,3⟩,⟨5,7⟩⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[18],          runtime[47],
        runtime[50],          CXBQN_NEW(Number, 7), CXBQN_NEW(Number, 10),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 7,  11, 2,  0, 8, 0, 4, 11, 2, 11, 2, 0,  3, 0,
             2, 0, 0, 26, 26, 16, 0, 1, 0, 4, 0,  5, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
