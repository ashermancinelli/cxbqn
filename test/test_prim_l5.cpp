/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-18T07:49:39
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("(<'a')≡⊏\"abc\"") {
  spdlog::critical("test='{}'", "(<'a')≡⊏\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 2, 16, 0, 1, 0, 3, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[18], runtime[36],
                   std::make_shared<Character>(U'a'),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 7, 7, 7, 6, 6, 2, 2, 1, 1, 1, 6, 0},
                   {12, 12, 7, 7, 7, 6, 6, 4, 4, 1, 1, 1, 6, 5}},
                  std::make_shared<Array>(U"(<\'a\')≡⊏\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⊏⥊˘\"abc\"") {
  spdlog::critical("test='{}'", "\"a\"≡⊏⥊˘\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 3, 0, 1, 26, 16, 0, 2, 16, 0, 0, 0, 4, 17, 7},
                  {runtime[18], runtime[22], runtime[36], runtime[46],
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 5, 5, 6, 5, 4, 4, 4, 3, 3, 0, 0, 3, 0},
                   {11, 11, 6, 6, 5, 5, 6, 6, 4, 4, 4, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\"a\"≡⊏⥊˘\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<'c')≡2⊏\"abc\"") {
  spdlog::critical("test='{}'", "(<'c')≡2⊏\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 2, 0, 3, 17, 0, 1, 0, 4, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[18], runtime[36], 2,
                   std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{9, 9, 8, 8, 7, 7, 8, 6, 6, 2, 2, 1, 1, 1, 6, 0},
                   {13, 13, 8, 8, 7, 7, 8, 6, 6, 4, 4, 1, 1, 1, 6, 5}},
                  std::make_shared<Array>(U"(<\'c\')≡2⊏\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<'c')≡¯1⊏\"abc\"") {
  spdlog::critical("test='{}'", "(<'c')≡¯1⊏\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 2, 0, 3, 17, 0, 1, 0, 4, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[18], runtime[36], -1,
                   std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 7, 7, 9, 6, 6, 2, 2, 1, 1, 1, 6, 0},
                   {14, 14, 9, 9, 8, 8, 9, 6, 6, 4, 4, 1, 1, 1, 6, 5}},
                  std::make_shared<Array>(U"(<\'c\')≡¯1⊏\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ccc\"≡2‿¯1‿2⊏\"abc\"") {
  spdlog::critical("test='{}'", "\"ccc\"≡2‿¯1‿2⊏\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 1, 0, 2, 0, 3, 0, 2, 11, 3, 17, 0, 0, 0, 4, 17, 7},
      {runtime[18], runtime[36], 2, -1, std::make_shared<Array>(U"ccc"),
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}},
      {{0, 0}},
      {{13, 13, 12, 12, 6, 6, 8, 8, 11, 11, 11, 11, 12, 5, 5, 0, 0, 5, 0},
       {17, 17, 12, 12, 6, 6, 9, 9, 11, 11, 11, 11, 12, 5, 5, 4, 4, 5, 4}},
      std::make_shared<Array>(U"\"ccc\"≡2‿¯1‿2⊏\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((3-˜↕5)⊸⊏≡2⊸⌽)↕5‿2") {
  spdlog::critical("test='{}'", "((3-˜↕5)⊸⊏≡2⊸⌽)↕5‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  8, 0,  9, 11, 2,  0, 2, 16, 0,  3,  0,  6,
                   0,  9, 27, 0, 1,  0,  4, 0, 6,  0,  8,  0,  2,
                   16, 0, 5,  0, 0,  26, 0, 7, 17, 27, 21, 16, 7},
                  {runtime[1], runtime[18], runtime[28], runtime[31],
                   runtime[36], runtime[45], runtime[55], 3, 5, 2},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{16, 16, 18, 18, 18, 18, 15, 15, 15, 13, 13, 12, 12,
                    11, 11, 12, 10, 10, 9,  9,  8,  8,  6,  6,  5,  5,
                    5,  4,  4,  3,  3,  4,  2,  2,  3,  8,  10, 0,  0},
                   {16, 16, 18, 18, 18, 18, 15, 15, 15, 13, 13, 12, 12,
                    11, 11, 12, 10, 10, 9,  9,  8,  8,  6,  6,  5,  5,
                    5,  4,  4,  3,  3,  4,  2,  2,  4,  8,  10, 14, 14}},
                  std::make_shared<Array>(U"((3-˜↕5)⊸⊏≡2⊸⌽)↕5‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿3⥊0)≡⟨⟩⊏2‿3⥊↕6") {
  spdlog::critical("test='{}'", "(0‿3⥊0)≡⟨⟩⊏2‿3⥊↕6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7,  0, 2, 16, 0, 1, 0, 6, 0, 5, 11, 2,  17, 0,  3,  11,
       0, 17, 0, 0, 0,  4, 0, 1, 0, 4, 0, 5,  11, 2,  17, 17, 7},
      {runtime[18], runtime[22], runtime[28], runtime[36], 0, 3, 2, 6},
      {{0, 1, 0}},
      {{0, 0}},
      {{16, 16, 15, 15, 15, 14, 14, 11, 11, 13, 13, 13, 13, 14, 10, 10, 8,
        8,  10, 7,  7,  5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  7,  0},
       {16, 16, 15, 15, 15, 14, 14, 11, 11, 13, 13, 13, 13, 14, 10, 10, 9,
        9,  10, 7,  7,  5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  7,  6}},
      std::make_shared<Array>(U"(0‿3⥊0)≡⟨⟩⊏2‿3⥊↕6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3‿0,2‿1‿2⟩(×⟜5⊸+⌜´∘⊣≡⊏)⥊⟜(↕×´)6‿5") {
  spdlog::critical("test='{}'", "⟨3‿0,2‿1‿2⟩(×⟜5⊸+⌜´∘⊣≡⊏)⥊⟜(↕×´)6‿5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  17, 0,  16, 11, 2,  0,  8, 0,  1,  26, 0,  5,  20, 0, 11, 0,
       4,  27, 16, 0,  6,  0,  2,  0, 3,  0,  9,  0,  8,  0,  7, 0,  0,
       0,  10, 0,  16, 0,  11, 0,  1, 27, 27, 26, 26, 27, 21, 0, 12, 0,
       13, 11, 2,  0,  14, 0,  15, 0, 14, 11, 3,  11, 2,  17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[20], runtime[22],
       runtime[28], runtime[36], runtime[48], runtime[50], runtime[53],
       runtime[55], runtime[56], 3, 0, 2, 1, 5, 6},
      {{0, 1, 0}},
      {{0, 0}},
      {{31, 31, 33, 33, 33, 33, 29, 29, 28, 28, 29, 27, 27, 27, 25, 25, 24,
        24, 25, 24, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16,
        15, 15, 14, 14, 13, 13, 12, 12, 13, 15, 17, 18, 19, 21, 1,  1,  3,
        3,  3,  3,  5,  5,  7,  7,  9,  9,  9,  9,  0,  0,  11, 0},
       {31, 31, 33, 33, 33, 33, 29, 29, 28, 28, 29, 27, 27, 27, 25, 25, 24,
        24, 25, 30, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16,
        15, 15, 14, 14, 13, 13, 12, 12, 13, 15, 17, 18, 19, 21, 1,  1,  3,
        3,  3,  3,  5,  5,  7,  7,  9,  9,  9,  9,  10, 10, 23, 10}},
      std::make_shared<Array>(U"⟨3‿0,2‿1‿2⟩(×⟜5⊸+⌜´∘⊣≡⊏)⥊⟜(↕×´)6‿5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‿0⥊0)≡⟨3‿¯1,⟨⟩⟩⊏4‿3⥊0") {
  spdlog::critical("test='{}'", "(2‿0⥊0)≡⟨3‿¯1,⟨⟩⟩⊏4‿3⥊0");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0,  7, 0,  5, 11, 2, 17, 0,  2,
                   0, 5, 0, 6, 11, 2, 11, 0, 11, 2, 17, 0,  0,
                   0, 4, 0, 1, 0,  3, 0,  4, 11, 2, 17, 17, 7},
                  {runtime[18], runtime[22], runtime[36], 2, 0, 3, -1, 4},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{22, 22, 21, 21, 18, 18, 20, 20, 20, 20, 21, 17, 17,
                    9,  9,  11, 11, 11, 11, 14, 14, 8,  8,  17, 7,  7,
                    5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  7,  0},
                   {22, 22, 21, 21, 18, 18, 20, 20, 20, 20, 21, 17, 17,
                    9,  9,  12, 12, 12, 12, 15, 15, 16, 16, 17, 7,  7,
                    5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  7,  6}},
                  std::make_shared<Array>(U"(2‿0⥊0)≡⟨3‿¯1,⟨⟩⟩⊏4‿3⥊0")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‿1(<⊸⊏≡⊏)↕6‿2") {
  spdlog::critical("test='{}'", "5‿1(<⊸⊏≡⊏)↕6‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 7, 0, 8, 11, 2,  0, 2, 16, 0, 3,  0, 1,  0, 3,
                   0, 4, 0, 0, 27, 21, 0, 5, 0,  6, 11, 2, 17, 7},
                  {runtime[12], runtime[18], runtime[28], runtime[36],
                   runtime[55], 5, 1, 6, 2},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{11, 11, 13, 13, 13, 13, 10, 10, 10, 8, 8, 7, 7, 6, 6,
                    5,  5,  4,  4,  5,  7,  0,  0,  2,  2, 2, 2, 3, 2},
                   {11, 11, 13, 13, 13, 13, 10, 10, 10, 8, 8, 7, 7, 6, 6,
                    5,  5,  4,  4,  5,  7,  0,  0,  2,  2, 2, 2, 9, 2}},
                  std::make_shared<Array>(U"5‿1(<⊸⊏≡⊏)↕6‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨4‿0,1‿2‿3‿2‿1‿0⟩(+⌜´⊸(×⌜)≡⊏⟜(×⌜˜))+⌜˜↕5") {
  spdlog::critical("test='{}'", "⟨4‿0,1‿2‿3‿2‿1‿0⟩(+⌜´⊸(×⌜)≡⊏⟜(×⌜˜))+⌜˜↕5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 15, 0,  3,  16, 0,  5,  0,  6,  0,  0,  26, 26, 16, 0,  5,  0, 6,
       0, 1,  26, 26, 0,  9,  0,  4,  27, 0,  2,  0,  6,  0,  1,  26, 0, 8,
       0, 7,  0,  6,  0,  0,  26, 26, 27, 21, 0,  10, 0,  11, 11, 2,  0, 12,
       0, 13, 0,  14, 0,  13, 0,  12, 0,  11, 11, 6,  11, 2,  17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[28], runtime[36],
       runtime[45], runtime[48], runtime[50], runtime[55], runtime[56], 4, 0, 1,
       2, 3, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{39, 39, 38, 38, 38, 37, 37, 36, 36, 35, 35, 36, 37, 35, 32, 32, 31, 31,
        30, 30, 31, 32, 28, 28, 27, 27, 28, 26, 26, 24, 24, 23, 23, 24, 21, 21,
        20, 20, 19, 19, 18, 18, 19, 20, 21, 26, 1,  1,  3,  3,  3,  3,  5,  5,
        7,  7,  9,  9,  11, 11, 13, 13, 15, 15, 15, 15, 0,  0,  17, 0},
       {39, 39, 38, 38, 38, 37, 37, 36, 36, 35, 35, 36, 37, 37, 32, 32, 31, 31,
        30, 30, 31, 32, 28, 28, 27, 27, 28, 26, 26, 24, 24, 23, 23, 24, 21, 21,
        20, 20, 19, 19, 18, 18, 19, 20, 21, 26, 1,  1,  3,  3,  3,  3,  5,  5,
        7,  7,  9,  9,  11, 11, 13, 13, 15, 15, 15, 15, 16, 16, 34, 16}},
      std::make_shared<Array>(U"⟨4‿0,1‿2‿3‿2‿1‿0⟩(+⌜´⊸(×⌜)≡⊏⟜(×⌜˜))+⌜˜↕5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´1=≡¨(<⟨⟩)(↑¨∾↓¨)⟨@,+,<@,↕3⟩") {
  spdlog::critical("test='{}'", "∧´1=≡¨(<⟨⟩)(↑¨∾↓¨)⟨@,+,<@,↕3⟩");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 13, 0,  0,  0,  13, 0, 2, 16, 0,  12, 0,  8, 16, 11, 4,  0,  9,
       0, 7,  26, 0,  5,  0,  9, 0, 6,  26, 21, 11, 0, 0,  2,  16, 17, 0,
       9, 0,  4,  26, 16, 0,  3, 0, 11, 17, 0,  10, 0, 1,  26, 16, 7},
      {runtime[0], runtime[10], runtime[12], runtime[15], runtime[18],
       runtime[23], runtime[26], runtime[27], runtime[28], runtime[47],
       runtime[50], 1, 3, std::make_shared<Character>(U'\0')},
      {{0, 1, 0}},
      {{0, 0}},
      {{19, 19, 21, 21, 24, 24, 23, 23, 23, 27, 27, 26, 26, 26, 18, 18, 16, 16,
        15, 15, 16, 14, 14, 13, 13, 12, 12, 13, 14, 8,  8,  7,  7,  7,  11, 5,
        5,  4,  4,  5,  4,  3,  3,  2,  2,  3,  1,  1,  0,  0,  1,  0,  0},
       {19, 19, 21, 21, 24, 24, 23, 23, 23, 27, 27, 26, 26, 26, 28, 28, 16, 16,
        15, 15, 16, 14, 14, 13, 13, 12, 12, 13, 14, 9,  9,  7,  7,  7,  17, 5,
        5,  4,  4,  5,  5,  3,  3,  2,  2,  3,  1,  1,  0,  0,  1,  1,  0}},
      std::make_shared<Array>(U"∧´1=≡¨(<⟨⟩)(↑¨∾↓¨)⟨@,+,<@,↕3⟩")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡3↑\"abce\"") {
  spdlog::critical("test='{}'", "\"abc\"≡3↑\"abce\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[26], 3, std::make_shared<Array>(U"abc"),
                   std::make_shared<Array>(U"abce")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 7, 7, 6, 6, 7, 5, 5, 0, 0, 5, 0},
                   {13, 13, 7, 7, 6, 6, 7, 5, 5, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"\"abc\"≡3↑\"abce\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"e\"≡¯1↑\"abce\"") {
  spdlog::critical("test='{}'", "\"e\"≡¯1↑\"abce\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[26], -1, std::make_shared<Array>(U"e"),
                   std::make_shared<Array>(U"abce")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 4, 4, 6, 3, 3, 0, 0, 3, 0},
                   {12, 12, 6, 6, 5, 5, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\"e\"≡¯1↑\"abce\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"\"≡0↑\"ab\"") {
  spdlog::critical("test='{}'", "\"\"≡0↑\"ab\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[26], 0, std::make_shared<Array>(U""),
                   std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 3, 3, 4, 2, 2, 0, 0, 2, 0},
                   {8, 8, 4, 4, 3, 3, 4, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"\"\"≡0↑\"ab\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<⟜3⊸×↕5)≡5↑↕3") {
  spdlog::critical("test='{}'", "(<⟜3⊸×↕5)≡5↑↕3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  7, 0, 4, 16, 0, 3, 0, 8, 17, 0, 2,  0,  8,  0,  4,
                   16, 0, 0, 0, 5,  0, 7, 0, 6, 0,  1, 27, 27, 16, 17, 7},
                  {runtime[2], runtime[12], runtime[18], runtime[26],
                   runtime[28], runtime[55], runtime[56], 3, 5},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{13, 13, 12, 12, 12, 11, 11, 10, 10, 11, 9, 9, 7, 7, 6, 6,
                    6,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1, 2, 4, 1, 9, 0},
                   {13, 13, 12, 12, 12, 11, 11, 10, 10, 11, 9, 9, 7, 7, 6, 6,
                    6,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1, 2, 4, 5, 9, 8}},
                  std::make_shared<Array>(U"(<⟜3⊸×↕5)≡5↑↕3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6⥊0)≡¯6↑↕0") {
  spdlog::critical("test='{}'", "(6⥊0)≡¯6↑↕0");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 3, 16, 0, 2, 0, 6, 17, 0, 0, 0, 5, 0, 1, 0, 4, 17, 17, 7},
      {runtime[18], runtime[22], runtime[26], runtime[28], 6, 0, -6},
      {{0, 1, 0}},
      {{0, 0}},
      {{10, 10, 9, 9, 9, 8, 8, 6, 6, 8, 5, 5, 3, 3, 2, 2, 1, 1, 2, 5, 0},
       {10, 10, 9, 9, 9, 8, 8, 7, 7, 8, 5, 5, 3, 3, 2, 2, 1, 1, 2, 5, 4}},
      std::make_shared<Array>(U"(6⥊0)≡¯6↑↕0")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍↕3)≡1↑2‿3⥊↕6") {
  spdlog::critical("test='{}'", "(≍↕3)≡1↑2‿3⥊↕6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8, 0,  4, 16, 0, 1, 0, 7, 0,  5, 11, 2,  17, 0, 3,
                   0, 6, 17, 0, 0,  0, 5, 0, 4, 16, 0, 2,  16, 17, 7},
                  {runtime[18], runtime[22], runtime[24], runtime[26],
                   runtime[28], 3, 1, 2, 6},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{13, 13, 12, 12, 12, 11, 11, 8, 8, 10, 10, 10, 10, 11, 7, 7,
                    6,  6,  7,  5,  5,  3,  3,  2, 2, 2,  1,  1,  1,  5,  0},
                   {13, 13, 12, 12, 12, 11, 11, 8, 8, 10, 10, 10, 10, 11, 7, 7,
                    6,  6,  7,  5,  5,  3,  3,  2, 2, 2,  1,  1,  1,  5,  4}},
                  std::make_shared<Array>(U"(≍↕3)≡1↑2‿3⥊↕6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↑⟜4≡⥊⟜0)↕3") {
  spdlog::critical("test='{}'", "(↑⟜4≡⥊⟜0)↕3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 7, 0, 3, 16, 0, 6, 0, 4,  0,  1,  27,
                   0, 0, 0, 5, 0,  4, 0, 2, 27, 21, 16, 7},
                  {runtime[18], runtime[22], runtime[26], runtime[28],
                   runtime[56], 4, 0, 3},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 9, 7, 7, 6, 6, 5, 5, 6,
                    4,  4,  3, 3, 2, 2, 1, 1, 2, 4, 0, 0},
                   {10, 10, 9, 9, 9, 7, 7, 6, 6, 5, 5, 6,
                    4,  4,  3, 3, 2, 2, 1, 1, 2, 4, 8, 8}},
                  std::make_shared<Array>(U"(↑⟜4≡⥊⟜0)↕3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍\"abc\")≡(<1)↑2‿3↑\"abcd\"") {
  spdlog::critical("test='{}'", "(≍\"abc\")≡(<1)↑2‿3↑\"abcd\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8, 0, 3,  0,  5, 0, 6, 11, 2, 17, 0,  3,  0,
                   4, 0, 0, 16, 17, 0, 1, 0, 7,  0, 2,  16, 17, 7},
                  {runtime[12], runtime[18], runtime[24], runtime[26], 1, 2, 3,
                   std::make_shared<Array>(U"abc"),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{18, 18, 17, 17, 14, 14, 16, 16, 16, 16, 17, 13, 13, 11,
                    11, 10, 10, 10, 13, 8,  8,  2,  2,  1,  1,  1,  8,  0},
                   {23, 23, 17, 17, 14, 14, 16, 16, 16, 16, 17, 13, 13, 11,
                    11, 10, 10, 10, 13, 8,  8,  6,  6,  1,  1,  1,  8,  7}},
                  std::make_shared<Array>(U"(≍\"abc\")≡(<1)↑2‿3↑\"abcd\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6⥊1)(↑≡⥊⟜⊑)2‿3⥊↕6") {
  spdlog::critical("test='{}'", "(6⥊1)(↑≡⥊⟜⊑)2‿3⥊↕6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0,  3, 16, 0, 1, 0,  8, 0, 9, 11, 2, 17, 0,  4,  0, 5,
       0, 1, 27, 0, 0,  0, 2, 21, 0, 7, 0, 1,  0, 6,  17, 17, 7},
      {runtime[18], runtime[22], runtime[26], runtime[28], runtime[37],
       runtime[56], 6, 1, 2, 3},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 16, 16, 16, 15, 15, 12, 12, 14, 14, 14, 14, 15, 10, 10, 9, 9,
        8,  8,  9,  7,  7,  6,  6,  7,  3,  3,  2,  2,  1,  1,  2,  5,  0},
       {17, 17, 16, 16, 16, 15, 15, 12, 12, 14, 14, 14, 14, 15, 10, 10, 9, 9,
        8,  8,  9,  7,  7,  6,  6,  7,  3,  3,  2,  2,  1,  1,  2,  11, 4}},
      std::make_shared<Array>(U"(6⥊1)(↑≡⥊⟜⊑)2‿3⥊↕6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕¨∘↕∘(1⊸+)≡↑∘↕)5") {
  spdlog::critical("test='{}'", "(↕¨∘↕∘(1⊸+)≡↑∘↕)5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  8, 0, 3, 0, 5, 0, 2, 27, 0, 1, 0,  0,  0,  6,  0,  7,
       27, 0, 5, 0, 3, 0, 5, 0, 4,  0, 3, 26, 27, 27, 21, 16, 7},
      {runtime[0], runtime[18], runtime[26], runtime[28], runtime[47],
       runtime[53], runtime[55], 1, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{16, 16, 14, 14, 13, 13, 12, 12, 13, 11, 11, 9, 9, 8, 8,  7, 7,
        8,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2, 3, 5, 11, 0, 0},
       {16, 16, 14, 14, 13, 13, 12, 12, 13, 11, 11, 9, 9, 8, 8,  7,  7,
        8,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2, 3, 5, 11, 15, 15}},
      std::make_shared<Array>(U"(↕¨∘↕∘(1⊸+)≡↑∘↕)5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↑≡((↕4)≍¨2)⥊¨<)3‿2⥊\"abcdef\"") {
  spdlog::critical("test='{}'", "(↑≡((↕4)≍¨2)⥊¨<)3‿2⥊\"abcdef\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 10, 0, 2, 0,  9, 0, 8, 11, 2,  17, 0,  0, 0, 6, 0, 2,  26, 0, 8,
       0, 6,  0, 3, 26, 0, 7, 0, 5,  16, 17, 21, 0, 1, 0, 4, 21, 16, 7},
      {runtime[12], runtime[18], runtime[22], runtime[24], runtime[26],
       runtime[28], runtime[47], 4, 2, 3, std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}},
      {{0, 0}},
      {{20, 20, 19, 19, 16, 16, 18, 18, 18, 18, 19, 14, 14,
        13, 13, 12, 12, 13, 10, 10, 9,  9,  8,  8,  9,  6,
        6,  5,  5,  5,  8,  12, 2,  2,  1,  1,  2,  0,  0},
       {27, 27, 19, 19, 16, 16, 18, 18, 18, 18, 19, 14, 14,
        13, 13, 12, 12, 13, 10, 10, 9,  9,  8,  8,  9,  6,
        6,  5,  5,  5,  9,  13, 2,  2,  1,  1,  2,  15, 15}},
      std::make_shared<Array>(U"(↑≡((↕4)≍¨2)⥊¨<)3‿2⥊\"abcdef\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"d\"≡3↓\"abcd\"") {
  spdlog::critical("test='{}'", "\"d\"≡3↓\"abcd\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[27], 3, std::make_shared<Array>(U"d"),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{6, 6, 5, 5, 4, 4, 5, 3, 3, 0, 0, 3, 0},
                   {11, 11, 5, 5, 4, 4, 5, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\"d\"≡3↓\"abcd\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2≡⟜(¯3⊸↓)○↕4‿2") {
  spdlog::critical("test='{}'", "1‿2≡⟜(¯3⊸↓)○↕4‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  9, 0, 7, 11, 2,  0,  2, 0, 3, 0, 1,  0, 4,  0, 8,
                   27, 0, 5, 0, 0,  27, 27, 0, 6, 0, 7, 11, 2, 17, 7},
                  {runtime[18], runtime[27], runtime[28], runtime[54],
                   runtime[55], runtime[56], 1, 2, -3, 4},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{13, 13, 15, 15, 15, 15, 12, 12, 11, 11, 9, 9, 8, 8, 6, 6,
                    8,  4,  4,  3,  3,  4,  11, 0,  0,  2,  2, 2, 2, 3, 2},
                   {13, 13, 15, 15, 15, 15, 12, 12, 11, 11, 9, 9, 8, 8,  7, 7,
                    8,  4,  4,  3,  3,  4,  11, 0,  0,  2,  2, 2, 2, 12, 2}},
                  std::make_shared<Array>(U"1‿2≡⟜(¯3⊸↓)○↕4‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿1‿3‿2‿1≡≢(5⥊0)↓↕3‿2‿1") {
  spdlog::critical("test='{}'", "1‿1‿3‿2‿1≡≢(5⥊0)↓↕3‿2‿1");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 6, 0, 7, 0, 5,  11, 3, 0,  4,  16, 0, 3, 0,
                   9, 0, 2, 0, 8, 17, 17, 0, 1,  16, 0,  0, 0, 5,
                   0, 5, 0, 6, 0, 7,  0,  5, 11, 5,  17, 7},
                  {runtime[18], runtime[19], runtime[22], runtime[27],
                   runtime[28], 1, 3, 2, 5, 0},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{18, 18, 20, 20, 22, 22, 22, 22, 17, 17, 17, 16, 16, 14,
                    14, 13, 13, 12, 12, 13, 16, 10, 10, 10, 9,  9,  0,  0,
                    2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  9,  8},
                   {18, 18, 20, 20, 22, 22, 22, 22, 17, 17, 17, 16, 16, 14,
                    14, 13, 13, 12, 12, 13, 16, 10, 10, 10, 9,  9,  0,  0,
                    2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  9,  8}},
                  std::make_shared<Array>(U"1‿1‿3‿2‿1≡≢(5⥊0)↓↕3‿2‿1")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↓∘↕≡↕∘(1⊸+)+⟜⌽↑∘↕)5") {
  spdlog::critical("test='{}'", "(↓∘↕≡↕∘(1⊸+)+⟜⌽↑∘↕)5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 10, 0, 4, 0, 6, 0,  2,  27, 0, 5, 0, 8, 0, 0, 27, 0,  0,  0,  7, 0,
       9, 27, 0, 6, 0, 4, 27, 21, 0,  1, 0, 4, 0, 6, 0, 3,  27, 21, 16, 7},
      {runtime[0], runtime[18], runtime[26], runtime[27], runtime[28],
       runtime[31], runtime[53], runtime[55], runtime[56], 1, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{19, 19, 17, 17, 16, 16, 15, 15, 16, 14, 14, 13, 13, 12,
        12, 13, 10, 10, 9,  9,  8,  8,  9,  6,  6,  5,  5,  6,
        12, 4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  0,  0},
       {19, 19, 17, 17, 16, 16, 15, 15, 16, 14, 14, 13, 13, 12,
        12, 13, 10, 10, 9,  9,  8,  8,  9,  6,  6,  5,  5,  6,
        14, 4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  18, 18}},
      std::make_shared<Array>(U"(↓∘↕≡↕∘(1⊸+)+⟜⌽↑∘↕)5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕3‿4)≡1↓¨⊏↕2‿3‿4") {
  spdlog::critical("test='{}'", "(↕3‿4)≡1↓¨⊏↕2‿3‿4");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  8, 0, 5,  0, 6, 11, 3, 0, 2, 16, 0, 3, 16, 0,  4,  0, 1,
       26, 0, 7, 17, 0, 0, 0,  5, 0, 6, 11, 2, 0, 2,  16, 17, 7},
      {runtime[18], runtime[27], runtime[28], runtime[36], runtime[47], 3, 4, 1,
       2},
      {{0, 1, 0}},
      {{0, 0}},
      {{12, 12, 14, 14, 16, 16, 16, 16, 11, 11, 11, 10, 10, 10, 9, 9, 8, 8,
        9,  7,  7,  8,  6,  6,  2,  2,  4,  4,  4,  4,  1,  1,  1, 6, 0},
       {12, 12, 14, 14, 16, 16, 16, 16, 11, 11, 11, 10, 10, 10, 9, 9, 8, 8,
        9,  7,  7,  9,  6,  6,  2,  2,  4,  4,  4,  4,  1,  1,  1, 6, 5}},
      std::make_shared<Array>(U"(↕3‿4)≡1↓¨⊏↕2‿3‿4")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(4+⌜○↕2)≡2↕↕5") {
  spdlog::critical("test='{}'", "(4+⌜○↕2)≡2↕↕5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0, 2, 16, 0, 2, 0,  6,  17, 0, 1,  0,  6, 0,
       2, 0, 4, 0, 3,  0, 0, 26, 27, 0,  5, 17, 17, 7},
      {runtime[0], runtime[18], runtime[28], runtime[48], runtime[54], 4, 2, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{12, 12, 11, 11, 11, 10, 10, 9, 9, 10, 8, 8, 6, 6, 5,
        5,  4,  4,  3,  3,  2,  2,  3, 4, 1,  1, 2, 8, 0},
       {12, 12, 11, 11, 11, 10, 10, 9, 9, 10, 8, 8, 6, 6, 5,
        5,  4,  4,  3,  3,  2,  2,  3, 4, 1,  1, 5, 8, 7}},
      std::make_shared<Array>(U"(4+⌜○↕2)≡2↕↕5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(↕≡⊢)4‿3⥊\"abcd\"") {
  spdlog::critical("test='{}'", "⟨⟩(↕≡⊢)4‿3⥊\"abcd\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 2, 0, 4, 0, 5, 11, 2, 17, 0, 1, 0, 0, 0, 3, 21, 11, 0, 17, 7},
      {runtime[18], runtime[21], runtime[22], runtime[28], 4, 3,
       std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}},
      {{0, 0}},
      {{11, 11, 10, 10, 7, 7, 9, 9, 9, 9, 10, 5, 5, 4, 4, 3, 3, 4, 0, 0, 2, 0},
       {16, 16, 10, 10, 7, 7, 9, 9, 9, 9, 10, 5, 5, 4, 4, 3, 3, 4, 1, 1, 6, 1}},
      std::make_shared<Array>(U"⟨⟩(↕≡⊢)4‿3⥊\"abcd\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0⊸↕≡(0≍˜1+≠)⊸⥊)↕6") {
  spdlog::critical("test='{}'", "(0⊸↕≡(0≍˜1+≠)⊸⥊)↕6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 10, 0, 5, 16, 0,  3, 0, 7, 0, 1, 0, 0, 0, 9,  21, 0,  6, 0,
       4, 26, 0, 8, 21, 27, 0, 2, 0, 5, 0, 7, 0, 8, 27, 21, 16, 7},
      {runtime[0], runtime[14], runtime[18], runtime[22], runtime[24],
       runtime[28], runtime[45], runtime[55], 0, 1, 6},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 16, 16, 16, 14, 14, 13, 13, 11, 11, 10, 10, 9, 9, 10, 8, 8, 7,
        7,  8,  6,  6,  7,  13, 4,  4,  3,  3,  2,  2,  1,  1, 2, 4,  0, 0},
       {17, 17, 16, 16, 16, 14, 14, 13, 13, 11, 11, 10, 10, 9, 9, 10, 8,  8, 7,
        7,  8,  6,  6,  8,  13, 4,  4,  3,  3,  2,  2,  1,  1, 2, 4,  15, 15}},
      std::make_shared<Array>(U"(0⊸↕≡(0≍˜1+≠)⊸⥊)↕6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(7↕6‿0⥊\"\")≡0‿7‿0⥊\"\"") {
  spdlog::critical("test='{}'", "(7↕6‿0⥊\"\")≡0‿7‿0⥊\"\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 1, 0, 5, 0,  3, 0,  5, 11, 3, 17, 0,  0,  0, 6,
       0, 1, 0, 4, 0, 5, 11, 2, 17, 0, 2,  0, 3,  17, 17, 7},
      {runtime[18], runtime[22], runtime[28], 7, 6, 0,
       std::make_shared<Array>(U"")},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 16, 16, 11, 11, 13, 13, 15, 15, 15, 15, 16, 10, 10, 7, 7,
        6,  6,  3,  3,  5,  5,  5,  5,  6,  2,  2,  1,  1,  2,  10, 0},
       {18, 18, 16, 16, 11, 11, 13, 13, 15, 15, 15, 15, 16, 10, 10, 8, 8,
        6,  6,  3,  3,  5,  5,  5,  5,  6,  2,  2,  1,  1,  2,  10, 9}},
      std::make_shared<Array>(U"(7↕6‿0⥊\"\")≡0‿7‿0⥊\"\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(»˜⊸≡∧«˜⊸≡)\"\"") {
  spdlog::critical("test='{}'", "(»˜⊸≡∧«˜⊸≡)\"\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 6, 0, 1, 0, 5, 0, 4, 0,  2,  26, 27, 0, 0,
                   0, 1, 0, 5, 0, 4, 0, 3, 26, 27, 21, 16, 7},
                  {runtime[10], runtime[18], runtime[29], runtime[30],
                   runtime[45], runtime[55], std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{11, 11, 9, 9, 8, 8, 7, 7, 6, 6, 7, 8, 5, 5,
                    4,  4,  3, 3, 2, 2, 1, 1, 2, 3, 5, 0, 0},
                   {12, 12, 9, 9, 8, 8, 7, 7, 6, 6, 7, 8,  5, 5,
                    4,  4,  3, 3, 2, 2, 1, 1, 2, 3, 5, 10, 10}},
                  std::make_shared<Array>(U"(»˜⊸≡∧«˜⊸≡)\"\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⟨⟩»\"a\"") {
  spdlog::critical("test='{}'", "\"a\"≡⟨⟩»\"a\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[30], std::make_shared<Array>(U"a")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 4, 4, 6, 3, 3, 0, 0, 3, 0},
                   {9, 9, 6, 6, 5, 5, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\"a\"≡⟨⟩»\"a\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡\"a\"»⟨⟩") {
  spdlog::critical("test='{}'", "⟨⟩≡\"a\"»⟨⟩");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 1, 0, 2, 17, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[30], std::make_shared<Array>(U"a")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 3, 3, 6, 2, 2, 0, 0, 2, 0},
                   {8, 8, 6, 6, 5, 5, 6, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"⟨⟩≡\"a\"»⟨⟩")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aBC\"≡\"a\"»\"BCD\"") {
  spdlog::critical("test='{}'", "\"aBC\"≡\"a\"»\"BCD\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[30], std::make_shared<Array>(U"aBC"),
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"BCD")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 6, 6, 9, 5, 5, 0, 0, 5, 0},
                   {14, 14, 9, 9, 8, 8, 9, 5, 5, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"\"aBC\"≡\"a\"»\"BCD\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"CDa\"≡\"a\"«\"BCD\"") {
  spdlog::critical("test='{}'", "\"CDa\"≡\"a\"«\"BCD\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[29], std::make_shared<Array>(U"CDa"),
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"BCD")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 6, 6, 9, 5, 5, 0, 0, 5, 0},
                   {14, 14, 9, 9, 8, 8, 9, 5, 5, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"\"CDa\"≡\"a\"«\"BCD\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"d\"≡\"abcd\"«⟨4⟩") {
  spdlog::critical("test='{}'", "\"d\"≡\"abcd\"«⟨4⟩");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 11, 1, 0, 1, 0, 4, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[29], 4, std::make_shared<Array>(U"d"),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{12, 12, 11, 11, 10, 10, 4, 4, 10, 3, 3, 0, 0, 3, 0},
                   {12, 12, 13, 13, 10, 10, 9, 9, 10, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\"d\"≡\"abcd\"«⟨4⟩")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((⊢⌜˜≠¨)≡(≠¨«⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"") {
  spdlog::critical("test='{}'", "((⊢⌜˜≠¨)≡(≠¨«⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 9, 0,  7,  0,  8, 11, 2, 0, 10, 11, 3,  0,  4,  0,
       6, 0, 3,  26, 26, 0, 5,  0, 0, 26, 20, 0,  1,  0,  5,
       0, 0, 26, 0,  4,  0, 6,  0, 2, 26, 26, 20, 21, 16, 7},
      {runtime[14], runtime[18], runtime[21], runtime[29], runtime[45],
       runtime[47], runtime[48], 2, 3, std::make_shared<Array>(U""),
       std::make_shared<Array>(U"abcde")},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 21, 21, 23, 23, 20, 20, 26, 26, 26, 26, 14, 14, 13,
        13, 12, 12, 13, 14, 11, 11, 10, 10, 11, 10, 8,  8,  6,  6,
        5,  5,  6,  4,  4,  3,  3,  2,  2,  3,  4,  2,  8,  0,  0},
       {18, 18, 21, 21, 23, 23, 24, 24, 32, 32, 32, 32, 14, 14, 13,
        13, 12, 12, 13, 14, 11, 11, 10, 10, 11, 11, 8,  8,  6,  6,
        5,  5,  6,  4,  4,  3,  3,  2,  2,  3,  4,  4,  8,  16, 16}},
      std::make_shared<Array>(U"((⊢⌜˜≠¨)≡(≠¨«⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"Zcab\"≡\"WXYZ\"«´\"ab\"‿\"c\"‿\"\"") {
  spdlog::critical("test='{}'", "\"Zcab\"≡\"WXYZ\"«´\"ab\"‿\"c\"‿\"\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 6, 0, 7, 11, 3, 0, 2, 0, 1, 26, 0, 4, 17, 0, 0, 0, 3, 17, 7},
      {runtime[18], runtime[29], runtime[50], std::make_shared<Array>(U"Zcab"),
       std::make_shared<Array>(U"WXYZ"), std::make_shared<Array>(U"ab"),
       std::make_shared<Array>(U"c"), std::make_shared<Array>(U"")},
      {{0, 1, 0}},
      {{0, 0}},
      {{15, 15, 20, 20, 24, 24, 24, 24, 14, 14, 13,
        13, 14, 7,  7,  13, 6,  6,  0,  0,  6,  0},
       {18, 18, 22, 22, 25, 25, 25, 25, 14, 14, 13,
        13, 14, 12, 12, 14, 6,  6,  5,  5,  6,  5}},
      std::make_shared<Array>(U"\"Zcab\"≡\"WXYZ\"«´\"ab\"‿\"c\"‿\"\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dab\"≡'d'»\"abc\"") {
  spdlog::critical("test='{}'", "\"dab\"≡'d'»\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[30], std::make_shared<Character>(U'd'),
                   std::make_shared<Array>(U"dab"),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 6, 6, 9, 5, 5, 0, 0, 5, 0},
                   {14, 14, 9, 9, 8, 8, 9, 5, 5, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"\"dab\"≡\'d\'»\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dab\"≡'d'<⊸»\"abc\"") {
  spdlog::critical("test='{}'", "\"dab\"≡'d'<⊸»\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 2, 0, 3, 0, 0, 27, 0, 4, 17, 0, 1, 0, 5, 17, 7},
      {runtime[12], runtime[18], runtime[30], runtime[55],
       std::make_shared<Character>(U'd'), std::make_shared<Array>(U"dab"),
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}},
      {{0, 0}},
      {{12, 12, 11, 11, 10, 10, 9, 9, 10, 6, 6, 9, 5, 5, 0, 0, 5, 0},
       {16, 16, 11, 11, 10, 10, 9, 9, 10, 8, 8, 11, 5, 5, 4, 4, 5, 4}},
      std::make_shared<Array>(U"\"dab\"≡\'d\'<⊸»\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1⊸⌽≡⊏⊸«)'a'+⥊⟜(↕×´)4‿2") {
  spdlog::critical("test='{}'", "(1⊸⌽≡⊏⊸«)'a'+⥊⟜(↕×´)4‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  12, 0, 13, 11, 2, 0, 8, 0,  1,  26, 0,  4,  20, 0,
                   10, 0,  3, 27, 16, 0, 0, 0, 14, 17, 0,  5,  0,  9,  0,
                   7,  27, 0, 2,  0,  6, 0, 9, 0,  11, 27, 21, 16, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[22],
                   runtime[28], runtime[29], runtime[31], runtime[36],
                   runtime[50], runtime[55], runtime[56], 1, 4, 2,
                   std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{20, 20, 22, 22, 22, 22, 18, 18, 17, 17, 18, 16, 16, 16, 14,
                    14, 13, 13, 14, 13, 12, 12, 9,  9,  12, 7,  7,  6,  6,  5,
                    5,  6,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  0,  0},
                   {20, 20, 22, 22, 22, 22, 18, 18, 17, 17, 18, 16, 16, 16, 14,
                    14, 13, 13, 14, 19, 12, 12, 11, 11, 12, 7,  7,  6,  6,  5,
                    5,  6,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  8,  8}},
                  std::make_shared<Array>(U"(1⊸⌽≡⊏⊸«)\'a\'+⥊⟜(↕×´)4‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯2(⌽≡↑»⊢)'a'+⥊⟜(↕×´)4‿2") {
  spdlog::critical("test='{}'", "¯2(⌽≡↑»⊢)'a'+⥊⟜(↕×´)4‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 12, 0,  13, 11, 2, 0, 9, 0, 1, 26, 0, 6, 20, 0, 10, 0, 4,  27, 16, 0,
       0, 0,  14, 17, 0,  3, 0, 7, 0, 5, 21, 0, 2, 0,  8, 21, 0, 11, 17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[21], runtime[22],
       runtime[26], runtime[28], runtime[30], runtime[31], runtime[50],
       runtime[56], -2, 4, 2, std::make_shared<Character>(U'a')},
      {{0, 1, 0}},
      {{0, 0}},
      {{20, 20, 22, 22, 22, 22, 18, 18, 17, 17, 18, 16, 16, 16,
        14, 14, 13, 13, 14, 13, 12, 12, 9,  9,  12, 7,  7,  6,
        6,  5,  5,  6,  4,  4,  3,  3,  4,  0,  0,  2,  0},
       {20, 20, 22, 22, 22, 22, 18, 18, 17, 17, 18, 16, 16, 16,
        14, 14, 13, 13, 14, 19, 12, 12, 11, 11, 12, 7,  7,  6,
        6,  5,  5,  6,  4,  4,  3,  3,  4,  1,  1,  8,  1}},
      std::make_shared<Array>(U"¯2(⌽≡↑»⊢)\'a\'+⥊⟜(↕×´)4‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6(↑≡»⟜(⥊⟜0)˜)↕4") {
  spdlog::critical("test='{}'", "6(↑≡»⟜(⥊⟜0)˜)↕4");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 3,  16, 0, 5, 0, 8, 0,  6, 0, 1,  27, 0,
                   6, 0, 4, 27, 26, 0, 0, 0, 2, 21, 0, 7, 17, 7},
                  {runtime[18], runtime[22], runtime[26], runtime[28],
                   runtime[30], runtime[45], runtime[56], 6, 0, 4},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{14, 14, 13, 13, 13, 11, 11, 9, 9, 8, 8, 7, 7, 8, 5,
                    5,  4,  4,  5,  11, 3,  3,  2, 2, 3, 0, 0, 1, 0},
                   {14, 14, 13, 13, 13, 11, 11, 9, 9, 8, 8, 7, 7,  8, 5,
                    5,  4,  4,  5,  11, 3,  3,  2, 2, 3, 0, 0, 12, 0}},
                  std::make_shared<Array>(U"6(↑≡»⟜(⥊⟜0)˜)↕4")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("«˜⊸≡2‿3⥊\"abcdef\"") {
  spdlog::critical("test='{}'", "«˜⊸≡2‿3⥊\"abcdef\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0, 1, 0, 5, 0, 6,  11, 2,  17, 0,
       0, 0, 4, 0, 3, 0, 2, 26, 27, 16, 7},
      {runtime[18], runtime[22], runtime[29], runtime[45], runtime[55], 2, 3,
       std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}},
      {{0, 0}},
      {{8, 8, 7, 7, 4, 4, 6, 6, 6, 6, 7, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 0, 0},
       {15, 15, 7, 7, 4, 4, 6, 6, 6, 6, 7, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 3, 0}},
      std::make_shared<Array>(U"«˜⊸≡2‿3⥊\"abcdef\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(»≡0⌈-⟜1)↕6") {
  spdlog::critical("test='{}'", "(»≡0⌈-⟜1)↕6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8, 0, 3, 16, 0, 7, 0, 5, 0,  0,  27,
                   0, 1, 0, 6, 21, 0, 2, 0, 4, 21, 16, 7},
                  {runtime[1], runtime[7], runtime[18], runtime[28],
                   runtime[30], runtime[56], 0, 1, 6},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 9, 7, 7, 6, 6, 5, 5, 6,
                    4,  4,  3, 3, 4, 2, 2, 1, 1, 2, 0, 0},
                   {10, 10, 9, 9, 9, 7, 7, 6, 6, 5, 5, 6,
                    4,  4,  3, 3, 4, 2, 2, 1, 1, 2, 8, 8}},
                  std::make_shared<Array>(U"(»≡0⌈-⟜1)↕6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(«≡1⊸⌽)↕6") {
  spdlog::critical("test='{}'", "(«≡1⊸⌽)↕6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 1, 16, 0, 3, 0, 4, 0, 5, 27, 0, 0, 0, 2, 21, 16, 7},
      {runtime[18], runtime[28], runtime[29], runtime[31], runtime[55], 1, 6},
      {{0, 1, 0}},
      {{0, 0}},
      {{8, 8, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 2, 2, 1, 1, 2, 0, 0},
       {8, 8, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 2, 2, 1, 1, 2, 6, 6}},
      std::make_shared<Array>(U"(«≡1⊸⌽)↕6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(»≡0⌈-⟜2)⥊⟜(↕×´)5‿2") {
  spdlog::critical("test='{}'", "(»≡0⌈-⟜2)⥊⟜(↕×´)5‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  11, 0, 10, 11, 2,  0,  7, 0,  1, 26, 0,  5,
                   20, 0,  8, 0,  4,  27, 16, 0, 10, 0, 8,  0,  0,
                   27, 0,  2, 0,  9,  21, 0,  3, 0,  6, 21, 16, 7},
                  {runtime[1], runtime[2], runtime[7], runtime[18], runtime[22],
                   runtime[28], runtime[30], runtime[50], runtime[56], 0, 2, 5},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{16, 16, 18, 18, 18, 18, 14, 14, 13, 13, 14, 12, 12,
                    12, 10, 10, 9,  9,  10, 9,  7,  7,  6,  6,  5,  5,
                    6,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  0,  0},
                   {16, 16, 18, 18, 18, 18, 14, 14, 13, 13, 14, 12, 12,
                    12, 10, 10, 9,  9,  10, 15, 7,  7,  6,  6,  5,  5,
                    6,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  8,  8}},
                  std::make_shared<Array>(U"(»≡0⌈-⟜2)⥊⟜(↕×´)5‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(«≡1⌽1⊸<⊸×)⥊⟜(↕×´)5‿2") {
  spdlog::critical("test='{}'", "(«≡1⌽1⊸<⊸×)⥊⟜(↕×´)5‿2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  11, 0, 12, 11, 2,  0,  7, 0, 0, 26, 0,  4,  20, 0,
                   9,  0,  3, 27, 16, 0,  0,  0, 8, 0, 1,  0,  8,  0,  10,
                   27, 27, 0, 6,  0,  10, 21, 0, 2, 0, 5,  21, 16, 7},
                  {runtime[2], runtime[12], runtime[18], runtime[22],
                   runtime[28], runtime[29], runtime[31], runtime[50],
                   runtime[55], runtime[56], 1, 5, 2},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{18, 18, 20, 20, 20, 20, 16, 16, 15, 15, 16, 14, 14, 14, 12,
                    12, 11, 11, 12, 11, 9,  9,  8,  8,  7,  7,  6,  6,  5,  5,
                    6,  8,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  0,  0},
                   {18, 18, 20, 20, 20, 20, 16, 16, 15, 15, 16, 14, 14, 14, 12,
                    12, 11, 11, 12, 17, 9,  9,  8,  8,  7,  7,  6,  6,  5,  5,
                    6,  8,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  10, 10}},
                  std::make_shared<Array>(U"(«≡1⌽1⊸<⊸×)⥊⟜(↕×´)5‿2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⌽⟨⟩") {
  spdlog::critical("test='{}'", "≡⟜⌽⟨⟩");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[31], runtime[56]},
      {{0, 1, 0}},
      {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜⌽⟨⟩")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⌽\"a\"") {
  spdlog::critical("test='{}'", "≡⟜⌽\"a\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[31], runtime[56], std::make_shared<Array>(U"a")},
      {{0, 1, 0}},
      {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {5, 5, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜⌽\"a\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ba\"≡⟜⌽\"ab\"") {
  spdlog::critical("test='{}'", "\"ba\"≡⟜⌽\"ab\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 0, 0, 27, 0, 3, 17, 7},
                  {runtime[18], runtime[31], runtime[56],
                   std::make_shared<Array>(U"ba"),
                   std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 5, 5, 4, 4, 5, 0, 0, 4, 0},
                   {10, 10, 6, 6, 5, 5, 4, 4, 5, 3, 3, 6, 3}},
                  std::make_shared<Array>(U"\"ba\"≡⟜⌽\"ab\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽≡(1-˜≠)(-○⊑∾1↓⊢)⚇1⊢)↕3‿2‿4") {
  spdlog::critical("test='{}'", "(⌽≡(1-˜≠)(-○⊑∾1↓⊢)⚇1⊢)↕3‿2‿4");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 13, 0, 14, 0,  15, 11, 3,  0,  6,  16, 0,  3, 0, 12, 0,  11, 0,
       3, 0,  5, 0,  12, 21, 0,  4,  0,  8,  0,  10, 0, 0, 27, 21, 27, 0,
       1, 0,  9, 0,  0,  26, 0,  12, 21, 21, 0,  2,  0, 7, 21, 16, 7},
      {runtime[1], runtime[14], runtime[18], runtime[21], runtime[23],
       runtime[27], runtime[28], runtime[31], runtime[37], runtime[45],
       runtime[54], runtime[61], 1, 3, 2, 4},
      {{0, 1, 0}},
      {{0, 0}},
      {{23, 23, 25, 25, 27, 27, 27, 27, 22, 22, 22, 20, 20, 19, 19, 18, 18, 16,
        16, 15, 15, 14, 14, 15, 13, 13, 12, 12, 11, 11, 10, 10, 11, 13, 18, 7,
        7,  6,  6,  5,  5,  6,  4,  4,  5,  9,  2,  2,  1,  1,  2,  0,  0},
       {23, 23, 25, 25, 27, 27, 27, 27, 22, 22, 22, 20, 20, 19, 19, 18, 18, 16,
        16, 15, 15, 14, 14, 15, 13, 13, 12, 12, 11, 11, 10, 10, 11, 13, 18, 7,
        7,  6,  6,  5,  5,  6,  4,  4,  6,  19, 2,  2,  1,  1,  2,  21, 21}},
      std::make_shared<Array>(U"(⌽≡(1-˜≠)(-○⊑∾1↓⊢)⚇1⊢)↕3‿2‿4")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⌽↕↕3") {
  spdlog::critical("test='{}'", "≡⟜⌽↕↕3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 16, 0, 1, 16, 0, 2, 0, 3, 0, 0, 27, 16, 7},
                  {runtime[18], runtime[28], runtime[31], runtime[56], 3},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0},
                   {5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
                  std::make_shared<Array>(U"≡⟜⌽↕↕3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´5(⌽≡⊢)¨⟨\"\",⥊∞,↕5,↕0‿4,2‿0‿3⥊\"\"⟩") {
  spdlog::critical("test='{}'", "∧´5(⌽≡⊢)¨⟨\"\",⥊∞,↕5,↕0‿4,2‿0‿3⥊\"\"⟩");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 14, 0, 9,  0, 3, 16, 0,  8, 0,  4,  16, 0,  10, 0,  11, 11, 2, 0,
       4, 16, 0, 14, 0, 3, 0,  12, 0, 10, 0,  13, 11, 3,  17, 11, 5,  0, 6,
       0, 2,  0, 1,  0, 5, 21, 26, 0, 8,  17, 0,  7,  0,  0,  26, 16, 7},
      {runtime[10], runtime[18], runtime[21], runtime[22], runtime[28],
       runtime[31], runtime[47], runtime[50], 5,
       std::make_shared<Number>(1.0 / 0.0), 0, 4, 2, 3,
       std::make_shared<Array>(U"")},
      {{0, 1, 0}},
      {{0, 0}},
      {{10, 10, 14, 14, 13, 13, 13, 17, 17, 16, 16, 16, 20, 20,
        22, 22, 22, 22, 19, 19, 19, 30, 30, 29, 29, 24, 24, 26,
        26, 28, 28, 28, 28, 29, 9,  9,  8,  8,  6,  6,  5,  5,
        4,  4,  5,  8,  2,  2,  3,  1,  1,  0,  0,  1,  0,  0},
       {11, 11, 14, 14, 13, 13, 13, 17, 17, 16, 16, 16, 20, 20,
        22, 22, 22, 22, 19, 19, 19, 31, 31, 29, 29, 24, 24, 26,
        26, 28, 28, 28, 28, 29, 32, 32, 8,  8,  6,  6,  5,  5,
        4,  4,  5,  8,  2,  2,  8,  1,  1,  0,  0,  1,  1,  0}},
      std::make_shared<Array>(U"∧´5(⌽≡⊢)¨⟨\"\",⥊∞,↕5,↕0‿4,2‿0‿3⥊\"\"⟩")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´(\"bcdea\"≡⌽⟜\"abcde\")¨1+5×¯10‿¯2‿¯1‿0‿1‿6‿61") {
  spdlog::critical("test='{}'",
                   "∧´(\"bcdea\"≡⌽⟜\"abcde\")¨1+5×¯10‿¯2‿¯1‿0‿1‿6‿61");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  10, 0, 11, 0,  12, 0,  13, 0,  8, 0, 14, 0,  15, 11, 7, 0,
       1,  0,  9, 17, 0,  0,  0,  8,  17, 0, 5, 0,  17, 0,  7,  0, 4,
       27, 0,  3, 0,  16, 21, 26, 16, 0,  6, 0, 2,  26, 16, 7},
      {runtime[0], runtime[2], runtime[10], runtime[18], runtime[31],
       runtime[47], runtime[50], runtime[56], 1, 5, -10, -2, -1, 0, 6, 61,
       std::make_shared<Array>(U"bcdea"), std::make_shared<Array>(U"abcde")},
      {{0, 1, 0}},
      {{0, 0}},
      {{26, 26, 30, 30, 33, 33, 36, 36, 38, 38, 40, 40, 42, 42, 42, 42, 25,
        25, 24, 24, 25, 23, 23, 22, 22, 23, 21, 21, 13, 13, 12, 12, 11, 11,
        12, 10, 10, 3,  3,  10, 21, 2,  1,  1,  0,  0,  1,  0,  0},
       {28, 28, 31, 31, 34, 34, 36, 36, 38, 38, 40, 40, 43, 43, 43, 43, 25,
        25, 24, 24, 25, 23, 23, 22, 22, 23, 21, 21, 19, 19, 12, 12, 11, 11,
        12, 10, 10, 9,  9,  10, 21, 21, 1,  1,  0,  0,  1,  1,  0}},
      std::make_shared<Array>(
          U"∧´(\"bcdea\"≡⌽⟜\"abcde\")¨1+5×¯10‿¯2‿¯1‿0‿1‿6‿61")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´⟨1,0‿2,¯1‿1‿3⟩(⊑∘⌽≡(3⊸↑)⊸⊑)⚇¯1‿∞ 2‿3‿5⥊\"abcdef\"") {
  spdlog::critical("test='{}'",
                   "∧´⟨1,0‿2,¯1‿1‿3⟩(⊑∘⌽≡(3⊸↑)⊸⊑)⚇¯1‿∞ 2‿3‿5⥊\"abcdef\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 17, 0, 2,  0,  12, 0,  14, 0,  16, 11, 3,  17, 0,  13, 0, 15, 11,
       2, 0,  9, 0,  5,  0,  8,  0,  3,  0,  8,  0,  14, 27, 27, 0, 1,  0,
       4, 0,  7, 0,  5,  27, 21, 27, 0,  10, 0,  11, 0,  12, 11, 2, 0,  13,
       0, 10, 0, 14, 11, 3,  11, 3,  17, 0,  6,  0,  0,  26, 16, 7},
      {runtime[10], runtime[18], runtime[22], runtime[26], runtime[31],
       runtime[37], runtime[50], runtime[53], runtime[55], runtime[61], 1, 0, 2,
       -1, 3, std::make_shared<Number>(1.0 / 0.0), 5,
       std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}},
      {{0, 0}},
      {{41, 41, 40, 40, 35, 35, 37, 37, 39, 39, 39, 39, 40, 30, 30, 33, 33, 33,
        33, 29, 29, 27, 27, 26, 26, 24, 24, 23, 23, 22, 22, 23, 26, 20, 20, 19,
        19, 18, 18, 17, 17, 18, 20, 29, 3,  3,  5,  5,  7,  7,  7,  7,  9,  9,
        12, 12, 14, 14, 14, 14, 2,  2,  16, 1,  1,  0,  0,  1,  0,  0},
       {48, 48, 40, 40, 35, 35, 37, 37, 39, 39, 39, 39, 40, 31, 31, 33, 33, 33,
        33, 29, 29, 27, 27, 26, 26, 24, 24, 23, 23, 22, 22, 23, 26, 20, 20, 19,
        19, 18, 18, 17, 17, 18, 20, 29, 3,  3,  5,  5,  7,  7,  7,  7,  10, 10,
        12, 12, 14, 14, 14, 14, 15, 15, 33, 1,  1,  0,  0,  1,  1,  0}},
      std::make_shared<Array>(
          U"∧´⟨1,0‿2,¯1‿1‿3⟩(⊑∘⌽≡(3⊸↑)⊸⊑)⚇¯1‿∞ 2‿3‿5⥊\"abcdef\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⌽≡<)'a'") {
  spdlog::critical("test='{}'", "(⟨⟩⊸⌽≡<)'a'");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[31], runtime[55],
                   std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 6, 6, 5, 5, 4, 4, 3, 3, 1, 1, 3, 5, 0, 0},
                   {10, 10, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 3, 5, 7, 7}},
                  std::make_shared<Array>(U"(⟨⟩⊸⌽≡<)\'a\'")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿4≡/1‿0‿0‿0‿1‿0") {
  spdlog::critical("test='{}'", "0‿4≡/1‿0‿0‿0‿1‿0");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0,  2, 0, 2, 0, 2, 0, 4,  0, 2,  11, 6,
                   0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
                  {runtime[18], runtime[33], 0, 4, 1},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15, 15, 15,
                    4, 4, 4, 3, 3, 0, 0,  2,  2,  2,  2,  3,  2},
                   {5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15, 15, 15,
                    4, 4, 4, 3, 3, 0, 0,  2,  2,  2,  2,  3,  2}},
                  std::make_shared<Array>(U"0‿4≡/1‿0‿0‿0‿1‿0")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿1‿2≡/0‿2‿1") {
  spdlog::critical("test='{}'", "1‿1‿2≡/0‿2‿1");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 3, 0, 2, 11, 3, 0, 1, 16, 0, 0, 0, 2, 0, 2, 0, 3, 11, 3, 17, 7},
      {runtime[18], runtime[33], 1, 2, 0},
      {{0, 1, 0}},
      {{0, 0}},
      {{7, 7, 9, 9, 11, 11, 11, 11, 6, 6, 6, 5,
        5, 0, 0, 2, 2,  4,  4,  4,  4, 5, 4},
       {7, 7, 9, 9, 11, 11, 11, 11, 6, 6, 6, 5,
        5, 0, 0, 2, 2,  4,  4,  4,  4, 5, 4}},
      std::make_shared<Array>(U"1‿1‿2≡/0‿2‿1")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜/⟨⟩") {
  spdlog::critical("test='{}'", "≡⟜/⟨⟩");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[33], runtime[56]},
      {{0, 1, 0}},
      {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜/⟨⟩")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aabbcc\"≡2/\"abc\"") {
  spdlog::critical("test='{}'", "\"aabbcc\"≡2/\"abc\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[33], 2,
                   std::make_shared<Array>(U"aabbcc"),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{11, 11, 10, 10, 9, 9, 10, 8, 8, 0, 0, 8, 0},
                   {15, 15, 10, 10, 9, 9, 10, 8, 8, 7, 7, 8, 7}},
                  std::make_shared<Array>(U"\"aabbcc\"≡2/\"abc\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"\"≡4/\"\"") {
  spdlog::critical("test='{}'", "\"\"≡4/\"\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[33], 4, std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 3, 3, 4, 2, 2, 0, 0, 2, 0},
                   {6, 6, 4, 4, 3, 3, 4, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"\"\"≡4/\"\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6‿0⥊\"\")≡⟨5,1⟩‿⟨⟩/2‿0⥊\"\"") {
  spdlog::critical("test='{}'", "(6‿0⥊\"\")≡⟨5,1⟩‿⟨⟩/2‿0⥊\"\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8, 0, 1, 0,  7, 0,  4, 11, 2, 17, 0,  2,
                   0, 5, 0, 6, 11, 2, 11, 0, 11, 2, 17, 0,  0,
                   0, 8, 0, 1, 0,  3, 0,  4, 11, 2, 17, 17, 7},
                  {runtime[18], runtime[22], runtime[33], 6, 0, 5, 1, 2,
                   std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{22, 22, 21, 21, 18, 18, 20, 20, 20, 20, 21, 17, 17,
                    10, 10, 12, 12, 9,  9,  15, 15, 15, 15, 17, 8,  8,
                    5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  8,  0},
                   {23, 23, 21, 21, 18, 18, 20, 20, 20, 20, 21, 17, 17,
                    10, 10, 12, 12, 13, 13, 16, 16, 16, 16, 17, 8,  8,
                    6,  6,  4,  4,  1,  1,  3,  3,  3,  3,  4,  8,  7}},
                  std::make_shared<Array>(U"(6‿0⥊\"\")≡⟨5,1⟩‿⟨⟩/2‿0⥊\"\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‿3‿3‿2‿2‿1≡/˜3‿2‿1") {
  spdlog::critical("test='{}'", "3‿3‿3‿2‿2‿1≡/˜3‿2‿1");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 4, 0, 5, 11, 3, 0, 2, 0, 1, 26, 16, 0,  0,
       0, 3, 0, 3, 0, 3, 0,  4, 0, 4, 0, 5, 11, 6,  17, 7},
      {runtime[18], runtime[33], runtime[45], 3, 2, 1},
      {{0, 1, 0}},
      {{0, 0}},
      {{14, 14, 16, 16, 18, 18, 18, 18, 13, 13, 12, 12, 13, 12, 11, 11,
        0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10},
       {14, 14, 16, 16, 18, 18, 18, 18, 13, 13, 12, 12, 13, 13, 11, 11,
        0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10}},
      std::make_shared<Array>(U"3‿3‿3‿2‿2‿1≡/˜3‿2‿1")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‿3‿3‿2‿2‿1≡<⊸/3‿2‿1") {
  spdlog::critical("test='{}'", "3‿3‿3‿2‿2‿1≡<⊸/3‿2‿1");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 5, 0, 6, 11, 3, 0, 2, 0, 3, 0, 0,  27, 16, 0,
       1, 0, 4, 0, 4, 0, 4,  0, 5, 0, 5, 0, 6, 11, 6,  17, 7},
      {runtime[12], runtime[18], runtime[33], runtime[55], 3, 2, 1},
      {{0, 1, 0}},
      {{0, 0}},
      {{15, 15, 17, 17, 19, 19, 19, 19, 14, 14, 13, 13, 12, 12, 13, 12, 11,
        11, 0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10},
       {15, 15, 17, 17, 19, 19, 19, 19, 14, 14, 13, 13, 12, 12, 13, 14, 11,
        11, 0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10}},
      std::make_shared<Array>(U"3‿3‿3‿2‿2‿1≡<⊸/3‿2‿1")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍1∾¨1‿2‿2)≡(↕¨/↕)2‿3") {
  spdlog::critical("test='{}'", "(≍1∾¨1‿2‿2)≡(↕¨/↕)2‿3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  7,  0,  8,  11, 2, 0,  3, 0, 4,  0,  5,  0, 3,
                   26, 21, 16, 0,  0,  0, 6,  0, 7, 0,  7,  11, 3, 0,
                   5,  0,  1,  26, 0,  6, 17, 0, 2, 16, 17, 7},
                  {runtime[18], runtime[23], runtime[24], runtime[28],
                   runtime[33], runtime[47], 1, 2, 3},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{18, 18, 20, 20, 20, 20, 16, 16, 15, 15, 14, 14, 13, 13,
                    14, 15, 12, 11, 11, 5,  5,  7,  7,  9,  9,  9,  9,  4,
                    4,  3,  3,  4,  2,  2,  3,  1,  1,  1,  11, 0},
                   {18, 18, 20, 20, 20, 20, 16, 16, 15, 15, 14, 14, 13, 13,
                    14, 15, 17, 11, 11, 5,  5,  7,  7,  9,  9,  9,  9,  4,
                    4,  3,  3,  4,  2,  2,  4,  1,  1,  1,  11, 10}},
                  std::make_shared<Array>(U"(≍1∾¨1‿2‿2)≡(↕¨/↕)2‿3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸/≡<)'a'") {
  spdlog::critical("test='{}'", "(⟨⟩⊸/≡<)'a'");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[33], runtime[55],
                   std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 6, 6, 5, 5, 4, 4, 3, 3, 1, 1, 3, 5, 0, 0},
                   {10, 10, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 3, 5, 7, 7}},
                  std::make_shared<Array>(U"(⟨⟩⊸/≡<)\'a\'")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(/≡⊢)↕10") {
  spdlog::critical("test='{}'", "⟨⟩(/≡⊢)↕10");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 2, 16, 0, 1, 0, 0, 0, 3, 21, 11, 0, 17, 7},
                  {runtime[18], runtime[21], runtime[28], runtime[33], 10},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 0, 0, 2, 0},
                   {9, 9, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 1, 1, 6, 1}},
                  std::make_shared<Array>(U"⟨⟩(/≡⊢)↕10")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(/≡⊢)≍\"ab\"") {
  spdlog::critical("test='{}'", "⟨⟩(/≡⊢)≍\"ab\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 2, 16, 0, 1, 0, 0, 0, 3, 21, 11, 0, 17, 7},
                  {runtime[18], runtime[21], runtime[24], runtime[33],
                   std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 0, 0, 2, 0},
                   {11, 11, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 1, 1, 6, 1}},
                  std::make_shared<Array>(U"⟨⟩(/≡⊢)≍\"ab\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨2,<3⟩(/≡⥊˜¨⟜≢/⊢)'a'+4‿2⥊↕8") {
  spdlog::critical("test='{}'", "⟨2,<3⟩(/≡⥊˜¨⟜≢/⊢)'a'+4‿2⥊↕8");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  14, 0, 6, 16, 0,  5, 0,  13, 0,  11, 11, 2,  17, 0, 0,  0,  15,
       17, 0,  4, 0, 7,  0,  3, 0,  10, 0,  9,  0,  8,  0,  5, 26, 26, 27,
       21, 0,  2, 0, 7,  21, 0, 11, 0,  12, 0,  1,  16, 11, 2, 17, 7},
      {runtime[0], runtime[12], runtime[18], runtime[19], runtime[21],
       runtime[22], runtime[28], runtime[33], runtime[45], runtime[47],
       runtime[56], 2, 3, 4, 8, std::make_shared<Character>(U'a')},
      {{0, 1, 0}},
      {{0, 0}},
      {{26, 26, 25, 25, 25, 24, 24, 21, 21, 23, 23, 23, 23, 24, 20, 20, 17, 17,
        20, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9,  9,  10, 11, 12,
        14, 8,  8,  7,  7,  8,  1,  1,  4,  4,  3,  3,  3,  0,  0,  6,  0},
       {26, 26, 25, 25, 25, 24, 24, 21, 21, 23, 23, 23, 23, 24, 20, 20, 19, 19,
        20, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9,  9,  10, 11, 12,
        14, 8,  8,  7,  7,  8,  1,  1,  4,  4,  3,  3,  3,  5,  5,  16, 5}},
      std::make_shared<Array>(U"⟨2,<3⟩(/≡⥊˜¨⟜≢/⊢)\'a\'+4‿2⥊↕8")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
