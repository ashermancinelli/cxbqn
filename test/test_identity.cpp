/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-19T13:45:36
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("∧´ {𝕩≡𝕎´⟨⟩}´¨ ⟨+‿0,-‿0,×‿1,÷‿1,∨‿0,∧‿1⟩") {
  spdlog::critical("test='{}', ans='{}'",
                   "∧´ {𝕩≡𝕎´⟨⟩}´¨ ⟨+‿0,-‿0,×‿1,÷‿1,∨‿0,∧‿1⟩", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  0, 0, 9,  11, 2, 0, 1,  0,  9,  11, 2,  0, 2, 0,  10, 11, 2,
       0,  3, 0, 10, 11, 2, 0, 5,  0,  9,  11, 2,  0, 4, 0,  10, 11, 2,
       11, 6, 0, 7,  0,  8, 1, 1,  26, 26, 16, 0,  8, 0, 4,  26, 16, 7,
       11, 0, 0, 8,  34, 0, 2, 26, 16, 0,  6,  34, 0, 1, 17, 7},
      {runtime[0], runtime[1], runtime[2], runtime[3], runtime[10], runtime[11],
       runtime[18], runtime[47], runtime[50], 0, 1},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {54, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´ {𝕩≡𝕎´⟨⟩}´¨ ⟨⋆‿1,¬‿1,⌊‿∞,⌈‿¯∞⟩") {
  spdlog::critical("test='{}', ans='{}'", "∧´ {𝕩≡𝕎´⟨⟩}´¨ ⟨⋆‿1,¬‿1,⌊‿∞,⌈‿¯∞⟩",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  0,  0,  8, 11, 2, 0,  3, 0, 8,  11, 2, 0,  1,  0,  9, 11, 2, 0, 2,
       0,  10, 11, 2, 11, 4, 0,  6, 0, 7,  1,  1, 26, 26, 16, 0, 7,  0, 4, 26,
       16, 7,  11, 0, 0,  7, 34, 0, 2, 26, 16, 0, 5,  34, 0,  1, 17, 7},
      {runtime[4], runtime[6], runtime[7], runtime[9], runtime[10], runtime[18],
       runtime[47], runtime[50], 1, std::make_shared<Number>(1.0 / 0.0),
       std::make_shared<Number>(-1.0 / 0.0)},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {42, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´ {𝕩≡𝕎´⟨⟩}´¨ ⟨≠‿0,=‿1,>‿0,≥‿1⟩") {
  spdlog::critical("test='{}', ans='{}'", "∧´ {𝕩≡𝕎´⟨⟩}´¨ ⟨≠‿0,=‿1,>‿0,≥‿1⟩",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  2, 0,  8, 11, 2, 0,  3, 0, 9,  11, 2, 0,  1,  0,  8, 11, 2, 0, 4,
       0,  9, 11, 2, 11, 4, 0,  6, 0, 7,  1,  1, 26, 26, 16, 0, 7,  0, 0, 26,
       16, 7, 11, 0, 0,  7, 34, 0, 2, 26, 16, 0, 5,  34, 0,  1, 17, 7},
      {runtime[10], runtime[13], runtime[14], runtime[15], runtime[17],
       runtime[18], runtime[47], runtime[50], 0, 1},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {42, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("√´↕0") {
  spdlog::critical("test='{}', ans='{}'", "√´↕0", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 16, 0, 2, 0, 0, 26, 16, 7},
                  {runtime[5], runtime[28], runtime[50], 0},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("|´↕0") {
  spdlog::critical("test='{}', ans='{}'", "|´↕0", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 16, 0, 2, 0, 0, 26, 16, 7},
                  {runtime[8], runtime[28], runtime[50], 0},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("⊢´\"\"") {
  spdlog::critical("test='{}', ans='{}'", "⊢´\"\"", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[21], runtime[50], std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("⊣´\"\"") {
  spdlog::critical("test='{}', ans='{}'", "⊣´\"\"", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[20], runtime[50], std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("∾´⟨⟩") {
  spdlog::critical("test='{}', ans='{}'", "∾´⟨⟩", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[23], runtime[50]},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("≍´⟨⟩") {
  spdlog::critical("test='{}', ans='{}'", "≍´⟨⟩", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[24], runtime[50]},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("∧´ {(3‿1⥊𝕩)≡𝕎˝0‿3‿1⥊\"\"}´¨ "
          "⟨+‿0,-‿0,×‿1,÷‿1,∨‿0,∧‿1,⋆‿1,¬‿1,⌊‿∞,⌈‿¯∞,≠‿0,=‿1,>‿0,≥‿1⟩") {
  spdlog::critical("test='{}', ans='{}'",
                   "∧´ {(3‿1⥊𝕩)≡𝕎˝0‿3‿1⥊\"\"}´¨ "
                   "⟨+‿0,-‿0,×‿1,÷‿1,∨‿0,∧‿1,⋆‿1,¬‿1,⌊‿∞,⌈‿¯∞,≠‿0,=‿1,>‿0,≥‿1⟩",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 0,  0,  21, 11, 2, 0,  1,  0,  21, 11, 2, 0,  2,  0, 20, 11, 2,
       0, 3,  0,  20, 11, 2, 0,  9,  0,  21, 11, 2, 0,  8,  0, 20, 11, 2,
       0, 4,  0,  20, 11, 2, 0,  7,  0,  20, 11, 2, 0,  5,  0, 22, 11, 2,
       0, 6,  0,  23, 11, 2, 0,  11, 0,  21, 11, 2, 0,  12, 0, 20, 11, 2,
       0, 10, 0,  21, 11, 2, 0,  13, 0,  20, 11, 2, 11, 14, 0, 16, 0,  17,
       1, 1,  26, 26, 16, 0, 17, 0,  8,  26, 16, 7, 0,  24, 0, 15, 0,  21,
       0, 19, 0,  20, 11, 3, 17, 0,  18, 34, 0,  2, 26, 16, 0, 14, 34, 0,
       1, 0,  15, 0,  19, 0, 20, 11, 2,  17, 17, 7},
      {runtime[0],
       runtime[1],
       runtime[2],
       runtime[3],
       runtime[4],
       runtime[6],
       runtime[7],
       runtime[9],
       runtime[10],
       runtime[11],
       runtime[13],
       runtime[14],
       runtime[15],
       runtime[17],
       runtime[18],
       runtime[22],
       runtime[47],
       runtime[50],
       runtime[51],
       3,
       1,
       0,
       std::make_shared<Number>(1.0 / 0.0),
       std::make_shared<Number>(-1.0 / 0.0),
       std::make_shared<Array>(U"")},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {102, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∾˝\"\"") {
  spdlog::critical("test='{}', ans='{}'", "∾˝\"\"", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[23], runtime[51], std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}

TEST_CASE("(∾˝(↕5)⥊\"\") ≡ (≠⟜1⊸/↕5)⥊\"\"") {
  spdlog::critical("test='{}', ans='{}'", "(∾˝(↕5)⥊\"\") ≡ (≠⟜1⊸/↕5)⥊\"\"",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 11, 0, 2,  0,  9,  0,  4,  16, 0,  5,  0,  7, 0, 10,
                   0, 8,  0, 0,  27, 27, 16, 17, 0,  1,  0,  11, 0, 2, 0,
                   9, 0,  4, 16, 17, 0,  6,  0,  3,  26, 16, 17, 7},
                  {runtime[14], runtime[18], runtime[22], runtime[23],
                   runtime[28], runtime[33], runtime[51], runtime[55],
                   runtime[56], 5, 1, std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾˝¨≡⥊¨) (≍⥊0˙)⌜˜0‿2‿5") {
  spdlog::critical("test='{}', ans='{}'", "(∾˝¨≡⥊¨) (≍⥊0˙)⌜˜0‿2‿5", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 9,  0, 10, 0, 11, 11, 3,  0,  5,  0,  7,  0, 4, 0,
       9, 26, 0, 1,  0, 3,  21, 26, 26, 16, 0,  6,  0, 1, 26,
       0, 0,  0, 6,  0, 8,  0,  2,  26, 26, 21, 16, 7},
      {runtime[18], runtime[22], runtime[23], runtime[24], runtime[44],
       runtime[45], runtime[47], runtime[48], runtime[51], 0, 2, 5},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⌽˝0‿3⥊⟨⟩") {
  spdlog::critical("test='{}', ans='{}'", "⌽˝0‿3⥊⟨⟩", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 0, 0, 3, 0, 4, 11, 2, 17, 0, 2, 0, 1, 26, 16, 7},
                  {runtime[22], runtime[31], runtime[51], 0, 3},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies));
}
