/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-18T12:08:12
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("2≡⊑2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡⊑2");
  CompileParams p(
      {0, 2, 0, 1, 16, 0, 0, 0, 2, 17, 7}, {runtime[18], runtime[37], 2},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}, {3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"2≡⊑2"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡⊑⟨2⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡⊑⟨2⟩");
  CompileParams p({0, 2, 11, 1, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], 2}, {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
                   {4, 4, 5, 5, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"2≡⊑⟨2⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"≡⊑⟨\"ab\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ab\"≡⊑⟨\"ab\"⟩");
  CompileParams p({0, 2, 11, 1, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 5, 5, 5, 4, 4, 0, 0, 4, 0},
                   {10, 10, 11, 11, 5, 5, 5, 4, 4, 3, 3, 4, 3}},
                  std::make_shared<Array>(U"\"ab\"≡⊑⟨\"ab\"⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡⊑↕20") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡⊑↕20");
  CompileParams p({0, 4, 0, 1, 16, 0, 2, 16, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 0, 20}, {{0, 1, 0}},
                  {{0, 0}},
                  {{4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
                   {5, 5, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"0≡⊑↕20"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0");
  CompileParams p(
      {0, 10, 0, 1, 0, 9, 17, 0, 2,  0, 4, 0,  1, 27, 0, 5, 17, 0, 1,
       0, 6,  0, 7, 0, 8, 11, 3, 17, 0, 3, 16, 0, 0,  0, 5, 17, 7},
      {runtime[18], runtime[22], runtime[23], runtime[37], runtime[55], 4, 3, 2,
       1, 5, 0},
      {{0, 1, 0}}, {{0, 0}},
      {{15, 15, 14, 14, 13, 13, 14, 12, 12, 11, 11, 10, 10, 11, 9, 9, 10, 8, 8,
        3,  3,  5,  5,  7,  7,  7,  7,  8,  2,  2,  2,  1,  1,  0, 0, 1,  0},
       {15, 15, 14, 14, 13, 13, 14, 12, 12, 11, 11, 10, 10, 11, 9, 9, 12, 8, 8,
        3,  3,  5,  5,  7,  7,  7,  7,  8,  2,  2,  2,  1,  1,  0, 0, 1,  0}},
      std::make_shared<Array>(U"4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡2⊑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'c'≡2⊑\"abcd\"");
  CompileParams p({0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[37], 2,
                   std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{6, 6, 5, 5, 4, 4, 5, 3, 3, 0, 0, 3, 0},
                   {11, 11, 5, 5, 4, 4, 5, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'c\'≡2⊑\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡¯2⊑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'c'≡¯2⊑\"abcd\"");
  CompileParams p({0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[37], -2,
                   std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 4, 4, 6, 3, 3, 0, 0, 3, 0},
                   {12, 12, 6, 6, 5, 5, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'c\'≡¯2⊑\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡7⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7≡7⊑↕10");
  CompileParams p({0, 4, 0, 1, 16, 0, 2, 0, 3, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 7, 10}, {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 2, 2, 3, 1, 1, 0, 0, 1, 0},
                   {6, 6, 4, 4, 4, 3, 3, 2, 2, 3, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"7≡7⊑↕10"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡⟨7⟩⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7≡⟨7⟩⊑↕10");
  CompileParams p({0, 4, 0, 1, 16, 0, 2, 0, 3, 11, 1, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 7, 10}, {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 6, 5, 5, 3, 3, 2, 2, 5, 1, 1, 0, 0, 1, 0},
                   {8, 8, 6, 6, 6, 5, 5, 3, 3, 4, 4, 5, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"7≡⟨7⟩⊑↕10"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¯10⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡¯10⊑↕10");
  CompileParams p({0, 5, 0, 1, 16, 0, 2, 0, 4, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 0, -10, 10},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 6, 5, 5, 2, 2, 5, 1, 1, 0, 0, 1, 0},
                   {8, 8, 6, 6, 6, 5, 5, 4, 4, 5, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"0≡¯10⊑↕10"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("21≡2‿¯3⊑(10×↕3)+⌜↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "21≡2‿¯3⊑(10×↕3)+⌜↕4");
  CompileParams p(
      {0, 11, 0,  3, 16, 0, 5, 0, 0, 26, 0, 10, 0, 3, 16, 0, 1,  0,
       9, 17, 17, 0, 4,  0, 7, 0, 8, 11, 2, 17, 0, 2, 0,  6, 17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[28], runtime[37],
       runtime[48], 21, 2, -3, 10, 3, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{18, 18, 17, 17, 17, 16, 16, 15, 15, 16, 13, 13, 12, 12, 12, 11, 11, 9,
        9,  11, 15, 7,  7,  3,  3,  5,  5,  5,  5,  7,  2,  2,  0,  0,  2,  0},
       {18, 18, 17, 17, 17, 16, 16, 15, 15, 16, 13, 13, 12, 12, 12, 11, 11, 10,
        10, 11, 16, 7,  7,  3,  3,  6,  6,  6,  6,  7,  2,  2,  1,  1,  2,  1}},
      std::make_shared<Array>(U"21≡2‿¯3⊑(10×↕3)+⌜↕4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4");
  CompileParams p(
      {0,  15, 0, 3,  16, 0,  5, 0,  0,  26, 0, 8,  0, 3, 16, 0, 1,  0,  14,
       17, 17, 0, 4,  0,  9,  0, 10, 11, 2,  0, 11, 0, 9, 11, 2, 0,  12, 0,
       13, 11, 2, 11, 3,  17, 0, 2,  0,  6,  0, 7,  0, 8, 11, 3, 17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[28], runtime[37],
       runtime[48], 21, 12, 3, 2, -3, 1, 0, -1, 10, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{35, 35, 34, 34, 34, 33, 33, 32, 32, 33, 30, 30, 29, 29,
        29, 28, 28, 26, 26, 28, 32, 24, 24, 10, 10, 12, 12, 12,
        12, 15, 15, 17, 17, 17, 17, 19, 19, 21, 21, 21, 21, 9,
        9,  24, 8,  8,  0,  0,  3,  3,  6,  6,  6,  6,  8,  6},
       {35, 35, 34, 34, 34, 33, 33, 32, 32, 33, 30, 30, 29, 29,
        29, 28, 28, 27, 27, 28, 33, 24, 24, 10, 10, 13, 13, 13,
        13, 15, 15, 17, 17, 17, 17, 19, 19, 22, 22, 22, 22, 23,
        23, 24, 8,  8,  1,  1,  4,  4,  7,  7,  7,  7,  8,  7}},
      std::make_shared<Array>(U"21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\"");
  CompileParams p(
      {0, 10, 0, 3, 0, 5, 0,  6,  0,  7, 0, 8, 11, 4,  0,
       0, 16, 0, 4, 0, 2, 26, 16, 17, 0, 1, 0, 9,  17, 7},
      {runtime[1], runtime[18], runtime[22], runtime[37], runtime[47], 3, 1, 2,
       5, std::make_shared<Array>(U"dfeb"), std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 21, 21, 12, 12, 14, 14, 16, 16, 18, 18, 11, 11, 10,
        10, 10, 9,  9,  8,  8,  9,  8,  21, 6,  6,  0,  0,  6,  0},
       {29, 29, 21, 21, 12, 12, 14, 14, 16, 16, 18, 18, 19, 19, 10,
        10, 10, 9,  9,  8,  8,  9,  9,  21, 6,  6,  5,  5,  6,  5}},
      std::make_shared<Array>(U"\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡⟨⟩⊑<\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡⟨⟩⊑<\"abc\"");
  CompileParams p(
      {0, 3, 0, 0, 16, 0, 2, 11, 0, 17, 0, 1, 0, 3, 17, 7},
      {runtime[12], runtime[18], runtime[37], std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{10, 10, 9, 9, 9, 8, 8, 6, 6, 8, 5, 5, 0, 0, 5, 0},
       {14, 14, 9, 9, 9, 8, 8, 7, 7, 8, 5, 5, 4, 4, 5, 4}},
      std::make_shared<Array>(U"\"abc\"≡⟨⟩⊑<\"abc\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≡⟨⟩⊑'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'≡⟨⟩⊑'a'");
  CompileParams p({0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 4, 4, 6, 3, 3, 0, 0, 3, 0},
                   {9, 9, 6, 6, 5, 5, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'a\'≡⟨⟩⊑\'a\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7");
  CompileParams p(
      {0, 3,  0, 0, 16, 0, 2, 11, 0, 11, 0,  11, 0, 11, 2,  11, 0,  11,
       3, 17, 0, 1, 0,  3, 0, 3,  0, 3,  11, 2,  0, 3,  11, 3,  17, 7},
      {runtime[12], runtime[18], runtime[37], 7}, {{0, 1, 0}}, {{0, 0}},
      {{27, 27, 26, 26, 26, 25, 25, 11, 11, 15, 15, 18, 18, 14, 14, 22, 22, 10,
        10, 25, 9,  9,  1,  1,  3,  3,  5,  5,  5,  5,  7,  7,  0,  0,  9,  0},
       {27, 27, 26, 26, 26, 25, 25, 12, 12, 16, 16, 19, 19, 20, 20, 23, 23, 24,
        24, 25, 9,  9,  1,  1,  3,  3,  5,  5,  5,  5,  7,  7,  8,  8,  9,  8}},
      std::make_shared<Array>(U"⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7");
  CompileParams p(
      {0, 3, 0, 2, 11, 0, 11, 0, 11, 0, 0,  0,  16, 11, 2, 11, 2, 17,
       0, 1, 0, 3, 0,  3, 0,  3, 0,  0, 16, 11, 2,  11, 2, 17, 7},
      {runtime[12], runtime[18], runtime[37], 7}, {{0, 1, 0}}, {{0, 0}},
      {{25, 25, 24, 24, 12, 12, 16, 16, 20, 20, 19, 19, 19, 15, 15, 11, 11, 24,
        10, 10, 1,  1,  4,  4,  7,  7,  6,  6,  6,  3,  3,  0,  0,  10, 0},
       {25, 25, 24, 24, 13, 13, 17, 17, 21, 21, 19, 19, 19, 22, 22, 23, 23, 24,
        10, 10, 1,  1,  4,  4,  7,  7,  6,  6,  6,  8,  8,  9,  9,  10, 9}},
      std::make_shared<Array>(U"⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\"");
  CompileParams p(
      {0, 8,  0, 1, 0, 6,  0,  6, 11, 2,  17, 0, 3, 0, 4,  0,
       5, 11, 2, 0, 2, 16, 17, 0, 1,  16, 0,  0, 0, 7, 17, 7},
      {runtime[18], runtime[22], runtime[28], runtime[37], 2, 3, 5,
       std::make_shared<Array>(U"abcfab"), std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}}, {{0, 0}},
      {{21, 21, 20, 20, 17, 17, 19, 19, 19, 19, 20, 16, 16, 12, 12, 14,
        14, 14, 14, 11, 11, 11, 16, 9,  9,  9,  8,  8,  0,  0,  8,  0},
       {28, 28, 20, 20, 17, 17, 19, 19, 19, 19, 20, 16, 16, 12, 12, 14,
        14, 14, 14, 11, 11, 11, 16, 9,  9,  9,  8,  8,  7,  7,  8,  7}},
      std::make_shared<Array>(U"\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\"");
  CompileParams p(
      {0, 9, 0, 2,  0, 7, 0,  7,  11, 2, 17, 0, 4, 0, 5, 0,  6, 11,
       2, 0, 3, 16, 0, 0, 16, 17, 0,  2, 16, 0, 1, 0, 8, 17, 7},
      {runtime[1], runtime[18], runtime[22], runtime[28], runtime[37], 2, 3, 5,
       std::make_shared<Array>(U"aedcaf"), std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 21, 21, 18, 18, 20, 20, 20, 20, 21, 17, 17, 13, 13, 15, 15, 15,
        15, 12, 12, 12, 11, 11, 11, 17, 9,  9,  9,  8,  8,  0,  0,  8,  0},
       {29, 29, 21, 21, 18, 18, 20, 20, 20, 20, 21, 17, 17, 13, 13, 15, 15, 15,
        15, 12, 12, 12, 11, 11, 11, 17, 9,  9,  9,  8,  8,  7,  7,  8,  7}},
      std::make_shared<Array>(U"\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5");
  CompileParams p({0,  9, 0, 3, 0, 8, 0, 3,  0,  6,  17, 17, 0, 2,
                   0,  5, 0, 4, 0, 5, 0, 0,  27, 27, 0,  1,  0, 4,
                   21, 0, 7, 0, 3, 0, 6, 17, 0,  0,  16, 17, 7},
                  {runtime[12], runtime[18], runtime[21], runtime[22],
                   runtime[37], runtime[53], 6, 0, 1, 5},
                  {{0, 1, 0}}, {{0, 0}},
                  {{21, 21, 20, 20, 18, 18, 17, 17, 16, 16, 17, 20, 13, 13,
                    12, 12, 11, 11, 10, 10, 9,  9,  10, 12, 8,  8,  7,  7,
                    8,  4,  4,  3,  3,  2,  2,  3,  1,  1,  1,  6,  0},
                   {21, 21, 20, 20, 18, 18, 17, 17, 16, 16, 17, 20, 13, 13,
                    12, 12, 11, 11, 10, 10, 9,  9,  10, 12, 8,  8,  7,  7,
                    8,  4,  4,  3,  3,  2,  2,  3,  1,  1,  1,  14, 5}},
                  std::make_shared<Array>(U"(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6");
  CompileParams p(
      {0, 8,  0, 6, 0, 6, 0, 0, 0,  6, 11, 4,  0, 2, 0, 7, 0,  7, 11,
       2, 17, 0, 3, 0, 5, 0, 6, 11, 2, 27, 16, 0, 1, 0, 4, 17, 7},
      {runtime[1], runtime[18], runtime[22], runtime[59], -6, 1, 0, 2, 6},
      {{0, 1, 0}}, {{0, 0}},
      {{20, 20, 12, 12, 14, 14, 16, 16, 18, 18, 18, 18, 11,
        11, 8,  8,  10, 10, 10, 10, 11, 6,  6,  3,  3,  5,
        5,  5,  5,  6,  5,  2,  2,  0,  0,  2,  0},
       {20, 20, 12, 12, 14, 14, 16, 16, 18, 18, 18, 18, 11,
        11, 8,  8,  10, 10, 10, 10, 11, 6,  6,  3,  3,  5,
        5,  5,  5,  6,  19, 2,  2,  1,  1,  2,  1}},
      std::make_shared<Array>(U"¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3⟩≡⥊3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3⟩≡⥊3");
  CompileParams p({0, 2, 0, 1, 16, 0, 0, 0, 2, 11, 1, 17, 7},
                  {runtime[18], runtime[22], 3}, {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 1, 1, 0, 0, 3, 0},
                   {5, 5, 4, 4, 4, 3, 3, 1, 1, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"⟨3⟩≡⥊3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⥊≡<)3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⟨⟩⊸⥊≡<)3");
  CompileParams p({0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[55], 3},
                  {{0, 1, 0}}, {{0, 0}},
                  {{8, 8, 6, 6, 5, 5, 4, 4, 3, 3, 1, 1, 3, 5, 0, 0},
                   {8, 8, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 3, 5, 7, 7}},
                  std::make_shared<Array>(U"(⟨⟩⊸⥊≡<)3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3,3,3⟩≡3⥊3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3,3,3⟩≡3⥊3");
  CompileParams p({0, 2, 0, 1, 0, 2, 17, 0, 0, 0, 2, 0, 2, 0, 2, 11, 3, 17, 7},
                  {runtime[18], runtime[22], 3}, {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 9, 9, 8, 8, 9, 7, 7, 1, 1, 3, 3, 5, 5, 0, 0, 7, 0},
                   {10, 10, 9, 9, 8, 8, 9, 7, 7, 1, 1, 3, 3, 5, 5, 6, 6, 7, 6}},
                  std::make_shared<Array>(U"⟨3,3,3⟩≡3⥊3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3,3,3⟩≡3<⊸⥊3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3,3,3⟩≡3<⊸⥊3");
  CompileParams p({0, 4, 0, 2, 0, 3, 0, 0, 27, 0, 4,  17,
                   0, 1, 0, 4, 0, 4, 0, 4, 11, 3, 17, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[55], 3},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 11, 11, 10, 10, 9, 9, 10, 8, 8, 9,
                    7,  7,  1,  1,  3,  3,  5, 5, 0,  0, 7, 0},
                   {12, 12, 11, 11, 10, 10, 9, 9, 10, 8, 8, 11,
                    7,  7,  1,  1,  3,  3,  5, 5, 6,  6, 7, 6}},
                  std::make_shared<Array>(U"⟨3,3,3⟩≡3<⊸⥊3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6(⊢⌜≡∾○≢⥊⊢)○↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6(⊢⌜≡∾○≢⥊⊢)○↕3");
  CompileParams p({0,  9,  0, 5, 0, 7, 0, 2, 0,  3,  0,  1, 0, 7,  0, 4,
                   27, 21, 0, 0, 0, 6, 0, 2, 26, 21, 27, 0, 8, 17, 7},
                  {runtime[18], runtime[19], runtime[21], runtime[22],
                   runtime[23], runtime[28], runtime[48], runtime[54], 6, 3},
                  {{0, 1, 0}}, {{0, 0}},
                  {{13, 13, 12, 12, 11, 11, 9, 9, 8, 8, 7,  7, 6, 6, 5, 5,
                    6,  8,  4,  4,  3,  3,  2, 2, 3, 4, 11, 0, 0, 1, 0},
                   {13, 13, 12, 12, 11, 11, 9, 9, 8, 8, 7,  7, 6, 6,  5, 5,
                    6,  8,  4,  4,  3,  3,  2, 2, 3, 4, 11, 0, 0, 12, 0}},
                  std::make_shared<Array>(U"6(⊢⌜≡∾○≢⥊⊢)○↕3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<≡↕)⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<≡↕)⟨⟩");
  CompileParams p(
      {11, 0, 0, 2, 0, 1, 0, 0, 21, 16, 7},
      {runtime[12], runtime[18], runtime[28]}, {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 3, 3, 2, 2, 1, 1, 2, 0, 0}, {6, 6, 3, 3, 2, 2, 1, 1, 2, 4, 4}},
      std::make_shared<Array>(U"(<≡↕)⟨⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕∘⥊≡⥊¨∘↕)9") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕∘⥊≡⥊¨∘↕)9");
  CompileParams p(
      {0, 5, 0, 2, 0, 4, 0, 3, 0,  1,  26, 27,
       0, 0, 0, 1, 0, 4, 0, 2, 27, 21, 16, 7},
      {runtime[18], runtime[22], runtime[28], runtime[47], runtime[53], 9},
      {{0, 1, 0}}, {{0, 0}},
      {{10, 10, 8, 8, 7, 7, 6, 6, 5, 5, 6, 7,
        4,  4,  3, 3, 2, 2, 1, 1, 2, 4, 0, 0},
       {10, 10, 8, 8, 7, 7, 6, 6, 5, 5, 6, 7,
        4,  4,  3, 3, 2, 2, 1, 1, 2, 4, 9, 9}},
      std::make_shared<Array>(U"(↕∘⥊≡⥊¨∘↕)9"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩");
  CompileParams p({0,  8,  0,  8,  0,  3,  16, 0, 9, 0, 8,  11, 2, 0, 3,
                   16, 11, 3,  0,  4,  0,  2,  0, 1, 0, 2,  0,  7, 0, 6,
                   11, 1,  27, 21, 26, 16, 0,  5, 0, 0, 26, 16, 7},
                  {runtime[10], runtime[18], runtime[22], runtime[28],
                   runtime[47], runtime[50], runtime[53], runtime[55], 4, 2},
                  {{0, 1, 0}}, {{0, 0}},
                  {{14, 14, 17, 17, 16, 16, 16, 20, 20, 22, 22, 22, 22, 19, 19,
                    19, 13, 13, 11, 11, 9,  9,  8,  8,  7,  7,  6,  6,  4,  4,
                    3,  3,  6,  8,  11, 2,  1,  1,  0,  0,  1,  0,  0},
                   {14, 14, 17, 17, 16, 16, 16, 20, 20, 22, 22, 22, 22, 19, 19,
                    19, 23, 23, 11, 11, 9,  9,  8,  8,  7,  7,  6,  6,  4,  4,
                    5,  5,  6,  8,  11, 11, 1,  1,  0,  0,  1,  1,  0}},
                  std::make_shared<Array>(U"∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4");
  CompileParams p({0, 12, 0,  5,  16, 0, 0,  0,  7,  17, 0,  3,  0,  9,
                   0, 1,  11, 2,  17, 0, 3,  0,  4,  0,  12, 11, 2,  17,
                   0, 3,  0,  11, 0,  6, 11, 2,  17, 0,  3,  16, 0,  2,
                   0, 7,  0,  8,  0,  9, 0,  10, 0,  7,  11, 5,  17, 7},
                  {runtime[0], runtime[6], runtime[18], runtime[22],
                   runtime[26], runtime[28], runtime[31], 1, 2, 3, 0, 5, 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{26, 26, 25, 25, 25, 24, 24, 23, 23, 24, 22, 22, 19, 19,
                    21, 21, 21, 21, 22, 18, 18, 15, 15, 17, 17, 17, 17, 18,
                    14, 14, 11, 11, 13, 13, 13, 13, 14, 10, 10, 10, 9,  9,
                    0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  9,  8},
                   {26, 26, 25, 25, 25, 24, 24, 23, 23, 24, 22, 22, 19, 19,
                    21, 21, 21, 21, 22, 18, 18, 15, 15, 17, 17, 17, 17, 18,
                    14, 14, 11, 11, 13, 13, 13, 13, 14, 10, 10, 10, 9,  9,
                    0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  9,  8}},
                  std::make_shared<Array>(U"1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19");
  CompileParams p(
      {0, 10, 0, 3, 16, 0, 0, 16, 0, 5,  0, 2,  26, 0, 7, 0, 4,  0,  8, 11,
       3, 0,  7, 0, 9,  0, 8, 11, 3, 11, 2, 17, 0,  6, 0, 1, 26, 16, 7},
      {runtime[12], runtime[18], runtime[22], runtime[28], runtime[31],
       runtime[47], runtime[50], 2, 4, 3, 19},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15, 16, 3, 3, 5, 5, 7, 7, 7,
        7,  9,  9,  11, 11, 13, 13, 13, 13, 2,  2,  15, 1,  1, 0, 0, 1, 0, 0},
       {20, 20, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15, 16, 3, 3, 5, 5, 7, 7, 7,
        7,  9,  9,  11, 11, 13, 13, 13, 13, 14, 14, 16, 1,  1, 0, 0, 1, 1, 0}},
      std::make_shared<Array>(U"≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬'a'≡<'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬'a'≡<'a'");
  CompileParams p(
      {0, 3, 0, 1, 16, 0, 2, 0, 3, 17, 0, 0, 16, 7},
      {runtime[9], runtime[12], runtime[18], std::make_shared<Character>(U'a')},
      {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 5, 5, 5, 4, 4, 1, 1, 4, 0, 0, 0, 0},
       {8, 8, 5, 5, 5, 4, 4, 3, 3, 4, 0, 0, 0, 0}},
      std::make_shared<Array>(U"¬\'a\'≡<\'a\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬\"a\"≡≍\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬\"a\"≡≍\"a\"");
  CompileParams p(
      {0, 3, 0, 2, 16, 0, 1, 0, 3, 17, 0, 0, 16, 7},
      {runtime[9], runtime[18], runtime[24], std::make_shared<Array>(U"a")},
      {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 5, 5, 5, 4, 4, 1, 1, 4, 0, 0, 0, 0},
       {8, 8, 5, 5, 5, 4, 4, 3, 3, 4, 0, 0, 0, 0}},
      std::make_shared<Array>(U"¬\"a\"≡≍\"a\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩");
  CompileParams p(
      {0, 5, 0, 6, 0,  9,  0, 7,  11, 2, 0,  8, 11, 4,  0, 2, 0,
       4, 0, 6, 0, 6,  11, 2, 27, 0,  3, 0,  1, 27, 0,  5, 0, 6,
       0, 7, 0, 7, 11, 2,  0, 8,  11, 4, 17, 0, 0,  16, 7},
      {runtime[9], runtime[18], runtime[22], runtime[54], runtime[55], 1, 2, 4,
       5, 3},
      {{0, 1, 0}}, {{0, 0}},
      {{24, 24, 26, 26, 29, 29, 31, 31, 28, 28, 34, 34, 23, 23, 21, 21, 20,
        20, 17, 17, 19, 19, 19, 19, 20, 15, 15, 14, 14, 15, 2,  2,  4,  4,
        7,  7,  9,  9,  6,  6,  12, 12, 1,  1,  14, 0,  0,  0,  0},
       {24, 24, 26, 26, 29, 29, 31, 31, 32, 32, 34, 34, 35, 35, 21, 21, 20,
        20, 17, 17, 19, 19, 19, 19, 20, 15, 15, 14, 14, 15, 2,  2,  4,  4,
        7,  7,  9,  9,  10, 10, 12, 12, 13, 13, 22, 0,  0,  0,  0}},
      std::make_shared<Array>(U"¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬2‿3‿4≡2‿3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬2‿3‿4≡2‿3");
  CompileParams p(
      {0, 2, 0, 3, 11, 2, 0, 1, 0, 2, 0, 3, 0, 4, 11, 3, 17, 0, 0, 16, 7},
      {runtime[9], runtime[18], 2, 3, 4}, {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 9, 9, 9, 9, 6, 6, 1, 1, 3, 3, 5, 5, 5, 5, 6, 0, 0, 0, 0},
       {7, 7, 9, 9, 9, 9, 6, 6, 1, 1, 3, 3, 5, 5, 5, 5, 6, 0, 0, 0, 0}},
      std::make_shared<Array>(U"¬2‿3‿4≡2‿3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬1.001≡1.002") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬1.001≡1.002");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 17, 0, 0, 16, 7},
      {runtime[9], runtime[18], 1.001, 1.002}, {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 6, 6, 1, 1, 6, 0, 0, 0, 0}, {11, 11, 6, 6, 5, 5, 6, 0, 0, 0, 0}},
      std::make_shared<Array>(U"¬1.001≡1.002"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≢2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'≢2");
  CompileParams p({0, 1, 0, 0, 0, 2, 17, 7},
                  {runtime[19], 2, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {4, 4, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'a\'≢2"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≢<2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≢<2");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7}, {runtime[12], runtime[19], 2},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}, {3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"2≢<2"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿3≢2‿4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿3≢2‿4");
  CompileParams p({0, 1, 0, 3, 11, 2, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[19], 2, 3, 4}, {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 6, 6, 6, 6, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {4, 4, 6, 6, 6, 6, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"2‿3≢2‿4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿3≢≍2‿3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿3≢≍2‿3");
  CompileParams p({0, 2, 0, 3, 11, 2, 0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
                  {runtime[19], runtime[24], 2, 3}, {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 7, 7, 7, 7, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {5, 5, 7, 7, 7, 7, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"2‿3≢≍2‿3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≡'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡≡'a'");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7},
      {runtime[18], 0, std::make_shared<Character>(U'a')}, {{0, 1, 0}},
      {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}, {5, 5, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"0≡≡\'a\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≡↕6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡≡↕6");
  CompileParams p({0, 3, 0, 1, 16, 0, 0, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[28], 1, 6}, {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
                   {4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"1≡≡↕6"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≡↕2‿4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡≡↕2‿4");
  CompileParams p({0, 2, 0, 3, 11, 2, 0, 1, 16, 0, 0, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[28], 2, 4}, {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 6, 6, 6, 6, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
                   {4, 4, 6, 6, 6, 6, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"2≡≡↕2‿4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡≡<<<4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡≡<<<4");
  CompileParams p(
      {0, 3, 0, 0, 16, 0, 0, 16, 0, 0, 16, 0, 1, 16, 0, 1, 0, 2, 17, 7},
      {runtime[12], runtime[18], 3, 4}, {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
       {6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"3≡≡<<<4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩");
  CompileParams p(
      {0,  8,  11, 0,  0, 7, 11, 1, 0, 9, 0,  10, 0,  11, 11, 2,
       11, 5,  0,  4,  0, 2, 0,  6, 0, 3, 0,  1,  0,  5,  0,  0,
       27, 26, 27, 26, 0, 1, 0,  4, 0, 7, 26, 21, 16, 7},
      {runtime[1], runtime[18], runtime[28], runtime[45], runtime[47],
       runtime[54], runtime[56], 1, 0, 2, 3, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{13, 13, 15, 15, 19, 19, 18, 18, 22, 22, 25, 25, 27, 27, 24, 24,
        12, 12, 10, 10, 9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4,
        5,  7,  8,  10, 3,  3,  2,  2,  1,  1,  2,  3,  0,  0},
       {13, 13, 16, 16, 19, 19, 20, 20, 22, 22, 25, 25, 27, 27, 28, 28,
        29, 29, 10, 10, 9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4,
        5,  7,  8,  10, 3,  3,  2,  2,  1,  1,  2,  3,  11, 11}},
      std::make_shared<Array>(U"(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≡⟨5,⟨'c',+,2⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡≡⟨5,⟨'c',+,2⟩⟩");
  CompileParams p(
      {0, 3, 0, 4, 0, 0, 0, 2, 11, 3, 11, 2, 0, 1, 16, 0, 1, 0, 2, 17, 7},
      {runtime[0], runtime[18], 2, 5, std::make_shared<Character>(U'c')},
      {{0, 1, 0}}, {{0, 0}},
      {{4, 4, 7, 7, 11, 11, 13, 13, 6, 6, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
       {4, 4, 9, 9, 11, 11, 13, 13, 14, 14, 15, 15, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"2≡≡⟨5,⟨\'c\',+,2⟩⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≡⊑⟨-⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡≡⊑⟨-⟩");
  CompileParams p({0, 0, 11, 1, 0, 2, 16, 0, 1, 16, 0, 1, 0, 3, 17, 7},
                  {runtime[1], runtime[18], runtime[37], 0}, {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
                   {5, 5, 6, 6, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"0≡≡⊑⟨-⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
