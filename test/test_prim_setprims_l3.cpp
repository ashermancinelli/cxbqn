/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-14T17:27:33
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("2≡⊑2") {
  spdlog::critical("test='{}'", "2≡⊑2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡⊑⟨2⟩") {
  spdlog::critical("test='{}'", "2≡⊑⟨2⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 11, 1, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"≡⊑⟨\"ab\"⟩") {
  spdlog::critical("test='{}'", "\"ab\"≡⊑⟨\"ab\"⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 11, 1, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡⊑↕20") {
  spdlog::critical("test='{}'", "0≡⊑↕20");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 16, 0, 2, 16, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 0, 20},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0") {
  spdlog::critical("test='{}'", "4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  10, 0, 1,  0,  9, 17, 0, 2, 0,  4, 0, 1,
                   27, 0,  5, 17, 0,  1, 0,  6, 0, 7,  0, 8, 11,
                   3,  17, 0, 3,  16, 0, 0,  0, 5, 17, 7},
                  {runtime[18], runtime[22], runtime[23], runtime[37],
                   runtime[55], 4, 3, 2, 1, 5, 0},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡2⊑\"abcd\"") {
  spdlog::critical("test='{}'", "'c'≡2⊑\"abcd\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[37], 2,
                   std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡¯2⊑\"abcd\"") {
  spdlog::critical("test='{}'", "'c'≡¯2⊑\"abcd\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[37], -2,
                   std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡7⊑↕10") {
  spdlog::critical("test='{}'", "7≡7⊑↕10");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 16, 0, 2, 0, 3, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 7, 10},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡⟨7⟩⊑↕10") {
  spdlog::critical("test='{}'", "7≡⟨7⟩⊑↕10");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 16, 0, 2, 0, 3, 11, 1, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 7, 10},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¯10⊑↕10") {
  spdlog::critical("test='{}'", "0≡¯10⊑↕10");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 1, 16, 0, 2, 0, 4, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[28], runtime[37], 0, -10, 10},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("21≡2‿¯3⊑(10×↕3)+⌜↕4") {
  spdlog::critical("test='{}'", "21≡2‿¯3⊑(10×↕3)+⌜↕4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 11, 0,  3, 16, 0, 5, 0, 0, 26, 0, 10, 0, 3, 16, 0, 1,  0,
                   9, 17, 17, 0, 4,  0, 7, 0, 8, 11, 2, 17, 0, 2, 0,  6, 17, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[28],
                   runtime[37], runtime[48], 21, 2, -3, 10, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4") {
  spdlog::critical("test='{}'", "21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  15, 0,  3, 16, 0,  5,  0, 0,  26, 0,  8,  0,  3,
                   16, 0,  1,  0, 14, 17, 17, 0, 4,  0,  9,  0,  10, 11,
                   2,  0,  11, 0, 9,  11, 2,  0, 12, 0,  13, 11, 2,  11,
                   3,  17, 0,  2, 0,  6,  0,  7, 0,  8,  11, 3,  17, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[28],
                   runtime[37], runtime[48], 21, 12, 3, 2, -3, 1, 0, -1, 10, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\"") {
  spdlog::critical("test='{}'", "\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 10, 0, 3, 0, 5, 0,  6,  0,  7, 0, 8, 11, 4,  0,
                   0, 16, 0, 4, 0, 2, 26, 16, 17, 0, 1, 0, 9,  17, 7},
                  {runtime[1], runtime[18], runtime[22], runtime[37],
                   runtime[47], 3, 1, 2, 5, std::make_shared<Array>(U"dfeb"),
                   std::make_shared<Array>(U"abcdef")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡⟨⟩⊑<\"abc\"") {
  spdlog::critical("test='{}'", "\"abc\"≡⟨⟩⊑<\"abc\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 2, 11, 0, 17, 0, 1, 0, 3, 17, 7},
      {runtime[12], runtime[18], runtime[37], std::make_shared<Array>(U"abc")},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≡⟨⟩⊑'a'") {
  spdlog::critical("test='{}'", "'a'≡⟨⟩⊑'a'");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[37], std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7") {
  spdlog::critical("test='{}'", "⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3,  0, 0,  16, 0,  2, 11, 0,  11, 0,  11,
                   0, 11, 2, 11, 0,  11, 3, 17, 0,  1,  0,  3,
                   0, 3,  0, 3,  11, 2,  0, 3,  11, 3,  17, 7},
                  {runtime[12], runtime[18], runtime[37], 7},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7") {
  spdlog::critical("test='{}'", "⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  3,  0, 2,  11, 0,  11, 0,  11, 0,  0, 0,
                   16, 11, 2, 11, 2,  17, 0,  1,  0,  3,  0, 3,
                   0,  3,  0, 0,  16, 11, 2,  11, 2,  17, 7},
                  {runtime[12], runtime[18], runtime[37], 7},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\"") {
  spdlog::critical("test='{}'", "\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8,  0, 1, 0, 6,  0,  6, 11, 2,  17, 0, 3, 0, 4,  0,
                   5, 11, 2, 0, 2, 16, 17, 0, 1,  16, 0,  0, 0, 7, 17, 7},
                  {runtime[18], runtime[22], runtime[28], runtime[37], 2, 3, 5,
                   std::make_shared<Array>(U"abcfab"),
                   std::make_shared<Array>(U"abcdef")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\"") {
  spdlog::critical("test='{}'", "\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 2,  0, 7, 0,  7,  11, 2, 17, 0, 4, 0, 5, 0,  6, 11,
                   2, 0, 3, 16, 0, 0, 16, 17, 0,  2, 16, 0, 1, 0, 8, 17, 7},
                  {runtime[1], runtime[18], runtime[22], runtime[28],
                   runtime[37], 2, 3, 5, std::make_shared<Array>(U"aedcaf"),
                   std::make_shared<Array>(U"abcdef")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5") {
  spdlog::critical("test='{}'", "(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  9, 0, 3, 0, 8, 0, 3,  0,  6,  17, 17, 0, 2,
                   0,  5, 0, 4, 0, 5, 0, 0,  27, 27, 0,  1,  0, 4,
                   21, 0, 7, 0, 3, 0, 6, 17, 0,  0,  16, 17, 7},
                  {runtime[12], runtime[18], runtime[21], runtime[22],
                   runtime[37], runtime[53], 6, 0, 1, 5},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6") {
  spdlog::critical("test='{}'", "¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 8,  0, 6, 0, 6, 0, 0, 0,  6, 11, 4,  0, 2, 0, 7, 0,  7, 11,
       2, 17, 0, 3, 0, 5, 0, 6, 11, 2, 27, 16, 0, 1, 0, 4, 17, 7},
      {runtime[1], runtime[18], runtime[22], runtime[59], -6, 1, 0, 2, 6},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3⟩≡⥊3") {
  spdlog::critical("test='{}'", "⟨3⟩≡⥊3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 0, 2, 11, 1, 17, 7},
                  {runtime[18], runtime[22], 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⥊≡<)3") {
  spdlog::critical("test='{}'", "(⟨⟩⊸⥊≡<)3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[55], 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3,3,3⟩≡3⥊3") {
  spdlog::critical("test='{}'", "⟨3,3,3⟩≡3⥊3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 2, 17, 0, 0, 0, 2, 0, 2, 0, 2, 11, 3, 17, 7},
                  {runtime[18], runtime[22], 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3,3,3⟩≡3<⊸⥊3") {
  spdlog::critical("test='{}'", "⟨3,3,3⟩≡3<⊸⥊3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 2, 0, 3, 0, 0, 27, 0, 4,  17,
                   0, 1, 0, 4, 0, 4, 0, 4, 11, 3, 17, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[55], 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6(⊢⌜≡∾○≢⥊⊢)○↕3") {
  spdlog::critical("test='{}'", "6(⊢⌜≡∾○≢⥊⊢)○↕3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  9,  0, 5, 0, 7, 0, 2, 0,  3,  0,  1, 0, 7,  0, 4,
                   27, 21, 0, 0, 0, 6, 0, 2, 26, 21, 27, 0, 8, 17, 7},
                  {runtime[18], runtime[19], runtime[21], runtime[22],
                   runtime[23], runtime[28], runtime[48], runtime[54], 6, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<≡↕)⟨⟩") {
  spdlog::critical("test='{}'", "(<≡↕)⟨⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 2, 0, 1, 0, 0, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[28]},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕∘⥊≡⥊¨∘↕)9") {
  spdlog::critical("test='{}'", "(↕∘⥊≡⥊¨∘↕)9");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 2, 0, 4, 0, 3, 0,  1,  26, 27,
       0, 0, 0, 1, 0, 4, 0, 2, 27, 21, 16, 7},
      {runtime[18], runtime[22], runtime[28], runtime[47], runtime[53], 9},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩") {
  spdlog::critical("test='{}'", "∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  8,  0,  8,  0,  3,  16, 0, 9, 0, 8,  11, 2, 0, 3,
                   16, 11, 3,  0,  4,  0,  2,  0, 1, 0, 2,  0,  7, 0, 6,
                   11, 1,  27, 21, 26, 16, 0,  5, 0, 0, 26, 16, 7},
                  {runtime[10], runtime[18], runtime[22], runtime[28],
                   runtime[47], runtime[50], runtime[53], runtime[55], 4, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4") {
  spdlog::critical("test='{}'", "1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 12, 0,  5,  16, 0, 0,  0,  7,  17, 0,  3,  0,  9,
                   0, 1,  11, 2,  17, 0, 3,  0,  4,  0,  12, 11, 2,  17,
                   0, 3,  0,  11, 0,  6, 11, 2,  17, 0,  3,  16, 0,  2,
                   0, 7,  0,  8,  0,  9, 0,  10, 0,  7,  11, 5,  17, 7},
                  {runtime[0], runtime[6], runtime[18], runtime[22],
                   runtime[26], runtime[28], runtime[31], 1, 2, 3, 0, 5, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19") {
  spdlog::critical("test='{}'", "≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 10, 0, 3,  16, 0,  0,  16, 0, 5, 0,  2,  26,
                   0, 7,  0, 4,  0,  8,  11, 3,  0, 7, 0,  9,  0,
                   8, 11, 3, 11, 2,  17, 0,  6,  0, 1, 26, 16, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[28],
                   runtime[31], runtime[47], runtime[50], 2, 4, 3, 19},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬'a'≡<'a'") {
  spdlog::critical("test='{}'", "¬'a'≡<'a'");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 1, 16, 0, 2, 0, 3, 17, 0, 0, 16, 7},
      {runtime[9], runtime[12], runtime[18], std::make_shared<Character>(U'a')},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬\"a\"≡≍\"a\"") {
  spdlog::critical("test='{}'", "¬\"a\"≡≍\"a\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 2, 16, 0, 1, 0, 3, 17, 0, 0, 16, 7},
      {runtime[9], runtime[18], runtime[24], std::make_shared<Array>(U"a")},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩") {
  spdlog::critical("test='{}'", "¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 6, 0,  9,  0, 7,  11, 2, 0,  8, 11, 4,  0, 2, 0,
                   4, 0, 6, 0, 6,  11, 2, 27, 0,  3, 0,  1, 27, 0,  5, 0, 6,
                   0, 7, 0, 7, 11, 2,  0, 8,  11, 4, 17, 0, 0,  16, 7},
                  {runtime[9], runtime[18], runtime[22], runtime[54],
                   runtime[55], 1, 2, 4, 5, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬2‿3‿4≡2‿3") {
  spdlog::critical("test='{}'", "¬2‿3‿4≡2‿3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 2, 0, 3, 11, 2, 0, 1, 0, 2, 0, 3, 0, 4, 11, 3, 17, 0, 0, 16, 7},
      {runtime[9], runtime[18], 2, 3, 4},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬1.001≡1.002") {
  spdlog::critical("test='{}'", "¬1.001≡1.002");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 0, 2, 17, 0, 0, 16, 7},
                  {runtime[9], runtime[18], 1.001, 1.002},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≢2") {
  spdlog::critical("test='{}'", "'a'≢2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 1, 0, 0, 0, 2, 17, 7},
                  {runtime[19], 2, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≢<2") {
  spdlog::critical("test='{}'", "2≢<2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[12], runtime[19], 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿3≢2‿4") {
  spdlog::critical("test='{}'", "2‿3≢2‿4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 1, 0, 3, 11, 2, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[19], 2, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿3≢≍2‿3") {
  spdlog::critical("test='{}'", "2‿3≢≍2‿3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 3, 11, 2, 0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
                  {runtime[19], runtime[24], 2, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≡'a'") {
  spdlog::critical("test='{}'", "0≡≡'a'");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7},
                  {runtime[18], 0, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≡↕6") {
  spdlog::critical("test='{}'", "1≡≡↕6");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 16, 0, 0, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[28], 1, 6},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≡↕2‿4") {
  spdlog::critical("test='{}'", "2≡≡↕2‿4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 3, 11, 2, 0, 1, 16, 0, 0, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[28], 2, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡≡<<<4") {
  spdlog::critical("test='{}'", "3≡≡<<<4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 0, 16, 0, 0, 16, 0, 1, 16, 0, 1, 0, 2, 17, 7},
      {runtime[12], runtime[18], 3, 4},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩") {
  spdlog::critical("test='{}'", "(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  8,  11, 0,  0, 7, 11, 1, 0, 9, 0,  10, 0,  11, 11, 2,
                   11, 5,  0,  4,  0, 2, 0,  6, 0, 3, 0,  1,  0,  5,  0,  0,
                   27, 26, 27, 26, 0, 1, 0,  4, 0, 7, 26, 21, 16, 7},
                  {runtime[1], runtime[18], runtime[28], runtime[45],
                   runtime[47], runtime[54], runtime[56], 1, 0, 2, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≡⟨5,⟨'c',+,2⟩⟩") {
  spdlog::critical("test='{}'", "2≡≡⟨5,⟨'c',+,2⟩⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 4, 0, 0, 0, 2, 11, 3, 11, 2, 0, 1, 16, 0, 1, 0, 2, 17, 7},
      {runtime[0], runtime[18], 2, 5, std::make_shared<Character>(U'c')},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≡⊑⟨-⟩") {
  spdlog::critical("test='{}'", "0≡≡⊑⟨-⟩");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 0, 11, 1, 0, 2, 16, 0, 1, 16, 0, 1, 0, 3, 17, 7},
                  {runtime[1], runtime[18], runtime[37], 0},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
