/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:50
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("2≡⊑2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡⊑2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[37], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡⊑⟨2⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡⊑⟨2⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[37], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 11, 1, 0, 1, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"≡⊑⟨\"ab\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ab\"≡⊑⟨\"ab\"⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[37], CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 11, 1, 0, 1, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡⊑↕20") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡⊑↕20");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], runtime[37],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 20)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 2, 16, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡⊑3‿2‿1⥊4⥊⊸∾5⥊0");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[23],
        runtime[37],          runtime[55],          CXBQN_NEW(Number, 4),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 1, 0, 9, 17, 0, 2,  0, 4, 0,  1, 27, 0, 5, 17, 0, 1,
             0, 6,  0, 7, 0, 8, 11, 3, 17, 0, 3, 16, 0, 0,  0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡2⊑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'c'≡2⊑\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[37], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'c'),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'c'≡¯2⊑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'c'≡¯2⊑\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[37], CXBQN_NEW(Number, -2),
                            CXBQN_NEW(Character, U'c'),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡7⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7≡7⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], runtime[37],
                            CXBQN_NEW(Number, 7), CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 2, 0, 3, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡⟨7⟩⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7≡⟨7⟩⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], runtime[37],
                            CXBQN_NEW(Number, 7), CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 2, 0, 3, 11, 1, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¯10⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡¯10⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[28],
                            runtime[37],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -10),
                            CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 2, 0, 4, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("21≡2‿¯3⊑(10×↕3)+⌜↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "21≡2‿¯3⊑(10×↕3)+⌜↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[2],
                            runtime[18],
                            runtime[28],
                            runtime[37],
                            runtime[48],
                            CXBQN_NEW(Number, 21),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -3),
                            CXBQN_NEW(Number, 10),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0,  3, 16, 0, 5, 0, 0, 26, 0, 10, 0, 3, 16, 0, 1,  0,
             9, 17, 17, 0, 4,  0, 7, 0, 8, 11, 2, 17, 0, 2, 0,  6, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "21‿12‿03≡⟨2‿¯3,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[2],
                            runtime[18],
                            runtime[28],
                            runtime[37],
                            runtime[48],
                            CXBQN_NEW(Number, 21),
                            CXBQN_NEW(Number, 12),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -3),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 10),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  15, 0,  3, 16, 0,  5,  0, 0,  26, 0,  8,  0,  3,
             16, 0,  1,  0, 14, 17, 17, 0, 4,  0,  9,  0,  10, 11,
             2,  0,  11, 0, 9,  11, 2,  0, 12, 0,  13, 11, 2,  11,
             3,  17, 0,  2, 0,  6,  0,  7, 0,  8,  11, 3,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"dfeb\"≡(⥊¨-⟨3,1,2,5⟩)⊑\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],
                            runtime[18],
                            runtime[22],
                            runtime[37],
                            runtime[47],
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Array, U"dfeb"),
                            CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 3, 0, 5, 0,  6,  0,  7, 0, 8, 11, 4,  0,
             0, 16, 0, 4, 0, 2, 26, 16, 17, 0, 1, 0, 9,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡⟨⟩⊑<\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡⟨⟩⊑<\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[37],
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 2, 11, 0, 17, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≡⟨⟩⊑'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'≡⟨⟩⊑'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[37],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨7,7‿7,7⟩≡⟨⟨⟩,⟨⟨⟩,⟨⟩⟩,⟨⟩⟩⊑<7");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[37],
                            CXBQN_NEW(Number, 7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3,  0, 0, 16, 0, 2, 11, 0, 11, 0,  11, 0, 11, 2,  11, 0,  11,
             3, 17, 0, 1, 0,  3, 0, 3,  0, 3,  11, 2,  0, 3,  11, 3,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨7,⟨7,<7⟩⟩≡⟨⟨⟩,⟨⟨⟩,<⟨⟩⟩⟩⊑7");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[37],
                            CXBQN_NEW(Number, 7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 11, 0, 11, 0, 11, 0, 0,  0,  16, 11, 2, 11, 2, 17,
             0, 1, 0, 3, 0,  3, 0,  3, 0,  0, 16, 11, 2,  11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcfab\"≡⥊(↕2‿3)⊑5‿5⥊\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[37],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Array, U"abcfab"),
                            CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8,  0, 1, 0, 6,  0,  6, 11, 2,  17, 0, 3, 0, 4,  0,
             5, 11, 2, 0, 2, 16, 17, 0, 1,  16, 0,  0, 0, 7, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"aedcaf\"≡⥊(-↕2‿3)⊑5‿5⥊\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],
                            runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[37],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Array, U"aedcaf"),
                            CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 2,  0, 7, 0,  7,  11, 2, 17, 0, 4, 0, 5, 0,  6, 11,
             2, 0, 3, 16, 0, 0, 16, 17, 0,  2, 16, 0, 1, 0, 8, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<6⥊0)(⊑≡<∘⊑∘⊢)(6⥊1)⥊5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[21],          runtime[22],
                            runtime[37],          runtime[53],
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9, 0, 3, 0, 8, 0, 3,  0,  6,  17, 17, 0, 2,
             0,  5, 0, 4, 0, 5, 0, 0,  27, 27, 0,  1,  0, 4,
             21, 0, 7, 0, 3, 0, 6, 17, 0,  0,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯6≡1‿0◶(2‿2⥊0‿0‿-‿0)6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[18],           runtime[22],
        runtime[59],          CXBQN_NEW(Number, -6), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2),  CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8,  0, 6, 0, 6, 0, 0, 0,  6, 11, 4,  0, 2, 0, 7, 0,  7, 11,
             2, 17, 0, 3, 0, 5, 0, 6, 11, 2, 27, 16, 0, 1, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3⟩≡⥊3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3⟩≡⥊3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 0, 0, 2, 11, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⥊≡<)3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⟨⟩⊸⥊≡<)3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[22], runtime[55],
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3,3,3⟩≡3⥊3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3,3,3⟩≡3⥊3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 2, 17, 0, 0, 0, 2, 0, 2, 0, 2, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3,3,3⟩≡3<⊸⥊3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3,3,3⟩≡3<⊸⥊3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[22], runtime[55],
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 3, 0, 0, 27, 0, 4,  17,
             0, 1, 0, 4, 0, 4, 0, 4, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6(⊢⌜≡∾○≢⥊⊢)○↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6(⊢⌜≡∾○≢⥊⊢)○↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[19],         runtime[21], runtime[22],
        runtime[23],          runtime[28],         runtime[48], runtime[54],
        CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9,  0, 5, 0, 7, 0, 2, 0,  3,  0,  1, 0, 7,  0, 4,
             27, 21, 0, 0, 0, 6, 0, 2, 26, 21, 27, 0, 8, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<≡↕)⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<≡↕)⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[28]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 2, 0, 1, 0, 0, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕∘⥊≡⥊¨∘↕)9") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕∘⥊≡⥊¨∘↕)9");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], runtime[28],
                            runtime[47], runtime[53], CXBQN_NEW(Number, 9)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 4, 0, 3, 0,  1,  26, 27,
             0, 0, 0, 1, 0, 4, 0, 2, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧´(⟨∘⟩⊸⥊≡⥊)¨ ⟨4,↕4,↕2‿4⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[10],          runtime[18],         runtime[22], runtime[28],
        runtime[47],          runtime[50],         runtime[53], runtime[55],
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8,  0,  8,  0,  3,  16, 0, 9, 0, 8,  11, 2, 0, 3,
             16, 11, 3,  0,  4,  0,  2,  0, 1, 0, 2,  0,  7, 0, 6,
             11, 1,  27, 21, 26, 16, 0,  5, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2‿3‿0‿1≡⥊5‿⌽⥊↑‿4⥊3‿⌊⥊1+↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[6],           runtime[18],
        runtime[22],          runtime[26],          runtime[28],
        runtime[31],          CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 12, 0,  5,  16, 0, 0,  0,  7,  17, 0,  3,  0,  9,
             0, 1,  11, 2,  17, 0, 3,  0,  4,  0,  12, 11, 2,  17,
             0, 3,  0,  11, 0,  6, 11, 2,  17, 0,  3,  16, 0,  2,
             0, 7,  0,  8,  0,  9, 0,  10, 0,  7,  11, 5,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡´⟨2‿⌽‿4,2‿3‿4⟩⥊¨<↕19");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[22],
        runtime[28],          runtime[31],          runtime[47],
        runtime[50],          CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 19)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 3,  16, 0,  0,  16, 0, 5, 0,  2,  26,
             0, 7,  0, 4,  0,  8,  11, 3,  0, 7, 0,  9,  0,
             8, 11, 3, 11, 2,  17, 0,  6,  0, 1, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬'a'≡<'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬'a'≡<'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[12], runtime[18],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 2, 0, 3, 17, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬\"a\"≡≍\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬\"a\"≡≍\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], runtime[24],
                            CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 16, 0, 1, 0, 3, 17, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬⟨1,2,⟨4,4⟩,5⟩≡○(2‿2⊸⥊)⟨1,2,⟨3,4⟩,5⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9],           runtime[18],
                            runtime[22],          runtime[54],
                            runtime[55],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 6, 0,  9,  0, 7,  11, 2, 0,  8, 11, 4,  0, 2, 0,
             4, 0, 6, 0, 6,  11, 2, 27, 0,  3, 0,  1, 27, 0,  5, 0, 6,
             0, 7, 0, 7, 11, 2,  0, 8,  11, 4, 17, 0, 0,  16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬2‿3‿4≡2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬2‿3‿4≡2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 3, 11, 2, 0, 1, 0, 2, 0, 3, 0, 4, 11, 3, 17, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬1.001≡1.002") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬1.001≡1.002");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], runtime[18], CXBQN_NEW(Number, 1.001),
                            CXBQN_NEW(Number, 1.002)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 17, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'≢2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'≢2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[19], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≢<2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≢<2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[19], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿3≢2‿4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿3≢2‿4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[19], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 3, 11, 2, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿3≢≍2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿3≢≍2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[19], runtime[24], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 3, 11, 2, 0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≡'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡≡'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≡↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡≡↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 0, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≡↕2‿4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡≡↕2‿4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 3, 11, 2, 0, 1, 16, 0, 0, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡≡<<<4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡≡<<<4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 0, 16, 0, 0, 16, 0, 1, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1¨≡-○≡˜⟜↕¨)⟨0,⟨⟩,⟨1⟩,2,⟨3,4⟩⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[18],          runtime[28],
        runtime[45],          runtime[47],          runtime[54],
        runtime[56],          CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8,  11, 0,  0, 7, 11, 1, 0, 9, 0,  10, 0,  11, 11, 2,
             11, 5,  0,  4,  0, 2, 0,  6, 0, 3, 0,  1,  0,  5,  0,  0,
             27, 26, 27, 26, 0, 1, 0,  4, 0, 7, 26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≡⟨5,⟨'c',+,2⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡≡⟨5,⟨'c',+,2⟩⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[18], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 4, 0, 0, 0, 2, 11, 3, 11, 2, 0, 1, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≡⊑⟨-⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡≡⊑⟨-⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[18], runtime[37],
                            CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 0, 11, 1, 0, 2, 16, 0, 1, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
