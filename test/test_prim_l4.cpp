/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-17T16:26:05
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("\"a\"‚â°‚ãà'a'") {
  spdlog::critical("test='{}'", "\"a\"‚â°‚ãà'a'");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 2, 0, 1, 16, 0, 0, 0, 3, 17, 7},
      {runtime[18], runtime[25], std::make_shared<Character>(U'a'),
       std::make_shared<Array>(U"a")},
      {{0, 1, 0}},
      {{0, 0}},
      {{5, 5, 4, 4, 4, 3, 3, 0, 0, 3, 0}, {7, 7, 4, 4, 4, 3, 3, 2, 2, 3, 2}},
      std::make_shared<Array>(U"\"a\"‚â°‚ãà\'a\'")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("({‚ü®ùï©‚ü©}‚â°‚ãà)'a'‚Äø2") {
  spdlog::critical("test='{}'", "({‚ü®ùï©‚ü©}‚â°‚ãà)'a'‚Äø2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 2, 11, 2, 0, 1, 0, 0, 1, 1, 21, 16, 7, 34, 0, 1, 11, 1, 7},
      {runtime[18], runtime[25], 2, std::make_shared<Character>(U'a')},
      {{0, 1, 0}, {0, 0, 1}},
      {{0, 0}, {15, 3}},
      {{9, 9, 13, 13, 13, 13, 7, 7, 6, 6, 1, 1, 6, 0, 1, 3, 3, 3, 2, 2, 2},
       {11, 11, 13, 13, 13, 13, 7, 7, 6, 6, 5, 5, 6, 8, 5, 3, 3, 3, 4, 4, 4}},
      std::make_shared<Array>(U"({‚ü®ùï©‚ü©}‚â°‚ãà)\'a\'‚Äø2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"‚Äø1‚â°\"abc\"‚ãà1") {
  spdlog::critical("test='{}'", "\"abc\"‚Äø1‚â°\"abc\"‚ãà1");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 2, 0, 1, 0, 3, 17, 0, 0, 0, 3, 0, 2, 11, 2, 17, 7},
      {runtime[18], runtime[25], 1, std::make_shared<Array>(U"abc")},
      {{0, 1, 0}},
      {{0, 0}},
      {{14, 14, 13, 13, 8, 8, 13, 7, 7, 0, 0, 6, 6, 6, 6, 7, 6},
       {14, 14, 13, 13, 12, 12, 13, 7, 7, 4, 4, 6, 6, 6, 6, 7, 6}},
      std::make_shared<Array>(U"\"abc\"‚Äø1‚â°\"abc\"‚ãà1")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ãà¬¥‚ä∏‚â°\"ab\"") {
  spdlog::critical("test='{}'", "‚ãà¬¥‚ä∏‚â°\"ab\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 0, 3, 0, 2, 0, 1, 26, 27, 16, 7},
                  {runtime[18], runtime[25], runtime[50], runtime[55],
                   std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 0, 0},
                   {7, 7, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 3, 0}},
                  std::make_shared<Array>(U"‚ãà¬¥‚ä∏‚â°\"ab\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚àß¬¥‚â°‚üú>¬®‚ü®1,<'a',<‚àû,‚Üï5,5‚Äø3‚•ä2‚ü©") {
  spdlog::critical("test='{}'", "‚àß¬¥‚â°‚üú>¬®‚ü®1,<'a',<‚àû,‚Üï5,5‚Äø3‚•ä2‚ü©");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  9, 0,  14, 0, 1, 16, 0,  10, 0,  1, 16, 0,  11, 0,  5,
       16, 0, 13, 0,  4, 0, 11, 0,  12, 11, 2, 17, 11, 5,  0,  6,
       0,  2, 0,  8,  0, 3, 27, 26, 16, 0,  7, 0,  0,  26, 16, 7},
      {runtime[10], runtime[12], runtime[13], runtime[18], runtime[22],
       runtime[28], runtime[47], runtime[50], runtime[56], 1,
       std::make_shared<Number>(1.0 / 0.0), 5, 3, 2,
       std::make_shared<Character>(U'a')},
      {{0, 1, 0}},
      {{0, 0}},
      {{7,  7,  10, 10, 9,  9,  9,  15, 15, 14, 14, 14, 18, 18, 17, 17,
        17, 24, 24, 23, 23, 20, 20, 22, 22, 22, 22, 23, 6,  6,  5,  5,
        4,  4,  3,  3,  2,  2,  3,  5,  2,  1,  1,  0,  0,  1,  0,  0},
       {7,  7,  12, 12, 9,  9,  9,  15, 15, 14, 14, 14, 18, 18, 17, 17,
        17, 24, 24, 23, 23, 20, 20, 22, 22, 22, 22, 23, 25, 25, 5,  5,
        4,  4,  3,  3,  2,  2,  3,  5,  5,  1,  1,  0,  0,  1,  1,  0}},
      std::make_shared<Array>(U"‚àß¬¥‚â°‚üú>¬®‚ü®1,<\'a\',<‚àû,‚Üï5,5‚Äø3‚•ä2‚ü©")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø3‚Äø2‚â°‚â¢>‚Üï2‚Äø3") {
  spdlog::critical("test='{}'", "2‚Äø3‚Äø2‚â°‚â¢>‚Üï2‚Äø3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  4, 0, 5, 11, 2, 0, 3, 16, 0,  0, 16, 0, 2,
                   16, 0, 1, 0, 4,  0, 5, 0, 4,  11, 3, 17, 7},
                  {runtime[13], runtime[18], runtime[19], runtime[28], 2, 3},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{9, 9, 11, 11, 11, 11, 8, 8, 8, 7, 7, 7, 6, 6,
                    6, 5, 5,  0,  0,  2,  2, 4, 4, 4, 4, 5, 4},
                   {9, 9, 11, 11, 11, 11, 8, 8, 8, 7, 7, 7, 6, 6,
                    6, 5, 5,  0,  0,  2,  2, 4, 4, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"2‚Äø3‚Äø2‚â°‚â¢>‚Üï2‚Äø3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø3‚â°>‚ü®<2,3‚ü©") {
  spdlog::critical("test='{}'", "2‚Äø3‚â°>‚ü®<2,3‚ü©");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 4, 11, 2, 0, 1, 16, 0, 2, 0, 3, 0, 4, 11, 2, 17, 7},
      {runtime[12], runtime[13], runtime[18], 2, 3},
      {{0, 1, 0}},
      {{0, 0}},
      {{7, 7, 6, 6, 6, 9, 9, 5, 5, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
       {7, 7, 6, 6, 6, 9, 9, 10, 10, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
      std::make_shared<Array>(U"2‚Äø3‚â°>‚ü®<2,3‚ü©")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((4‚•ä2)‚ä∏‚•ä‚â°(>2‚Äø2‚•ä¬∑<2‚Äø2‚•ä‚ä¢))\"abcd\"") {
  spdlog::critical("test='{}'", "((4‚•ä2)‚ä∏‚•ä‚â°(>2‚Äø2‚•ä¬∑<2‚Äø2‚•ä‚ä¢))\"abcd\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  8, 0, 3, 0, 4, 0, 7,  0, 7,  11, 2,  21, 0,  0,
       20, 0, 4, 0, 7, 0, 7, 11, 2, 21, 0,  1,  20, 0,  2,
       0,  4, 0, 5, 0, 7, 0, 4,  0, 6,  17, 27, 21, 16, 7},
      {runtime[12], runtime[13], runtime[18], runtime[21], runtime[22],
       runtime[55], 4, 2, std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}},
      {{0, 0}},
      {{24, 24, 21, 21, 20, 20, 17, 17, 19, 19, 19, 19, 20, 16, 16,
        16, 14, 14, 11, 11, 13, 13, 13, 13, 14, 10, 10, 10, 8,  8,
        7,  7,  6,  6,  4,  4,  3,  3,  2,  2,  3,  6,  8,  0,  0},
       {29, 29, 21, 21, 20, 20, 17, 17, 19, 19, 19, 19, 20, 16, 16,
        16, 14, 14, 11, 11, 13, 13, 13, 13, 14, 10, 10, 10, 8,  8,
        7,  7,  6,  6,  4,  4,  3,  3,  2,  2,  3,  6,  8,  23, 23}},
      std::make_shared<Array>(U"((4‚•ä2)‚ä∏‚•ä‚â°(>2‚Äø2‚•ä¬∑<2‚Äø2‚•ä‚ä¢))\"abcd\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ä¢‚â°>‚àò<)5‚Äø3‚•ä‚Üï15") {
  spdlog::critical("test='{}'", "(‚ä¢‚â°>‚àò<)5‚Äø3‚•ä‚Üï15");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 5, 16, 0, 4,  0, 7, 0, 8, 11, 2,  17,
                   0, 0, 0, 6, 0,  1, 27, 0, 2, 0, 3, 21, 16, 7},
                  {runtime[12], runtime[13], runtime[18], runtime[21],
                   runtime[22], runtime[28], runtime[53], 5, 3, 15},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{12, 12, 11, 11, 11, 10, 10, 7, 7, 9, 9, 9, 9, 10,
                    5,  5,  4,  4,  3,  3,  4,  2, 2, 1, 1, 2, 0, 0},
                   {13, 13, 11, 11, 11, 10, 10, 7, 7, 9, 9, 9, 9, 10,
                    5,  5,  4,  4,  3,  3,  4,  2, 2, 1, 1, 2, 6, 6}},
                  std::make_shared<Array>(U"(‚ä¢‚â°>‚àò<)5‚Äø3‚•ä‚Üï15")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ä¢‚â°(><¬®))5‚Äø3‚•ä‚Üï15") {
  spdlog::critical("test='{}'", "(‚ä¢‚â°(><¬®))5‚Äø3‚•ä‚Üï15");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 5,  16, 0, 4,  0, 7, 0, 8, 11, 2,  17, 0,
                   6, 0, 0, 26, 0,  1, 20, 0, 2, 0, 3, 21, 16, 7},
                  {runtime[12], runtime[13], runtime[18], runtime[21],
                   runtime[22], runtime[28], runtime[47], 5, 3, 15},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{14, 14, 13, 13, 13, 12, 12, 9, 9, 11, 11, 11, 11, 12, 6,
                    6,  5,  5,  6,  4,  4,  4,  2, 2, 1,  1,  2,  0,  0},
                   {15, 15, 13, 13, 13, 12, 12, 9, 9, 11, 11, 11, 11, 12, 6,
                    6,  5,  5,  6,  4,  4,  4,  2, 2, 1,  1,  2,  8,  8}},
                  std::make_shared<Array>(U"(‚ä¢‚â°(><¬®))5‚Äø3‚•ä‚Üï15")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚•ä‚â°‚âç)'a'") {
  spdlog::critical("test='{}'", "(‚•ä‚â°‚âç)'a'");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 2, 0, 0, 0, 1, 21, 16, 7},
      {runtime[18], runtime[22], runtime[24],
       std::make_shared<Character>(U'a')},
      {{0, 1, 0}},
      {{0, 0}},
      {{5, 5, 3, 3, 2, 2, 1, 1, 2, 0, 0}, {7, 7, 3, 3, 2, 2, 1, 1, 2, 4, 4}},
      std::make_shared<Array>(U"(‚•ä‚â°‚âç)\'a\'")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚•ä‚â°‚âç)<'a'") {
  spdlog::critical("test='{}'", "(‚•ä‚â°‚âç)<'a'");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 0, 16, 0, 3, 0, 1, 0, 2, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[24],
                   std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{6, 6, 5, 5, 5, 3, 3, 2, 2, 1, 1, 2, 0, 0},
                   {8, 8, 5, 5, 5, 3, 3, 2, 2, 1, 1, 2, 4, 4}},
                  std::make_shared<Array>(U"(‚•ä‚â°‚âç)<\'a\'")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1‚Äø2‚ä∏‚•ä‚â°‚âç)\"ab\"") {
  spdlog::critical("test='{}'", "(1‚Äø2‚ä∏‚•ä‚â°‚âç)\"ab\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 2, 0, 0, 0, 1, 0, 3, 0, 4, 0, 5, 11, 2, 27, 21, 16, 7},
      {runtime[18], runtime[22], runtime[24], runtime[55], 1, 2,
       std::make_shared<Array>(U"ab")},
      {{0, 1, 0}},
      {{0, 0}},
      {{9, 9, 7, 7, 6, 6, 5, 5, 4, 4, 1, 1, 3, 3, 3, 3, 4, 6, 0, 0},
       {12, 12, 7, 7, 6, 6, 5, 5, 4, 4, 1, 1, 3, 3, 3, 3, 4, 6, 8, 8}},
      std::make_shared<Array>(U"(1‚Äø2‚ä∏‚•ä‚â°‚âç)\"ab\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‚Äø2‚â°1‚âç2") {
  spdlog::critical("test='{}'", "1‚Äø2‚â°1‚âç2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 0, 2, 17, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
                  {runtime[18], runtime[24], 1, 2},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{6, 6, 5, 5, 4, 4, 5, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {6, 6, 5, 5, 4, 4, 5, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"1‚Äø2‚â°1‚âç2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø1(‚âç‚â°2‚Äø2‚•ä‚àæ)4‚Äø3") {
  spdlog::critical("test='{}'", "2‚Äø1(‚âç‚â°2‚Äø2‚•ä‚àæ)4‚Äø3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6,  0, 7, 11, 2, 0,  2, 0, 1, 0, 4,  0, 4,  11,
       2, 21, 0, 0, 0,  3, 21, 0, 4, 0, 5, 11, 2, 17, 7},
      {runtime[18], runtime[22], runtime[23], runtime[24], 2, 1, 4, 3},
      {{0, 1, 0}},
      {{0, 0}},
      {{12, 12, 14, 14, 14, 14, 10, 10, 9, 9, 6, 6, 8, 8, 8,
        8,  9,  5,  5,  4,  4,  5,  0,  0, 2, 2, 2, 2, 3, 2},
       {12, 12, 14, 14, 14, 14, 10, 10, 9, 9, 6, 6, 8, 8,  8,
        8,  9,  5,  5,  4,  4,  5,  0,  0, 2, 2, 2, 2, 11, 2}},
      std::make_shared<Array>(U"2‚Äø1(‚âç‚â°2‚Äø2‚•ä‚àæ)4‚Äø3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚âç‚üú<‚â°‚âçÀú)'a'") {
  spdlog::critical("test='{}'", "(‚âç‚üú<‚â°‚âçÀú)'a'");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 3, 0, 2, 26, 0, 1, 0, 0, 0, 4, 0, 2, 27, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[24], runtime[45],
                   runtime[56], std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 6, 6, 5, 5, 6, 4, 4, 3, 3, 2, 2, 1, 1, 2, 4, 0, 0},
                   {10, 10, 6, 6, 5, 5, 6, 4, 4, 3, 3, 2, 2, 1, 1, 2, 4, 7, 7}},
                  std::make_shared<Array>(U"(‚âç‚üú<‚â°‚âçÀú)\'a\'")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚âçÀòÀú‚•äÀò1‚Äø5‚Äø9)‚â°‚åΩ‚éâ2‚ä∏+‚•ä‚üú(‚Üï√ó¬¥)3‚Äø2‚Äø1") {
  spdlog::critical("test='{}'", "(‚âçÀòÀú‚•äÀò1‚Äø5‚Äø9)‚â°‚åΩ‚éâ2‚ä∏+‚•ä‚üú(‚Üï√ó¬¥)3‚Äø2‚Äø1");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  17, 0,  16, 0,  13, 11, 3, 0,  9,  0,  1,  26, 0,  5, 20,
       0,  11, 0,  3,  27, 16, 0,  0, 0,  10, 0,  16, 0,  12, 0, 6,
       27, 27, 16, 0,  2,  0,  13, 0, 14, 0,  15, 11, 3,  0,  8, 0,
       3,  26, 16, 0,  7,  0,  8,  0, 4,  26, 26, 16, 17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[22], runtime[24],
       runtime[28], runtime[31], runtime[45], runtime[46], runtime[50],
       runtime[55], runtime[56], runtime[60], 1, 5, 9, 2, 3},
      {{0, 1, 0}},
      {{0, 0}},
      {{25, 25, 27, 27, 29, 29, 29, 29, 23, 23, 22, 22, 23, 21, 21, 21,
        19, 19, 18, 18, 19, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13,
        14, 16, 13, 12, 12, 6,  6,  8,  8,  10, 10, 10, 10, 5,  5,  4,
        4,  5,  4,  3,  3,  2,  2,  1,  1,  2,  3,  1,  12, 0},
       {25, 25, 27, 27, 29, 29, 29, 29, 23, 23, 22, 22, 23, 21, 21, 21,
        19, 19, 18, 18, 19, 24, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13,
        14, 16, 17, 12, 12, 6,  6,  8,  8,  10, 10, 10, 10, 5,  5,  4,
        4,  5,  5,  3,  3,  2,  2,  1,  1,  2,  3,  3,  12, 11}},
      std::make_shared<Array>(U"(‚âçÀòÀú‚•äÀò1‚Äø5‚Äø9)‚â°‚åΩ‚éâ2‚ä∏+‚•ä‚üú(‚Üï√ó¬¥)3‚Äø2‚Äø1")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<0)‚â°‚â°Àò0") {
  spdlog::critical("test='{}'", "(<0)‚â°‚â°Àò0");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 26, 16, 0, 1, 0, 3, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[18], runtime[46], 0},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 5, 5, 6, 5, 4, 4, 2, 2, 1, 1, 1, 4, 0},
                   {7, 7, 6, 6, 5, 5, 6, 6, 4, 4, 2, 2, 1, 1, 1, 4, 3}},
                  std::make_shared<Array>(U"(<0)‚â°‚â°Àò0")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<1)‚â°‚â°Àò<0") {
  spdlog::critical("test='{}'", "(<1)‚â°‚â°Àò<0");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 0, 16, 0, 2, 0, 1, 26, 16, 0, 1, 0, 3, 0, 0, 16, 17, 7},
      {runtime[12], runtime[18], runtime[46], 1, 0},
      {{0, 1, 0}},
      {{0, 0}},
      {{8, 8, 7, 7, 7, 6, 6, 5, 5, 6, 5, 4, 4, 2, 2, 1, 1, 1, 4, 0},
       {8, 8, 7, 7, 7, 6, 6, 5, 5, 6, 6, 4, 4, 2, 2, 1, 1, 1, 4, 3}},
      std::make_shared<Array>(U"(<1)‚â°‚â°Àò<0")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‚•ä<<\"ab\") ‚â° ‚ãàÀúÀò<\"ab\"") {
  spdlog::critical("test='{}'", "(2‚•ä<<\"ab\") ‚â° ‚ãàÀúÀò<\"ab\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0, 0, 16, 0, 5, 0,  4, 0, 3, 26, 26, 16, 0, 1,
       0, 7, 0, 0, 16, 0, 0, 16, 0, 2, 0, 6,  17, 17, 7},
      {runtime[12], runtime[18], runtime[22], runtime[25], runtime[45],
       runtime[46], 2, std::make_shared<Array>(U"ab")},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 15, 13, 11, 11,
        5,  5,  4,  4,  4,  3,  3,  3,  2,  2,  1,  1,  2,  11, 0},
       {20, 20, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 15, 15, 11, 11,
        8,  8,  4,  4,  4,  3,  3,  3,  2,  2,  1,  1,  2,  11, 9}},
      std::make_shared<Array>(U"(2‚•ä<<\"ab\") ‚â° ‚ãàÀúÀò<\"ab\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚•ä0) ‚â° {-}=Àò‚Üï3") {
  spdlog::critical("test='{}'", "(3‚•ä0) ‚â° {-}=Àò‚Üï3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 6, 0, 4, 16, 0, 5, 0,  1,  26, 1, 1, 17, 0,
                   2, 0, 7, 0, 3,  0, 6, 17, 17, 7,  0, 0, 7},
                  {runtime[1], runtime[15], runtime[18], runtime[22],
                   runtime[28], runtime[46], 3, 0},
                  {{0, 1, 0}, {0, 1, 1}},
                  {{0, 0}, {24, 0}},
                  {{14, 14, 13, 13, 13, 12, 12, 11, 11, 12, 8, 8, 11, 6,
                    6,  3,  3,  2,  2,  1,  1,  2,  6,  8,  9, 9, 9},
                   {14, 14, 13, 13, 13, 12, 12, 11, 11, 12, 10, 10, 12, 6,
                    6,  3,  3,  2,  2,  1,  1,  2,  6,  10, 9,  9,  9}},
                  std::make_shared<Array>(U"(3‚•ä0) ‚â° {-}=Àò‚Üï3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚Üï4)(√ó‚åú‚â°√ó‚éâ0‚Äø2)‚Üï5") {
  spdlog::critical("test='{}'", "(‚Üï4)(√ó‚åú‚â°√ó‚éâ0‚Äø2)‚Üï5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8, 0, 2, 16, 0, 6,  0,  7, 11, 2, 0, 4,  0,  0, 27,
                   0, 1, 0, 3, 0,  0, 26, 21, 0, 5,  0, 2, 16, 17, 7},
                  {runtime[2], runtime[18], runtime[28], runtime[48],
                   runtime[60], 4, 0, 2, 5},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{15, 15, 14, 14, 14, 10, 10, 12, 12, 12, 12, 9, 9, 8, 8, 9,
                    7,  7,  6,  6,  5,  5,  6,  7,  2,  2,  1,  1, 1, 4, 0},
                   {15, 15, 14, 14, 14, 10, 10, 12, 12, 12, 12, 9, 9, 8,  8, 9,
                    7,  7,  6,  6,  5,  5,  6,  7,  2,  2,  1,  1, 1, 13, 3}},
                  std::make_shared<Array>(U"(‚Üï4)(√ó‚åú‚â°√ó‚éâ0‚Äø2)‚Üï5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚Üï4)(‚ãÜÀú‚åúÀú‚â°‚ãÜ‚éâ‚àû‚Äø¬Ø4)‚Üï5") {
  spdlog::critical("test='{}'", "(‚Üï4)(‚ãÜÀú‚åúÀú‚â°‚ãÜ‚éâ‚àû‚Äø¬Ø4)‚Üï5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 9, 0, 2, 16, 0, 7, 0,  8,  11, 2,  0, 5, 0, 0, 27, 0,  1, 0,
       3, 0, 4, 0, 3,  0, 0, 26, 26, 26, 21, 0, 6, 0, 2, 16, 17, 7},
      {runtime[4], runtime[18], runtime[28], runtime[45], runtime[48],
       runtime[60], 4, std::make_shared<Number>(1.0 / 0.0), -4, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{18, 18, 17, 17, 17, 12, 12, 14, 14, 14, 14, 11, 11, 10, 10, 11, 9, 9, 8,
        8,  7,  7,  6,  6,  5,  5,  6,  7,  8,  9,  2,  2,  1,  1,  1,  4, 0},
       {18, 18, 17, 17, 17, 12, 12, 15, 15, 15, 15, 11, 11,
        10, 10, 11, 9,  9,  8,  8,  7,  7,  6,  6,  5,  5,
        6,  7,  8,  9,  2,  2,  1,  1,  1,  16, 3}},
      std::make_shared<Array>(U"(‚Üï4)(‚ãÜÀú‚åúÀú‚â°‚ãÜ‚éâ‚àû‚Äø¬Ø4)‚Üï5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ü®2‚ü©‚ä∏‚àæ‚çü(2‚Äø2‚•ä0‚Äø1‚Äø1‚Äø1)2‚Äø3)‚â°‚â¢¬®‚âç‚éâ(‚åä‚óã=)‚åúÀú‚ü®‚Üï3,2‚Äø3‚•ä‚Üï6‚ü©") {
  spdlog::critical("test='{}'",
                   "(‚ü®2‚ü©‚ä∏‚àæ‚çü(2‚Äø2‚•ä0‚Äø1‚Äø1‚Äø1)2‚Äø3)‚â°‚â¢¬®‚âç‚éâ(‚åä‚óã=)‚åúÀú‚ü®‚Üï3,2‚Äø3‚•ä‚Üï6‚ü©");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  18, 0,  7,  16, 0,  19, 0,  7,  16, 0,  4,  0,  15, 0,  18, 11, 2,
       17, 11, 2,  0,  8,  0,  10, 0,  1,  0,  11, 0,  0,  27, 0,  13, 0,  6,
       27, 26, 26, 16, 0,  9,  0,  3,  26, 16, 0,  2,  0,  15, 0,  18, 11, 2,
       0,  16, 0,  17, 0,  17, 0,  17, 11, 4,  0,  4,  0,  15, 0,  15, 11, 2,
       17, 0,  14, 0,  5,  0,  12, 0,  15, 11, 1,  27, 27, 16, 17, 7},
      {runtime[6],  runtime[15], runtime[18], runtime[19], runtime[22],
       runtime[23], runtime[24], runtime[28], runtime[45], runtime[47],
       runtime[48], runtime[54], runtime[55], runtime[60], runtime[62],
       2,           0,           1,           3,           6},
      {{0, 1, 0}},
      {{0, 0}},
      {{38, 38, 37, 37, 37, 45, 45, 44, 44, 44, 43, 43, 40, 40, 42, 42, 42, 42,
        43, 36, 36, 35, 35, 34, 34, 32, 32, 31, 31, 30, 30, 31, 28, 28, 27, 27,
        28, 34, 35, 27, 26, 26, 25, 25, 26, 25, 24, 24, 20, 20, 22, 22, 22, 22,
        12, 12, 14, 14, 16, 16, 18, 18, 18, 18, 11, 11, 8,  8,  10, 10, 10, 10,
        11, 6,  6,  5,  5,  4,  4,  2,  2,  1,  1,  4,  6,  1,  24, 0},
       {38, 38, 37, 37, 37, 45, 45, 44, 44, 44, 43, 43, 40, 40, 42, 42, 42, 42,
        43, 46, 46, 35, 35, 34, 34, 32, 32, 31, 31, 30, 30, 31, 28, 28, 27, 27,
        28, 34, 35, 35, 26, 26, 25, 25, 26, 26, 24, 24, 20, 20, 22, 22, 22, 22,
        12, 12, 14, 14, 16, 16, 18, 18, 18, 18, 11, 11, 8,  8,  10, 10, 10, 10,
        11, 6,  6,  5,  5,  4,  4,  2,  2,  3,  3,  4,  6,  19, 24, 23}},
      std::make_shared<Array>(
          U"(‚ü®2‚ü©‚ä∏‚àæ‚çü(2‚Äø2‚•ä0‚Äø1‚Äø1‚Äø1)2‚Äø3)‚â°‚â¢¬®‚âç‚éâ(‚åä‚óã=)‚åúÀú‚ü®‚Üï3,2‚Äø3‚•ä‚Üï6‚ü©")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2=‚åú‚óã‚Üï3)‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ1(2‚Äø3‚Äø4‚•ä\"abc\")") {
  spdlog::critical("test='{}'", "(2=‚åú‚óã‚Üï3)‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ1(2‚Äø3‚Äø4‚•ä\"abc\")");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 11, 0,  2, 0,  7, 0, 8, 0, 9, 11, 3,  17, 0,  10, 0,  6,
       0, 1,  27, 0, 11, 0, 2, 0, 7, 0, 9,  11, 2,  17, 17, 0,  1,
       0, 8,  0,  3, 0,  5, 0, 4, 0, 0, 26, 27, 0,  7,  17, 17, 7},
      {runtime[15], runtime[18], runtime[22], runtime[28], runtime[48],
       runtime[54], runtime[60], 2, 3, 4, 1, std::make_shared<Array>(U"abc")},
      {{0, 1, 0}},
      {{0, 0}},
      {{30, 30, 29, 29, 24, 24, 26, 26, 28, 28, 28, 28, 29, 22, 22, 21, 21,
        20, 20, 21, 14, 14, 13, 13, 10, 10, 12, 12, 12, 12, 13, 20, 8,  8,
        6,  6,  5,  5,  4,  4,  3,  3,  2,  2,  3,  4,  1,  1,  2,  8,  0},
       {34, 34, 29, 29, 24, 24, 26, 26, 28, 28, 28, 28, 29, 22, 22, 21, 21,
        20, 20, 21, 18, 18, 13, 13, 10, 10, 12, 12, 12, 12, 13, 22, 8,  8,
        6,  6,  5,  5,  4,  4,  3,  3,  2,  2,  3,  4,  1,  1,  5,  8,  7}},
      std::make_shared<Array>(U"(2=‚åú‚óã‚Üï3)‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ1(2‚Äø3‚Äø4‚•ä\"abc\")")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®0,0‚ü©‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ¬Ø1(2‚Äø3‚Äø4‚•ä\"abc\")") {
  spdlog::critical("test='{}'", "‚ü®0,0‚ü©‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ¬Ø1(2‚Äø3‚Äø4‚•ä\"abc\")");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 8, 0, 1, 0, 4, 0, 7,  0, 5,  11, 3, 17, 0, 6, 0, 2, 0,  0, 27, 0,
       8, 0, 1, 0, 4, 0, 5, 11, 2, 17, 17, 0, 0,  0, 3, 0, 3, 11, 2, 17, 7},
      {runtime[18], runtime[22], runtime[60], 0, 2, 4, -1, 3,
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}},
      {{0, 0}},
      {{28, 28, 27, 27, 22, 22, 24, 24, 26, 26, 26, 26, 27, 19,
        19, 18, 18, 17, 17, 18, 11, 11, 10, 10, 7,  7,  9,  9,
        9,  9,  10, 17, 5,  5,  1,  1,  3,  3,  0,  0,  5,  0},
       {32, 32, 27, 27, 22, 22, 24, 24, 26, 26, 26, 26, 27, 20,
        20, 18, 18, 17, 17, 18, 15, 15, 10, 10, 7,  7,  9,  9,
        9,  9,  10, 20, 5,  5,  1,  1,  3,  3,  4,  4,  5,  4}},
      std::make_shared<Array>(U"‚ü®0,0‚ü©‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ¬Ø1(2‚Äø3‚Äø4‚•ä\"abc\")")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(-‚â°-‚öá¬Ø1)5") {
  spdlog::critical("test='{}'", "(-‚â°-‚öá¬Ø1)5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 3, 0, 2, 0, 0, 27, 0, 1, 0, 0, 21, 16, 7},
                  {runtime[1], runtime[18], runtime[61], -1, 5},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 5, 5, 4, 4, 3, 3, 4, 2, 2, 1, 1, 2, 0, 0},
                   {8, 8, 6, 6, 4, 4, 3, 3, 4, 2, 2, 1, 1, 2, 7, 7}},
                  std::make_shared<Array>(U"(-‚â°-‚öá¬Ø1)5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®5,‚ü®15,1‚ü©‚ü©‚â°+¬¥‚öá1‚ü®‚ü®3,2‚ü©,‚ü®‚ü®4,5,6‚ü©,‚ü®1‚ü©‚ü©‚ü©") {
  spdlog::critical("test='{}'", "‚ü®5,‚ü®15,1‚ü©‚ü©‚â°+¬¥‚öá1‚ü®‚ü®3,2‚ü©,‚ü®‚ü®4,5,6‚ü©,‚ü®1‚ü©‚ü©‚ü©");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  7, 0,  8, 11, 2, 0, 9, 0, 4,  0, 10, 11, 3,  0,  6,
       11, 1, 11, 2, 11, 2, 0, 6, 0, 3,  0, 2,  0,  0,  26, 27,
       16, 0, 1,  0, 4,  0, 5, 0, 6, 11, 2, 11, 2,  17, 7},
      {runtime[0], runtime[18], runtime[50], runtime[61], 5, 15, 1, 3, 2, 4, 6},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 19, 19, 16, 16, 24, 24, 26, 26, 28, 28, 23, 23, 32, 32,
        31, 31, 22, 22, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 12, 13,
        11, 10, 10, 1,  1,  4,  4,  7,  7,  3,  3,  0,  0,  10, 0},
       {17, 17, 19, 19, 20, 20, 24, 24, 26, 26, 28, 28, 29, 29, 32, 32,
        33, 33, 34, 34, 35, 35, 14, 14, 13, 13, 12, 12, 11, 11, 12, 13,
        14, 10, 10, 1,  1,  5,  5,  7,  7,  8,  8,  9,  9,  10, 9}},
      std::make_shared<Array>(U"‚ü®5,‚ü®15,1‚ü©‚ü©‚â°+¬¥‚öá1‚ü®‚ü®3,2‚ü©,‚ü®‚ü®4,5,6‚ü©,‚ü®1‚ü©‚ü©‚ü©")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‚Äø6‚Äø15‚â°‚àæ¬¥+¬¥‚öá1‚ü®‚ü®0,1‚ü©,‚ü®‚ü®‚ü©‚ü©‚ü©‚•ä‚ä∏‚àæ‚öá¬Ø2‚Äø1‚ü®‚ü®2,3‚ü©,‚ü®4,5,6‚ü©‚ü©") {
  spdlog::critical("test='{}'",
                   "5‚Äø6‚Äø15‚â°‚àæ¬¥+¬¥‚öá1‚ü®‚ü®0,1‚ü©,‚ü®‚ü®‚ü©‚ü©‚ü©‚•ä‚ä∏‚àæ‚öá¬Ø2‚Äø1‚ü®‚ü®2,3‚ü©,‚ü®4,5,6‚ü©‚ü©");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  13, 0,  14, 11, 2, 0,  15, 0,  7, 0, 8,  11, 3,  11, 2,  0,  12, 0,
       10, 11, 2,  0,  6,  0, 3,  0,  5,  0, 2, 27, 27, 0,  11, 0,  10, 11, 2,
       11, 0,  11, 1,  11, 2, 17, 0,  10, 0, 6, 0,  4,  0,  0,  26, 27, 16, 0,
       4,  0,  3,  26, 16, 0, 1,  0,  7,  0, 8, 0,  9,  11, 3,  17, 7},
      {runtime[0], runtime[18], runtime[22], runtime[23], runtime[50],
       runtime[55], runtime[61], 5, 6, 15, 1, 0, -2, 2, 3, 4},
      {{0, 1, 0}},
      {{0, 0}},
      {{35, 35, 37, 37, 34, 34, 41, 41, 43, 43, 45, 45, 40, 40, 33,
        33, 29, 29, 32, 32, 32, 32, 28, 28, 27, 27, 26, 26, 25, 25,
        26, 28, 15, 15, 17, 17, 14, 14, 21, 21, 20, 20, 13, 13, 25,
        12, 12, 11, 11, 10, 10, 9,  9,  10, 11, 9,  8,  8,  7,  7,
        8,  7,  6,  6,  0,  0,  2,  2,  4,  4,  4,  4,  6,  4},
       {35, 35, 37, 37, 38, 38, 41, 41, 43, 43, 45, 45, 46, 46, 47,
        47, 30, 30, 32, 32, 32, 32, 28, 28, 27, 27, 26, 26, 25, 25,
        26, 28, 15, 15, 17, 17, 18, 18, 22, 22, 23, 23, 24, 24, 32,
        12, 12, 11, 11, 10, 10, 9,  9,  10, 11, 12, 8,  8,  7,  7,
        8,  8,  6,  6,  0,  0,  2,  2,  5,  5,  5,  5,  6,  5}},
      std::make_shared<Array>(
          U"5‚Äø6‚Äø15‚â°‚àæ¬¥+¬¥‚öá1‚ü®‚ü®0,1‚ü©,‚ü®‚ü®‚ü©‚ü©‚ü©‚•ä‚ä∏‚àæ‚öá¬Ø2‚Äø1‚ü®‚ü®2,3‚ü©,‚ü®4,5,6‚ü©‚ü©")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(5‚•ä1)‚â°(‚Üï5)=‚óã=‚öá0{‚âç}") {
  spdlog::critical("test='{}'", "(5‚•ä1)‚â°(‚Üï5)=‚óã=‚öá0{‚âç}");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {1, 1,  0,  9, 0, 6, 0, 0, 0, 5, 0, 0,  27, 27, 0, 7, 0,
       4, 16, 17, 0, 1, 0, 8, 0, 2, 0, 7, 17, 17, 7,  0, 3, 7},
      {runtime[15], runtime[18], runtime[22], runtime[24], runtime[28],
       runtime[54], runtime[61], 5, 1, 0},
      {{0, 1, 0}, {0, 1, 1}},
      {{0, 0}, {31, 0}},
      {{15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 11, 13, 8,  8,  7,
        7,  7,  10, 5,  5,  3,  3,  2,  2,  1,  1,  2,  5,  15, 16, 16, 16},
       {17, 17, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 11, 13, 8,  8,  7,
        7,  7,  14, 5,  5,  3,  3,  2,  2,  1,  1,  2,  5,  17, 16, 16, 16}},
      std::make_shared<Array>(U"(5‚•ä1)‚â°(‚Üï5)=‚óã=‚öá0{‚âç}")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4‚â°2+‚çü¬Ø1 6") {
  spdlog::critical("test='{}'", "4‚â°2+‚çü¬Ø1 6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 6, 0, 5, 0, 2, 0, 0, 27, 0, 4, 17, 0, 1, 0, 3, 17, 7},
                  {runtime[0], runtime[18], runtime[62], 4, 2, -1, 6},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 5, 5, 4, 4, 3, 3, 4, 2, 2, 3, 1, 1, 0, 0, 1, 0},
                   {8, 8, 6, 6, 4, 4, 3, 3, 4, 2, 2, 6, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"4‚â°2+‚çü¬Ø1 6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2√ó‚Üï7)‚â°2+‚çü(¬Ø3+‚Üï7)6") {
  spdlog::critical("test='{}'", "(2√ó‚Üï7)‚â°2+‚çü(¬Ø3+‚Üï7)6");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 8, 0,  6, 0, 3, 16, 0, 0, 0,  7, 17, 0, 4, 0,  0,  27,
       0, 5, 17, 0, 2, 0, 6,  0, 3, 16, 0, 1,  0, 5, 17, 17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[28], runtime[62], 2, 7, -3,
       6},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 15, 15, 14, 14, 14, 13, 13, 11, 11, 13, 9, 9, 8, 8, 9,
        7,  7,  8,  6,  6,  4,  4,  3,  3,  3,  2,  2,  1, 1, 2, 6, 0},
       {17, 17, 15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 9, 9, 8, 8, 9,
        7,  7,  16, 6,  6,  4,  4,  3,  3,  3,  2,  2,  1, 1, 2, 6, 5}},
      std::make_shared<Array>(U"(2√ó‚Üï7)‚â°2+‚çü(¬Ø3+‚Üï7)6")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚åä‚Üï5)‚â°{i‚Üê0‚ãÑr‚Üê{i+‚Ü©1‚ãÑ1+ùï©}‚çü(‚Üï4)ùï©‚ãÑr‚àæi}0") {
  spdlog::critical("test='{}'", "(3‚åä‚Üï5)‚â°{i‚Üê0‚ãÑr‚Üê{i+‚Ü©1‚ãÑ1+ùï©}‚çü(‚Üï4)ùï©‚ãÑr‚àæi}0");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  8,  1,  1, 16, 0,  2, 0,  7, 0, 4, 16, 0,  1, 0,  6,  17, 17, 7,
       0,  8,  33, 0, 3,  48, 6, 34, 0, 1, 0, 10, 0,  4, 16, 0,  5,  1,  2,
       27, 16, 33, 0, 4,  48, 6, 32, 0, 3, 0, 3,  34, 0, 4,  17, 7,  0,  9,
       0,  0,  33, 1, 3,  50, 6, 34, 0, 1, 0, 0,  0,  9, 17, 7},
      {runtime[0], runtime[6], runtime[18], runtime[23], runtime[28],
       runtime[62], 3, 5, 0, 1, 4},
      {{0, 1, 0}, {0, 0, 1}, {0, 0, 2}},
      {{0, 0}, {19, 5}, {55, 3}},
      {{35, 35, 7,  7,  7,  6,  6,  4,  4,  3,  3,  3,  2,  2,  1,
        1,  2,  6,  7,  10, 10, 8,  8,  8,  8,  9,  29, 29, 29, 27,
        27, 26, 26, 26, 24, 24, 14, 14, 24, 14, 12, 12, 12, 12, 13,
        33, 33, 33, 32, 32, 31, 31, 31, 32, 14, 18, 18, 16, 16, 15,
        15, 15, 15, 16, 22, 22, 22, 21, 21, 20, 20, 21, 20},
       {35, 35, 34, 34, 34, 6,  6,  4,  4,  3,  3,  3,  2,  2,  1,
        1,  2,  6,  34, 10, 10, 8,  8,  8,  8,  9,  29, 29, 29, 27,
        27, 26, 26, 26, 24, 24, 23, 23, 24, 28, 12, 12, 12, 12, 13,
        33, 33, 33, 32, 32, 31, 31, 31, 32, 23, 18, 18, 16, 16, 15,
        15, 15, 15, 16, 22, 22, 22, 21, 21, 20, 20, 21, 20}},
      std::make_shared<Array>(U"(3‚åä‚Üï5)‚â°{i‚Üê0‚ãÑr‚Üê{i+‚Ü©1‚ãÑ1+ùï©}‚çü(‚Üï4)ùï©‚ãÑr‚àæi}0")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(+‚åúÀú‚â°¬∑>1+‚çü‚ä¢‚ä¢)‚Üï5") {
  spdlog::critical("test='{}'", "(+‚åúÀú‚â°¬∑>1+‚çü‚ä¢‚ä¢)‚Üï5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 9, 0,  4, 16, 0, 3, 0, 3, 0, 7, 0,  0,  27, 0,  8, 21,
       0, 1, 20, 0, 2,  0, 5, 0, 6, 0, 0, 26, 26, 21, 16, 7},
      {runtime[0], runtime[13], runtime[18], runtime[21], runtime[28],
       runtime[45], runtime[48], runtime[62], 1, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{14, 14, 13, 13, 13, 11, 11, 10, 10, 9, 9, 8, 8, 9, 7, 7, 8,
        6,  6,  6,  4,  4,  3,  3,  2,  2,  1, 1, 2, 3, 4, 0, 0},
       {14, 14, 13, 13, 13, 11, 11, 10, 10, 9, 9, 8, 8, 9, 7,  7, 10,
        6,  6,  6,  4,  4,  3,  3,  2,  2,  1, 1, 2, 3, 4, 12, 12}},
      std::make_shared<Array>(U"(+‚åúÀú‚â°¬∑>1+‚çü‚ä¢‚ä¢)‚Üï5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‚Äø1‚Äø3‚Äø6‚Äø10‚â°+`‚Üï5") {
  spdlog::critical("test='{}'", "0‚Äø1‚Äø3‚Äø6‚Äø10‚â°+`‚Üï5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 9, 0, 2, 16, 0, 3, 0, 0, 26, 16, 0,  1, 0,
       4, 0, 5, 0, 6,  0, 7, 0, 8, 11, 5,  17, 7},
      {runtime[0], runtime[18], runtime[28], runtime[52], 0, 1, 3, 6, 10, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{14, 14, 13, 13, 13, 12, 12, 11, 11, 12, 11, 10, 10, 0,
        0,  2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  10, 8},
       {14, 14, 13, 13, 13, 12, 12, 11, 11, 12, 12, 10, 10, 0,
        0,  2,  2,  4,  4,  6,  6,  9,  9,  9,  9,  10, 9}},
      std::make_shared<Array>(U"0‚Äø1‚Äø3‚Äø6‚Äø10‚â°+`‚Üï5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(-0‚Äø1‚Äø3‚Äø6‚Äø10)‚â°-`‚Üï5") {
  spdlog::critical("test='{}'", "(-0‚Äø1‚Äø3‚Äø6‚Äø10)‚â°-`‚Üï5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 9, 0, 2, 16, 0, 3, 0, 0,  26, 16, 0, 1,  0,  4,
       0, 5, 0, 6, 0,  7, 0, 8, 11, 5,  0,  0, 16, 17, 7},
      {runtime[1], runtime[18], runtime[28], runtime[52], 0, 1, 3, 6, 10, 5},
      {{0, 1, 0}},
      {{0, 0}},
      {{17, 17, 16, 16, 16, 15, 15, 14, 14, 15, 14, 13, 13, 2,  2,
        4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 1,  1,  1,  13, 0},
       {17, 17, 16, 16, 16, 15, 15, 14, 14, 15, 15, 13, 13, 2,  2,
        4,  4,  6,  6,  8,  8,  11, 11, 11, 11, 1,  1,  1,  13, 12}},
      std::make_shared<Array>(U"(-0‚Äø1‚Äø3‚Äø6‚Äø10)‚â°-`‚Üï5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((0‚àæ¬®‚Üï3)‚âç3‚•ä0)‚â°‚â°`‚Üï2‚Äø3") {
  spdlog::critical("test='{}'", "((0‚àæ¬®‚Üï3)‚âç3‚•ä0)‚â°‚â°`‚Üï2‚Äø3");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  9, 0,  8, 11, 2, 0, 4,  16, 0,  6,  0,  0,  26,
                   16, 0, 0,  0, 7,  0, 1, 0,  8,  17, 0,  3,  0,  8,
                   0,  4, 16, 0, 5,  0, 2, 26, 0,  7,  17, 17, 17, 7},
                  {runtime[18], runtime[22], runtime[23], runtime[24],
                   runtime[28], runtime[47], runtime[52], 0, 3, 2},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{17, 17, 19, 19, 19, 19, 16, 16, 16, 15, 15, 14, 14, 15,
                    14, 13, 13, 11, 11, 10, 10, 9,  9,  10, 8,  8,  6,  6,
                    5,  5,  5,  4,  4,  3,  3,  4,  2,  2,  3,  8,  13, 0},
                   {17, 17, 19, 19, 19, 19, 16, 16, 16, 15, 15, 14, 14, 15,
                    15, 13, 13, 11, 11, 10, 10, 9,  9,  10, 8,  8,  6,  6,
                    5,  5,  5,  4,  4,  3,  3,  4,  2,  2,  4,  8,  13, 12}},
                  std::make_shared<Array>(U"((0‚àæ¬®‚Üï3)‚âç3‚•ä0)‚â°‚â°`‚Üï2‚Äø3")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®‚ü©‚â°√ó`‚ü®‚ü©") {
  spdlog::critical("test='{}'", "‚ü®‚ü©‚â°√ó`‚ü®‚ü©");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 2, 0, 0, 26, 16, 0, 1, 11, 0, 17, 7},
                  {runtime[2], runtime[18], runtime[52]},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 3, 3, 4, 3, 2, 2, 0, 0, 2, 0},
                   {6, 6, 4, 4, 3, 3, 4, 4, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"‚ü®‚ü©‚â°√ó`‚ü®‚ü©")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚â°‚üú(!‚àò0`)3‚Äø0‚Äø2‚•ä\"\"") {
  spdlog::critical("test='{}'", "‚â°‚üú(!‚àò0`)3‚Äø0‚Äø2‚•ä\"\"");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 1, 0, 7, 0,  6,  0, 8, 11, 3, 17, 0,  3,
                   0, 6, 0, 4, 0, 2, 27, 26, 0, 5, 0,  0, 27, 16, 7},
                  {runtime[18], runtime[22], runtime[43], runtime[52],
                   runtime[53], runtime[56], 0, 3, 2,
                   std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{14, 14, 13, 13, 8, 8, 10, 10, 12, 12, 12, 12, 13, 6, 6,
                    5,  5,  4,  4,  3, 3, 4,  6,  1,  1,  0,  0,  1,  0, 0},
                   {15, 15, 13, 13, 8, 8, 10, 10, 12, 12, 12, 12, 13, 6, 6,
                    5,  5,  4,  4,  3, 3, 4,  6,  1,  1,  0,  0,  1,  7, 0}},
                  std::make_shared<Array>(U"‚â°‚üú(!‚àò0`)3‚Äø0‚Äø2‚•ä\"\"")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø3‚Äø5‚Äø8‚Äø12‚â°2+`‚Üï5") {
  spdlog::critical("test='{}'", "2‚Äø3‚Äø5‚Äø8‚Äø12‚â°2+`‚Üï5");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 2, 16, 0, 3, 0, 0, 26, 0,  4, 17, 0, 1,
       0, 4, 0, 5, 0,  6, 0, 7, 0, 8,  11, 5, 17, 7},
      {runtime[0], runtime[18], runtime[28], runtime[52], 2, 3, 5, 8, 12},
      {{0, 1, 0}},
      {{0, 0}},
      {{15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 11, 11, 12, 10, 10,
        0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  10, 8},
       {15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 11, 11, 13, 10, 10,
        0,  0,  2,  2,  4,  4,  6,  6,  9,  9,  9,  9,  10, 9}},
      std::make_shared<Array>(U"2‚Äø3‚Äø5‚Äø8‚Äø12‚â°2+`‚Üï5")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‚ãÜ1‚Äø2‚Äø6√ó‚åú0‚Äø2)‚â°3‚Äø4‚ãÜ`3+‚åú‚óã‚Üï2") {
  spdlog::critical("test='{}'", "(2‚ãÜ1‚Äø2‚Äø6√ó‚åú0‚Äø2)‚â°3‚Äø4‚ãÜ`3+‚åú‚óã‚Üï2");
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  8, 0,  4,  0,  7,  0,  5,  0, 0,  26, 27, 0,  12,
                   17, 0, 6,  0,  2,  26, 0,  12, 0, 13, 11, 2,  17, 0,
                   3,  0, 11, 0,  8,  11, 2,  0,  5, 0,  1,  26, 0,  9,
                   0,  8, 0,  10, 11, 3,  17, 0,  2, 0,  8,  17, 17, 7},
                  {runtime[0], runtime[2], runtime[4], runtime[18], runtime[28],
                   runtime[48], runtime[52], runtime[54], 2, 1, 6, 0, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}},
                  {{25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 22, 23, 20, 20,
                    21, 19, 19, 18, 18, 19, 15, 15, 17, 17, 17, 17, 18, 14,
                    14, 10, 10, 12, 12, 12, 12, 9,  9,  8,  8,  9,  3,  3,
                    5,  5,  7,  7,  7,  7,  8,  2,  2,  1,  1,  2,  14, 0},
                   {25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 22, 23, 20, 20,
                    24, 19, 19, 18, 18, 19, 15, 15, 17, 17, 17, 17, 19, 14,
                    14, 10, 10, 12, 12, 12, 12, 9,  9,  8,  8,  9,  3,  3,
                    5,  5,  7,  7,  7,  7,  9,  2,  2,  1,  1,  2,  14, 13}},
                  std::make_shared<Array>(U"(2‚ãÜ1‚Äø2‚Äø6√ó‚åú0‚Äø2)‚â°3‚Äø4‚ãÜ`3+‚åú‚óã‚Üï2")};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
