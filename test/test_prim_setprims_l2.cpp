/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:50
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("⟨⟩≡⟨⟩∾\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡⟨⟩∾\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[23], CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 11, 0, 17, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⟨⟩∾\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"≡⟨⟩∾\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[23], CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡\"a\"∾⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"≡\"a\"∾⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[23], CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aBCD\"≡\"a\"∾\"BCD\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"aBCD\"≡\"a\"∾\"BCD\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[23], CXBQN_NEW(Array, U"aBCD"),
                            CXBQN_NEW(Array, U"a"), CXBQN_NEW(Array, U"BCD")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((+⌜˜≠¨)≡(≠¨∾⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((+⌜˜≠¨)≡(≠¨∾⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[14],
                            runtime[18],
                            runtime[23],
                            runtime[45],
                            runtime[47],
                            runtime[48],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U""),
                            CXBQN_NEW(Array, U"abcde")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0,  7,  0,  8, 11, 2, 0, 10, 11, 3,  0,  4,  0,
             6, 0, 3,  26, 26, 0, 5,  0, 1, 26, 20, 0,  2,  0,  5,
             0, 1, 26, 0,  4,  0, 6,  0, 0, 26, 26, 20, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⥊⟜(↕×´)≡(×⟜4)⊸(+⌜)○↕´)3‿4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⥊⟜(↕×´)≡(×⟜4)⊸(+⌜)○↕´)3‿4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[2],  runtime[18],          runtime[22],
        runtime[28], runtime[48], runtime[50],          runtime[54],
        runtime[55], runtime[56], CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 10, 11, 2, 0,  6, 0, 4,  0,  7,  0,  5,  0, 0,
             26, 0,  8, 0,  10, 0, 9,  0, 1, 27, 27, 27, 26, 0,  2, 0,
             6,  0,  1, 26, 0,  4, 20, 0, 9, 0,  3,  27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⥊⟜(↕×´)≡(×⟜4)⊸(+⌜)○↕´)0‿4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⥊⟜(↕×´)≡(×⟜4)⊸(+⌜)○↕´)0‿4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[2],  runtime[18],          runtime[22],
        runtime[28], runtime[48], runtime[50],          runtime[54],
        runtime[55], runtime[56], CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 10, 11, 2, 0,  6, 0, 4,  0,  7,  0,  5,  0, 0,
             26, 0,  8, 0,  10, 0, 9,  0, 1, 27, 27, 27, 26, 0,  2, 0,
             6,  0,  1, 26, 0,  4, 20, 0, 9, 0,  3,  27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‿2‿0⥊\"\")≡(3‿2⥊↕6)+⌜\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿0⥊\"\")≡(3‿2⥊↕6)+⌜\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[22],          runtime[28],
                            runtime[48],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9,  0, 4, 0, 0, 26, 0, 8, 0, 3, 16, 0, 2, 0,  5, 0,  6,  11, 2,
             17, 17, 0, 1, 0, 9, 0,  2, 0, 5, 0, 6,  0, 7, 11, 3, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<-2)≡-¨2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<-2)≡-¨2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[12], runtime[18], runtime[47],
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 3, 0, 0, 26, 16, 0, 2, 0, 4, 0, 0, 16, 0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<<2)≡<¨2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<<2)≡<¨2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[47],
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 0, 0, 26, 16, 0, 1, 0, 3, 0, 0, 16, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE(
    "⟨1,⟨3,2,2‿2⥊⟨1,0,2,0⟩⟩,⟨5,4⟩⟩≡-⟨-1,⟨-3,-2,-¨2‿2⥊⟨1,0,2,0⟩⟩,⟨-5,-4⟩⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical(
      "test='{}'",
      "⟨1,⟨3,2,2‿2⥊⟨1,0,2,0⟩⟩,⟨5,4⟩⟩≡-⟨-1,⟨-3,-2,-¨2‿2⥊⟨1,0,2,0⟩⟩,⟨-5,-4⟩⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[18],
                            runtime[22],          runtime[47],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  4,  0, 0,  16, 0,  5,  0,  0, 16, 0, 6,  0,  0, 16, 0,  4,
             0,  7,  0, 6,  0,  7,  11, 4,  0, 2,  0, 6,  0,  6, 11, 2,  17,
             0,  3,  0, 0,  26, 16, 11, 3,  0, 8,  0, 0,  16, 0, 9,  0,  0,
             16, 11, 2, 11, 3,  0,  0,  16, 0, 1,  0, 4,  0,  5, 0,  6,  0,
             4,  0,  7, 0,  6,  0,  7,  11, 4, 0,  2, 0,  6,  0, 6,  11, 2,
             17, 11, 3, 0,  8,  0,  9,  11, 2, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3(+¨≡+⌜)↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3(+¨≡+⌜)↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[18],          runtime[28],         runtime[47],
        runtime[48], CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 2, 16, 0,  4,  0, 0, 26, 0,
             1, 0, 3, 0, 0,  26, 21, 0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‿4‿5‿6‿6≡{𝕊⍟(×≡)⊸∾⟜⥊´𝕩}⟨2,1⟩+⟨⟨⟨⟨1,2⟩,3⟩,4⟩,5⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "3‿4‿5‿6‿6≡{𝕊⍟(×≡)⊸∾⟜⥊´𝕩}⟨2,1⟩+⟨⟨⟨⟨1,2⟩,3⟩,4⟩,5⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[22],          runtime[23],          runtime[50],
        runtime[55],          runtime[56],          runtime[62],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 0, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0, 13, 11, 2,  0,  9,  11, 2,  0,  10, 11, 2,  0,
             11, 11, 2, 0,  0,  0,  13, 0,  14, 11, 2,  17, 1,  1,  16,
             0,  2,  0, 9,  0,  10, 0,  11, 0,  12, 0,  12, 11, 5,  17,
             7,  34, 0, 1,  0,  5,  0,  3,  0,  7,  0,  4,  0,  6,  0,
             2,  0,  1, 20, 0,  8,  34, 0,  0,  27, 27, 27, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {46, 3}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‿2≡≢(↕3)(⊣×⊢⌜)↕2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3‿2≡≢(↕3)(⊣×⊢⌜)↕2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[2],  runtime[18],          runtime[19],
        runtime[20], runtime[21],          runtime[28],
        runtime[48], CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0,  5,  16, 0, 6,  0, 4, 26, 0, 0, 0, 3,  21, 0,  7,
             0, 5, 16, 17, 0,  2, 16, 0, 1, 0,  7, 0, 8, 11, 2,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<-4)≡-<4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<-4)≡-<4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[12], runtime[18],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 0, 16, 0, 2, 0, 3, 0, 0, 16, 0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<2)≡1+<1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<2)≡1+<1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[12], runtime[18],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 0, 0, 4, 17, 0, 2, 0, 3, 0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(=¨⟜(⥊⟜(↕×´)3‿4)≡(↕4)=⌜˜4|⊢)1‿6‿8") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(=¨⟜(⥊⟜(↕×´)3‿4)≡(↕4)=⌜˜4|⊢)1‿6‿8");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[2],           runtime[8],           runtime[15],
        runtime[18],          runtime[21],          runtime[22],
        runtime[28],          runtime[45],          runtime[47],
        runtime[48],          runtime[50],          runtime[56],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 8)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0,  15, 0,  16, 11, 3, 0,  4,  0,  1,  0,  13, 21, 0,
             7,  0,  9,  0,  2,  26, 26, 0, 13, 0,  6,  16, 21, 0,  3,  0,
             12, 0,  13, 11, 2,  0,  10, 0, 0,  26, 0,  6,  20, 0,  11, 0,
             5,  27, 16, 0,  11, 0,  8,  0, 2,  26, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿1≡+‿-=⊑⟨-⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿1≡+‿-=⊑⟨-⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[1],           runtime[15],         runtime[18],
        runtime[37], CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  1, 11, 1, 0, 4, 16, 0, 2, 0,  0, 0,  1,
             11, 2, 17, 0, 3, 0, 5,  0, 6, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
