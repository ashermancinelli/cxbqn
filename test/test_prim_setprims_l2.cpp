/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-14T17:27:32
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("‚ü®‚ü©‚â°‚ü®‚ü©‚àæ\"\"") {
  spdlog::critical("test='{}'", "‚ü®‚ü©‚â°‚ü®‚ü©‚àæ\"\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 11, 0, 17, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[23], std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"‚â°‚ü®‚ü©‚àæ\"a\"") {
  spdlog::critical("test='{}'", "\"a\"‚â°‚ü®‚ü©‚àæ\"a\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[23], std::make_shared<Array>(U"a")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"‚â°\"a\"‚àæ‚ü®‚ü©") {
  spdlog::critical("test='{}'", "\"a\"‚â°\"a\"‚àæ‚ü®‚ü©");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 1, 0, 2, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[23], std::make_shared<Array>(U"a")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aBCD\"‚â°\"a\"‚àæ\"BCD\"") {
  spdlog::critical("test='{}'", "\"aBCD\"‚â°\"a\"‚àæ\"BCD\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[23], std::make_shared<Array>(U"aBCD"),
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"BCD")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((+‚åúÀú‚â†¬®)‚â°(‚â†¬®‚àæ‚åúÀú))\"\"‚Äø‚ü®2,3‚ü©‚Äø\"abcde\"") {
  spdlog::critical("test='{}'", "((+‚åúÀú‚â†¬®)‚â°(‚â†¬®‚àæ‚åúÀú))\"\"‚Äø‚ü®2,3‚ü©‚Äø\"abcde\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0,  7,  0,  8, 11, 2, 0, 10, 11, 3,  0,  4,  0,
                   6, 0, 3,  26, 26, 0, 5,  0, 1, 26, 20, 0,  2,  0,  5,
                   0, 1, 26, 0,  4,  0, 6,  0, 0, 26, 26, 20, 21, 16, 7},
                  {runtime[0], runtime[14], runtime[18], runtime[23],
                   runtime[45], runtime[47], runtime[48], 2, 3,
                   std::make_shared<Array>(U""),
                   std::make_shared<Array>(U"abcde")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚•ä‚üú(‚Üï√ó¬¥)‚â°(√ó‚üú4)‚ä∏(+‚åú)‚óã‚Üï¬¥)3‚Äø4") {
  spdlog::critical("test='{}'", "(‚•ä‚üú(‚Üï√ó¬¥)‚â°(√ó‚üú4)‚ä∏(+‚åú)‚óã‚Üï¬¥)3‚Äø4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  11, 0, 10, 11, 2, 0,  6, 0, 4,  0,  7,  0,  5,  0, 0,
                   26, 0,  8, 0,  10, 0, 9,  0, 1, 27, 27, 27, 26, 0,  2, 0,
                   6,  0,  1, 26, 0,  4, 20, 0, 9, 0,  3,  27, 21, 16, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[22],
                   runtime[28], runtime[48], runtime[50], runtime[54],
                   runtime[55], runtime[56], 4, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚•ä‚üú(‚Üï√ó¬¥)‚â°(√ó‚üú4)‚ä∏(+‚åú)‚óã‚Üï¬¥)0‚Äø4") {
  spdlog::critical("test='{}'", "(‚•ä‚üú(‚Üï√ó¬¥)‚â°(√ó‚üú4)‚ä∏(+‚åú)‚óã‚Üï¬¥)0‚Äø4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  11, 0, 10, 11, 2, 0,  6, 0, 4,  0,  7,  0,  5,  0, 0,
                   26, 0,  8, 0,  10, 0, 9,  0, 1, 27, 27, 27, 26, 0,  2, 0,
                   6,  0,  1, 26, 0,  4, 20, 0, 9, 0,  3,  27, 21, 16, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[22],
                   runtime[28], runtime[48], runtime[50], runtime[54],
                   runtime[55], runtime[56], 4, 0},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚Äø2‚Äø0‚•ä\"\")‚â°(3‚Äø2‚•ä‚Üï6)+‚åú\"\"") {
  spdlog::critical("test='{}'", "(3‚Äø2‚Äø0‚•ä\"\")‚â°(3‚Äø2‚•ä‚Üï6)+‚åú\"\"");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 4, 0, 0,  26, 0,  8,  0, 3,  16, 0,
                   2, 0, 5, 0, 6, 11, 2,  17, 17, 0, 1,  0,  9,
                   0, 2, 0, 5, 0, 6,  0,  7,  11, 3, 17, 17, 7},
                  {runtime[0], runtime[18], runtime[22], runtime[28],
                   runtime[48], 3, 2, 0, 6, std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<-2)‚â°-¬®2") {
  spdlog::critical("test='{}'", "(<-2)‚â°-¬®2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 3, 0, 0, 26, 16, 0, 2, 0, 4, 0, 0, 16, 0, 1, 16, 17, 7},
      {runtime[1], runtime[12], runtime[18], runtime[47], 2},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<<2)‚â°<¬®2") {
  spdlog::critical("test='{}'", "(<<2)‚â°<¬®2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 2, 0, 0, 26, 16, 0, 1, 0, 3, 0, 0, 16, 0, 0, 16, 17, 7},
      {runtime[12], runtime[18], runtime[47], 2},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE(
    "‚ü®1,‚ü®3,2,2‚Äø2‚•ä‚ü®1,0,2,0‚ü©‚ü©,‚ü®5,4‚ü©‚ü©‚â°-‚ü®-1,‚ü®-3,-2,-¬®2‚Äø2‚•ä‚ü®1,0,2,0‚ü©‚ü©,‚ü®-5,-4‚ü©‚ü©") {
  spdlog::critical(
      "test='{}'",
      "‚ü®1,‚ü®3,2,2‚Äø2‚•ä‚ü®1,0,2,0‚ü©‚ü©,‚ü®5,4‚ü©‚ü©‚â°-‚ü®-1,‚ü®-3,-2,-¬®2‚Äø2‚•ä‚ü®1,0,2,0‚ü©‚ü©,‚ü®-5,-4‚ü©‚ü©");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  4, 0, 0,  16, 0,  5,  0, 0, 16, 0, 6,  0,  0,  16, 0,  4,  0, 7,  0,
       6,  0, 7, 11, 4,  0,  2,  0, 6, 0,  6, 11, 2,  17, 0,  3,  0,  0, 26, 16,
       11, 3, 0, 8,  0,  0,  16, 0, 9, 0,  0, 16, 11, 2,  11, 3,  0,  0, 16, 0,
       1,  0, 4, 0,  5,  0,  6,  0, 4, 0,  7, 0,  6,  0,  7,  11, 4,  0, 2,  0,
       6,  0, 6, 11, 2,  17, 11, 3, 0, 8,  0, 9,  11, 2,  11, 3,  17, 7},
      {runtime[1], runtime[18], runtime[22], runtime[47], 1, 3, 2, 0, 5, 4},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3(+¬®‚â°+‚åú)‚Üï6") {
  spdlog::critical("test='{}'", "3(+¬®‚â°+‚åú)‚Üï6");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 2, 16, 0, 4, 0, 0, 26, 0, 1, 0, 3, 0, 0, 26, 21, 0, 5, 17, 7},
      {runtime[0], runtime[18], runtime[28], runtime[47], runtime[48], 3, 6},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‚Äø4‚Äø5‚Äø6‚Äø6‚â°{ùïä‚çü(√ó‚â°)‚ä∏‚àæ‚üú‚•ä¬¥ùï©}‚ü®2,1‚ü©+‚ü®‚ü®‚ü®‚ü®1,2‚ü©,3‚ü©,4‚ü©,5‚ü©") {
  spdlog::critical("test='{}'",
                   "3‚Äø4‚Äø5‚Äø6‚Äø6‚â°{ùïä‚çü(√ó‚â°)‚ä∏‚àæ‚üú‚•ä¬¥ùï©}‚ü®2,1‚ü©+‚ü®‚ü®‚ü®‚ü®1,2‚ü©,3‚ü©,4‚ü©,5‚ü©");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 14, 0,  13, 11, 2,  0,  9,  11, 2,  0,  10, 11, 2,  0,  11, 11, 2, 0,
       0, 0,  13, 0,  14, 11, 2,  17, 1,  1,  16, 0,  2,  0,  9,  0,  10, 0, 11,
       0, 12, 0,  12, 11, 5,  17, 7,  34, 0,  1,  0,  5,  0,  3,  0,  7,  0, 4,
       0, 6,  0,  2,  0,  1,  20, 0,  8,  34, 0,  0,  27, 27, 27, 26, 16, 7},
      {runtime[0], runtime[2], runtime[18], runtime[22], runtime[23],
       runtime[50], runtime[55], runtime[56], runtime[62], 3, 4, 5, 6, 2, 1},
      {{0, 1, 0}, {0, 0, 1}},
      {{0, 0}, {46, 3}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‚Äø2‚â°‚â¢(‚Üï3)(‚ä£√ó‚ä¢‚åú)‚Üï2") {
  spdlog::critical("test='{}'", "3‚Äø2‚â°‚â¢(‚Üï3)(‚ä£√ó‚ä¢‚åú)‚Üï2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8, 0,  5,  16, 0, 6,  0, 4, 26, 0, 0, 0, 3,  21, 0,  7,
                   0, 5, 16, 17, 0,  2, 16, 0, 1, 0,  7, 0, 8, 11, 2,  17, 7},
                  {runtime[2], runtime[18], runtime[19], runtime[20],
                   runtime[21], runtime[28], runtime[48], 3, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<-4)‚â°-<4") {
  spdlog::critical("test='{}'", "(<-4)‚â°-<4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 3, 0, 1, 16, 0, 0, 16, 0, 2, 0, 3, 0, 0, 16, 0, 1, 16, 17, 7},
      {runtime[1], runtime[12], runtime[18], 4},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<2)‚â°1+<1") {
  spdlog::critical("test='{}'", "(<2)‚â°1+<1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 16, 0, 0, 0, 4, 17, 0, 2, 0, 3, 0, 1, 16, 17, 7},
                  {runtime[0], runtime[12], runtime[18], 2, 1},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(=¬®‚üú(‚•ä‚üú(‚Üï√ó¬¥)3‚Äø4)‚â°(‚Üï4)=‚åúÀú4|‚ä¢)1‚Äø6‚Äø8") {
  spdlog::critical("test='{}'", "(=¬®‚üú(‚•ä‚üú(‚Üï√ó¬¥)3‚Äø4)‚â°(‚Üï4)=‚åúÀú4|‚ä¢)1‚Äø6‚Äø8");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  14, 0,  15, 0,  16, 11, 3, 0,  4,  0,  1,  0,  13, 21, 0,
                   7,  0,  9,  0,  2,  26, 26, 0, 13, 0,  6,  16, 21, 0,  3,  0,
                   12, 0,  13, 11, 2,  0,  10, 0, 0,  26, 0,  6,  20, 0,  11, 0,
                   5,  27, 16, 0,  11, 0,  8,  0, 2,  26, 27, 21, 16, 7},
                  {runtime[2], runtime[8], runtime[15], runtime[18],
                   runtime[21], runtime[22], runtime[28], runtime[45],
                   runtime[47], runtime[48], runtime[50], runtime[56], 3, 4, 1,
                   6, 8},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‚Äø1‚â°+‚Äø-=‚äë‚ü®-‚ü©") {
  spdlog::critical("test='{}'", "0‚Äø1‚â°+‚Äø-=‚äë‚ü®-‚ü©");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  1, 11, 1, 0, 4, 16, 0, 2, 0,  0, 0,  1,
       11, 2, 17, 0, 3, 0, 5,  0, 6, 11, 2, 17, 7},
      {runtime[0], runtime[1], runtime[15], runtime[18], runtime[37], 0, 1},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
