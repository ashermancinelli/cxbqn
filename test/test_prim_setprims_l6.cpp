/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-18T12:08:15
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("≡⟜(∾⥊¨)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜(∾⥊¨)\"abc\"");
  CompileParams p({0, 5, 0, 3, 0, 1, 26, 0, 2, 20, 0, 4, 0, 0, 27, 16, 7},
                  {runtime[18], runtime[22], runtime[23], runtime[47],
                   runtime[56], std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 5, 5, 4, 4, 5, 3, 3, 3, 1, 1, 0, 0, 1, 0, 0},
                   {11, 11, 5, 5, 4, 4, 5, 3, 3, 3, 1, 1, 0, 0, 1, 6, 0}},
                  std::make_shared<Array>(U"≡⟜(∾⥊¨)\"abc\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾´≡∾)\"ab\"‿\"cde\"‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾´≡∾)\"ab\"‿\"cde\"‿\"\"");
  CompileParams p(
      {0, 3, 0, 4, 0, 5, 11, 3, 0, 1, 0, 0, 0, 2, 0, 1, 26, 21, 16, 7},
      {runtime[18], runtime[23], runtime[50], std::make_shared<Array>(U"ab"),
       std::make_shared<Array>(U"cde"), std::make_shared<Array>(U"")},
      {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 11, 11, 17, 17, 17, 17, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 0, 0},
       {9, 9, 15, 15, 18, 18, 18, 18, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 5, 5}},
      std::make_shared<Array>(U"(∾´≡∾)\"ab\"‿\"cde\"‿\"\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡∾\"ab\"‿'c'‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡∾\"ab\"‿'c'‿\"\"");
  CompileParams p({0, 4, 0, 2, 0, 5, 11, 3, 0, 1, 16, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[23], std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abc"),
                   std::make_shared<Array>(U"ab"),
                   std::make_shared<Array>(U"")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 12, 12, 16, 16, 16, 16, 6, 6, 6, 5, 5, 0, 0, 5, 0},
                   {10, 10, 14, 14, 17, 17, 17, 17, 6, 6, 6, 5, 5, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"\"abc\"≡∾\"ab\"‿\'c\'‿\"\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2‿3‿4‿6‿9≡∾(⊢×≠↑↓)1+↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2‿3‿4‿6‿9≡∾(⊢×≠↑↓)1+↕3");
  CompileParams p({0, 11, 0, 8,  16, 0,  0,  0,  9, 17, 0,  7, 0,  6, 0,
                   2, 21, 0, 1,  0,  4,  21, 16, 0, 5,  16, 0, 3,  0, 9,
                   0, 10, 0, 11, 0,  12, 0,  13, 0, 14, 11, 6, 17, 7},
                  {runtime[0], runtime[2], runtime[14], runtime[18],
                   runtime[21], runtime[23], runtime[26], runtime[27],
                   runtime[28], 1, 2, 3, 4, 6, 9},
                  {{0, 1, 0}}, {{0, 0}},
                  {{23, 23, 22, 22, 22, 21, 21, 20, 20, 21, 18, 18, 17, 17, 16,
                    16, 17, 15, 15, 14, 14, 15, 13, 12, 12, 12, 11, 11, 0,  0,
                    2,  2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10},
                   {23, 23, 22, 22, 22, 21, 21, 20, 20, 21, 18, 18, 17, 17, 16,
                    16, 17, 15, 15, 14, 14, 15, 19, 12, 12, 12, 11, 11, 0,  0,
                    2,  2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10}},
                  std::make_shared<Array>(U"1‿2‿3‿4‿6‿9≡∾(⊢×≠↑↓)1+↕3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≡⟜∾∧≡⟜(∾<))<4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≡⟜∾∧≡⟜(∾<))<4");
  CompileParams p(
      {0,  5, 0, 1, 16, 0, 1, 0, 3, 20, 0,  4,  0, 2,
       27, 0, 0, 0, 3,  0, 4, 0, 2, 27, 21, 16, 7},
      {runtime[10], runtime[12], runtime[18], runtime[23], runtime[56], 4},
      {{0, 1, 0}}, {{0, 0}},
      {{13, 13, 12, 12, 12, 9, 9, 8, 8, 8, 6, 6, 5, 5,
        6,  4,  4,  3,  3,  2, 2, 1, 1, 2, 4, 0, 0},
       {13, 13, 12, 12, 12, 9, 9, 8, 8, 8, 6, 6,  5, 5,
        6,  4,  4,  3,  3,  2, 2, 1, 1, 2, 4, 11, 11}},
      std::make_shared<Array>(U"(≡⟜∾∧≡⟜(∾<))<4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1‿4,⥊2⟩((∾⋆⌜⌜)≡⋆⌜○∾)⟨2‿3‿4,⟨⟩,⥊5⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿4,⥊2⟩((∾⋆⌜⌜)≡⋆⌜○∾)⟨2‿3‿4,⟨⟩,⥊5⟩");
  CompileParams p(
      {0, 8,  0,  9, 0, 7, 11, 3,  11, 0, 0, 10, 0, 2,  16, 11, 3,  0,  3,
       0, 5,  0,  4, 0, 0, 26, 27, 0,  1, 0, 4,  0, 4,  0,  0,  26, 26, 0,
       3, 20, 21, 0, 6, 0, 7,  11, 2,  0, 8, 0,  2, 16, 11, 2,  17, 7},
      {runtime[4], runtime[18], runtime[22], runtime[23], runtime[48],
       runtime[54], 1, 4, 2, 3, 5},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 24, 24, 26, 26, 26, 26, 28, 28, 32, 32, 31, 31,
        31, 21, 21, 19, 19, 18, 18, 17, 17, 16, 16, 17, 18, 15,
        15, 13, 13, 12, 12, 11, 11, 12, 13, 10, 10, 10, 15, 1,
        1,  3,  3,  3,  3,  6,  6,  5,  5,  5,  0,  0,  8,  0},
       {22, 22, 24, 24, 26, 26, 26, 26, 29, 29, 32, 32, 31, 31,
        31, 33, 33, 19, 19, 18, 18, 17, 17, 16, 16, 17, 18, 15,
        15, 13, 13, 12, 12, 11, 11, 12, 13, 10, 10, 10, 15, 1,
        1,  3,  3,  3,  3,  6,  6,  5,  5,  5,  7,  7,  20, 7}},
      std::make_shared<Array>(U"⟨1‿4,⥊2⟩((∾⋆⌜⌜)≡⋆⌜○∾)⟨2‿3‿4,⟨⟩,⥊5⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6‿3⥊0)≡∾⟨2‿3,3,3‿3⟩⥊¨0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(6‿3⥊0)≡∾⟨2‿3,3,3‿3⟩⥊¨0");
  CompileParams p(
      {0,  6, 0,  3, 0, 1,  26, 0, 7, 0, 5, 11, 2, 0, 5, 0, 5,  0, 5,  11, 2,
       11, 3, 17, 0, 2, 16, 0,  0, 0, 6, 0, 1,  0, 4, 0, 5, 11, 2, 17, 17, 7},
      {runtime[18], runtime[22], runtime[23], runtime[47], 6, 3, 0, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 21, 21, 20, 20, 21, 10, 10, 12, 12, 12, 12, 14,
        14, 16, 16, 18, 18, 18, 18, 9,  9,  20, 8,  8,  8,  7,
        7,  5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  7,  0},
       {22, 22, 21, 21, 20, 20, 21, 10, 10, 12, 12, 12, 12, 14,
        14, 16, 16, 18, 18, 18, 18, 19, 19, 21, 8,  8,  8,  7,
        7,  5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  7,  6}},
      std::make_shared<Array>(U"(6‿3⥊0)≡∾⟨2‿3,3,3‿3⟩⥊¨0"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\"≡\"abc\"∾'d'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"≡\"abc\"∾'d'");
  CompileParams p({0, 2, 0, 1, 0, 4, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[23], std::make_shared<Character>(U'd'),
                   std::make_shared<Array>(U"abcd"),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{13, 13, 12, 12, 7, 7, 12, 6, 6, 0, 0, 6, 0},
                   {15, 15, 12, 12, 11, 11, 12, 6, 6, 5, 5, 6, 5}},
                  std::make_shared<Array>(U"\"abcd\"≡\"abc\"∾\'d\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\"≡\"abc\"∾<'d'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"≡\"abc\"∾<'d'");
  CompileParams p(
      {0, 3, 0, 0, 16, 0, 2, 0, 5, 17, 0, 1, 0, 4, 17, 7},
      {runtime[12], runtime[18], runtime[23], std::make_shared<Character>(U'd'),
       std::make_shared<Array>(U"abcd"), std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{14, 14, 13, 13, 13, 12, 12, 7, 7, 12, 6, 6, 0, 0, 6, 0},
       {16, 16, 13, 13, 13, 12, 12, 11, 11, 12, 6, 6, 5, 5, 6, 5}},
      std::make_shared<Array>(U"\"abcd\"≡\"abc\"∾<\'d\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕4‿3)≡(↕3‿3)∾3∾¨↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕4‿3)≡(↕3‿3)∾3∾¨↕3");
  CompileParams p({0, 5, 0, 2, 16, 0,  3,  0, 1, 26, 0,  5,  17,
                   0, 1, 0, 5, 0,  5,  11, 2, 0, 2,  16, 17, 0,
                   0, 0, 4, 0, 5,  11, 2,  0, 2, 16, 17, 7},
                  {runtime[18], runtime[23], runtime[28], runtime[47], 4, 3},
                  {{0, 1, 0}}, {{0, 0}},
                  {{18, 18, 17, 17, 17, 16, 16, 15, 15, 16, 14, 14, 15,
                    13, 13, 9,  9,  11, 11, 11, 11, 8,  8,  8,  13, 6,
                    6,  2,  2,  4,  4,  4,  4,  1,  1,  1,  6,  0},
                   {18, 18, 17, 17, 17, 16, 16, 15, 15, 16, 14, 14, 16,
                    13, 13, 9,  9,  11, 11, 11, 11, 8,  8,  8,  13, 6,
                    6,  2,  2,  4,  4,  4,  4,  1,  1,  1,  6,  5}},
                  std::make_shared<Array>(U"(↕4‿3)≡(↕3‿3)∾3∾¨↕3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾˜≡·¯1⊸(×´∘↓∾↑)∘≢⊸⥊≍˜)2‿3⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾˜≡·¯1⊸(×´∘↓∾↑)∘≢⊸⥊≍˜)2‿3⥊\"abcdef\"");
  CompileParams p(
      {0,  15, 0,  3, 0,  13, 0,  14, 11, 2, 17, 0, 8,  0, 5, 26, 0,  3,  0,
       11, 0,  2,  0, 10, 0,  6,  0,  4,  0, 7,  0, 10, 0, 9, 0,  0,  26, 27,
       21, 0,  11, 0, 12, 27, 27, 27, 20, 0, 1,  0, 8,  0, 4, 26, 21, 16, 7},
      {runtime[2], runtime[18], runtime[19], runtime[22], runtime[23],
       runtime[24], runtime[26], runtime[27], runtime[45], runtime[50],
       runtime[53], runtime[55], -1, 2, 3, std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}}, {{0, 0}},
      {{27, 27, 26, 26, 23, 23, 25, 25, 25, 25, 26, 21, 21, 20, 20,
        21, 19, 19, 18, 18, 17, 17, 16, 16, 14, 14, 13, 13, 12, 12,
        11, 11, 10, 10, 9,  9,  10, 11, 13, 7,  7,  5,  5,  7,  16,
        18, 5,  3,  3,  2,  2,  1,  1,  2,  3,  0,  0},
       {34, 34, 26, 26, 23, 23, 25, 25, 25, 25, 26, 21, 21, 20, 20,
        21, 19, 19, 18, 18, 17, 17, 16, 16, 14, 14, 13, 13, 12, 12,
        11, 11, 10, 10, 9,  9,  10, 11, 13, 7,  7,  6,  6,  7,  16,
        18, 19, 3,  3,  2,  2,  1,  1,  2,  3,  22, 22}},
      std::make_shared<Array>(U"(∾˜≡·-1⊸(×´∘↓∾↑)∘≢⊸⥊≍˜)2‿3⥊\"abcdef\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾´≡∾)⟨3‿2‿1,0‿2‿1⟩⥊¨<↕6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾´≡∾)⟨3‿2‿1,0‿2‿1⟩⥊¨<↕6");
  CompileParams p({0, 11, 0, 4, 16, 0, 0, 16, 0, 5, 0,  2,  26, 0, 7,
                   0, 8,  0, 9, 11, 3, 0, 10, 0, 8, 0,  9,  11, 3, 11,
                   2, 17, 0, 3, 0,  1, 0, 6,  0, 3, 26, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[23],
                   runtime[28], runtime[47], runtime[50], 3, 2, 1, 0, 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 19, 19, 20, 7,  7,
                    9,  9,  11, 11, 11, 11, 13, 13, 15, 15, 17, 17, 17, 17, 6,
                    6,  19, 4,  4,  3,  3,  2,  2,  1,  1,  2,  3,  0,  0},
                   {23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 19, 19, 20, 7,  7,
                    9,  9,  11, 11, 11, 11, 13, 13, 15, 15, 17, 17, 17, 17, 18,
                    18, 20, 4,  4,  3,  3,  2,  2,  1,  1,  2,  3,  5,  5}},
                  std::make_shared<Array>(U"(∾´≡∾)⟨3‿2‿1,0‿2‿1⟩⥊¨<↕6"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1‿2,⥊0,⥊3⟩≡⊔1‿0‿0‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿2,⥊0,⥊3⟩≡⊔1‿0‿0‿2");
  CompileParams p(
      {0, 3,  0, 5, 0, 5, 0, 4,  11, 4, 0, 2, 16, 0,  0, 0,  3, 0,
       4, 11, 2, 0, 5, 0, 1, 16, 0,  6, 0, 1, 16, 11, 3, 17, 7},
      {runtime[18], runtime[22], runtime[42], 1, 2, 0, 3}, {{0, 1, 0}},
      {{0, 0}},
      {{13, 13, 15, 15, 17, 17, 19, 19, 19, 19, 12, 12, 12, 11, 11, 1,  1, 3,
        3,  3,  3,  6,  6,  5,  5,  5,  9,  9,  8,  8,  8,  0,  0,  11, 0},
       {13, 13, 15, 15, 17, 17, 19, 19, 19, 19, 12, 12, 12, 11, 11, 1,  1, 3,
        3,  3,  3,  6,  6,  5,  5,  5,  9,  9,  8,  8,  8,  10, 10, 11, 10}},
      std::make_shared<Array>(U"⟨1‿2,⥊0,⥊3⟩≡⊔1‿0‿0‿2"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡⊔5⥊¯1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡⊔5⥊¯1");
  CompileParams p({0, 4, 0, 1, 0, 3, 17, 0, 2, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[22], runtime[42], 5, -1}, {{0, 1, 0}},
                  {{0, 0}},
                  {{6, 6, 5, 5, 4, 4, 5, 3, 3, 3, 2, 2, 0, 0, 2, 0},
                   {7, 7, 5, 5, 4, 4, 5, 3, 3, 3, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"⟨⟩≡⊔5⥊-1"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⊔⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⊔⟨⟩");
  CompileParams p(
      {11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[42], runtime[56]}, {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜⊔⟨⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊔≡⥊¨¨∘⊔∘⊑)⟨1‿0‿0‿2⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊔≡⥊¨¨∘⊔∘⊑)⟨1‿0‿0‿2⟩");
  CompileParams p(
      {0, 6, 0, 7, 0, 7, 0, 8,  11, 4,  11, 1, 0, 2, 0, 5,  0,  3, 0,
       5, 0, 4, 0, 4, 0, 1, 26, 26, 27, 27, 0, 0, 0, 3, 21, 16, 7},
      {runtime[18], runtime[22], runtime[37], runtime[42], runtime[47],
       runtime[53], 1, 0, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{12, 12, 14, 14, 16, 16, 18, 18, 18, 18, 11, 11, 9, 9, 8, 8, 7, 7, 6,
        6,  5,  5,  4,  4,  3,  3,  4,  5,  6,  8,  2,  2, 1, 1, 2, 0, 0},
       {12, 12, 14, 14, 16, 16, 18, 18, 18, 18, 19, 19, 9, 9, 8, 8, 7,  7, 6,
        6,  5,  5,  4,  4,  3,  3,  4,  5,  6,  8,  2,  2, 1, 1, 2, 10, 10}},
      std::make_shared<Array>(U"(⊔≡⥊¨¨∘⊔∘⊑)⟨1‿0‿0‿2⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍⍟2∘<¨⌽↕3‿2)≡⊔⟨2‿1‿0,0‿1⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍⍟2∘<¨⌽↕3‿2)≡⊔⟨2‿1‿0,0‿1⟩");
  CompileParams p(
      {0, 9,  0, 11, 0, 12, 11, 3, 0,  12, 0, 11, 11, 2,  11, 2,  0,
       5, 16, 0, 1,  0, 10, 0,  9, 11, 2,  0, 3,  16, 0,  4,  16, 0,
       6, 0,  0, 0,  7, 0,  9,  0, 8,  0,  2, 27, 27, 26, 16, 17, 7},
      {runtime[12], runtime[18], runtime[24], runtime[28], runtime[31],
       runtime[42], runtime[47], runtime[53], runtime[62], 2, 3, 1, 0},
      {{0, 1, 0}}, {{0, 0}},
      {{16, 16, 18, 18, 20, 20, 20, 20, 22, 22, 24, 24, 24, 24, 15, 15, 14,
        14, 14, 13, 13, 9,  9,  11, 11, 11, 11, 8,  8,  8,  7,  7,  7,  6,
        6,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  6,  1,  13, 0},
       {16, 16, 18, 18, 20, 20, 20, 20, 22, 22, 24, 24, 24, 24, 25, 25, 14,
        14, 14, 13, 13, 9,  9,  11, 11, 11, 11, 8,  8,  8,  7,  7,  7,  6,
        6,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  6,  6,  13, 12}},
      std::make_shared<Array>(U"(≍⍟2∘<¨⌽↕3‿2)≡⊔⟨2‿1‿0,0‿1⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕0‿0)≡⊔⟨⟩‿⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕0‿0)≡⊔⟨⟩‿⟨⟩");
  CompileParams p(
      {11, 0, 11, 0, 11, 2, 0, 2, 16, 0, 0, 0, 3, 0, 3, 11, 2, 0, 1, 16, 17, 7},
      {runtime[18], runtime[28], runtime[42], 0}, {{0, 1, 0}}, {{0, 0}},
      {{8, 8, 11, 11, 11, 11, 7, 7, 7, 6, 6, 2, 2, 4, 4, 4, 4, 1, 1, 1, 6, 0},
       {9, 9, 12, 12, 12, 12, 7, 7, 7, 6, 6, 2, 2, 4, 4, 4, 4, 1, 1, 1, 6, 5}},
      std::make_shared<Array>(U"(↕0‿0)≡⊔⟨⟩‿⟨⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊔≡·≍⍟2∘<·∾⌜´/∘(0⊸=)¨)⟨0‿¯1‿0‿0,¯1‿0‿0⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊔≡·≍⍟2∘<·∾⌜´/∘(0⊸=)¨)⟨0‿¯1‿0‿0,¯1‿0‿0⟩");
  CompileParams p(
      {0,  14, 0,  15, 0, 14, 0,  14, 11, 4,  0,  15, 0,  14, 0,  14,
       11, 3,  11, 2,  0, 7,  0,  1,  0,  11, 0,  14, 27, 0,  10, 0,
       5,  27, 26, 0,  9, 0,  8,  0,  3,  26, 26, 20, 0,  0,  0,  10,
       0,  13, 0,  12, 0, 4,  27, 27, 20, 0,  2,  0,  6,  21, 16, 7},
      {runtime[12], runtime[15], runtime[18], runtime[23], runtime[24],
       runtime[33], runtime[42], runtime[47], runtime[48], runtime[50],
       runtime[53], runtime[55], runtime[62], 2, 0, -1},
      {{0, 1, 0}}, {{0, 0}},
      {{23, 23, 25, 25, 28, 28, 30, 30, 30, 30, 32, 32, 35, 35, 37, 37,
        37, 37, 22, 22, 20, 20, 18, 18, 17, 17, 16, 16, 17, 14, 14, 13,
        13, 14, 20, 12, 12, 11, 11, 10, 10, 11, 12, 10, 8,  8,  7,  7,
        6,  6,  5,  5,  4,  4,  5,  7,  4,  2,  2,  1,  1,  2,  0,  0},
       {23, 23, 26, 26, 28, 28, 30, 30, 30, 30, 33, 33, 35, 35, 37, 37,
        37, 37, 38, 38, 20, 20, 18, 18, 17, 17, 16, 16, 17, 14, 14, 13,
        13, 14, 20, 12, 12, 11, 11, 10, 10, 11, 12, 12, 8,  8,  7,  7,
        6,  6,  5,  5,  4,  4,  5,  7,  8,  2,  2,  1,  1,  2,  21, 21}},
      std::make_shared<Array>(U"(⊔≡·≍⍟2∘<·∾⌜´/∘(0⊸=)¨)⟨0‿-1‿0‿0,-1‿0‿0⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿0‿1↑⌜≍⍟2∘<∘⥊¨1‿0)≡⊔⟨2,1‿0⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿0‿1↑⌜≍⍟2∘<∘⥊¨1‿0)≡⊔⟨2,1‿0⟩");
  CompileParams p({0, 12, 0,  11, 0,  10, 11, 2,  11, 2,  0,  5,  16, 0, 1,
                   0, 11, 0,  10, 11, 2,  0,  6,  0,  2,  0,  8,  0,  0, 0,
                   8, 0,  12, 0,  9,  0,  3,  27, 27, 27, 26, 16, 0,  7, 0,
                   4, 26, 0,  10, 0,  10, 0,  11, 11, 3,  17, 17, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[24],
                   runtime[26], runtime[42], runtime[47], runtime[48],
                   runtime[53], runtime[62], 0, 1, 2},
                  {{0, 1, 0}}, {{0, 0}},
                  {{23, 23, 25, 25, 27, 27, 27, 27, 22, 22, 21, 21, 21, 20, 20,
                    16, 16, 18, 18, 18, 18, 15, 15, 14, 14, 13, 13, 12, 12, 11,
                    11, 10, 10, 9,  9,  8,  8,  9,  11, 13, 15, 8,  7,  7,  6,
                    6,  7,  1,  1,  3,  3,  5,  5,  5,  5,  6,  20, 0},
                   {23, 23, 25, 25, 27, 27, 27, 27, 28, 28, 21, 21, 21, 20, 20,
                    16, 16, 18, 18, 18, 18, 15, 15, 14, 14, 13, 13, 12, 12, 11,
                    11, 10, 10, 9,  9,  8,  8,  9,  11, 13, 15, 15, 7,  7,  6,
                    6,  7,  1,  1,  3,  3,  5,  5,  5,  5,  7,  20, 19}},
                  std::make_shared<Array>(U"(0‿0‿1↑⌜≍⍟2∘<∘⥊¨1‿0)≡⊔⟨2,1‿0⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿0‿1↑⌜≍⍟2∘(<0‿0‿0⊸∾)¨1‿0)≡⊔0‿0⊸↓¨⟨2,1‿0⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿0‿1↑⌜≍⍟2∘(<0‿0‿0⊸∾)¨1‿0)≡⊔0‿0⊸↓¨⟨2,1‿0⟩");
  CompileParams p(
      {0,  14, 0,  13, 0,  12, 11, 2,  11, 2,  0,  7,  0,  5,  0,  10, 0,
       12, 0,  12, 11, 2,  27, 26, 16, 0,  6,  16, 0,  1,  0,  13, 0,  12,
       11, 2,  0,  7,  0,  2,  0,  10, 0,  12, 0,  12, 0,  12, 11, 3,  27,
       0,  0,  20, 0,  9,  0,  14, 0,  11, 0,  3,  27, 27, 26, 16, 0,  8,
       0,  4,  26, 0,  12, 0,  12, 0,  13, 11, 3,  17, 17, 7},
      {runtime[12], runtime[18], runtime[23], runtime[24], runtime[26],
       runtime[27], runtime[42], runtime[47], runtime[48], runtime[53],
       runtime[55], runtime[62], 0, 1, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{36, 36, 38, 38, 40, 40, 40, 40, 35, 35, 34, 34, 33, 33, 32, 32, 29,
        29, 31, 31, 31, 31, 32, 34, 31, 28, 28, 28, 27, 27, 23, 23, 25, 25,
        25, 25, 22, 22, 20, 20, 19, 19, 14, 14, 16, 16, 18, 18, 18, 18, 19,
        13, 13, 13, 11, 11, 10, 10, 9,  9,  8,  8,  9,  11, 22, 8,  7,  7,
        6,  6,  7,  1,  1,  3,  3,  5,  5,  5,  5,  6,  27, 0},
       {36, 36, 38, 38, 40, 40, 40, 40, 41, 41, 34, 34, 33, 33, 32, 32, 29,
        29, 31, 31, 31, 31, 32, 34, 34, 28, 28, 28, 27, 27, 23, 23, 25, 25,
        25, 25, 22, 22, 20, 20, 19, 19, 14, 14, 16, 16, 18, 18, 18, 18, 19,
        13, 13, 13, 11, 11, 10, 10, 9,  9,  8,  8,  9,  11, 22, 22, 7,  7,
        6,  6,  7,  1,  1,  3,  3,  5,  5,  5,  5,  7,  27, 26}},
      std::make_shared<Array>(U"(0‿0‿1↑⌜≍⍟2∘(<0‿0‿0⊸∾)¨1‿0)≡⊔0‿0⊸↓¨⟨2,1‿0⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4‿3‿2(⋈≡·(≠¨⋈∾)/⊸⊔)\"abcdefghi\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4‿3‿2(⋈≡·(≠¨⋈∾)/⊸⊔)\"abcdefghi\"");
  CompileParams p(
      {0,  11, 0, 5, 0, 7, 0,  4, 27, 0, 2, 0, 3,  0,  6, 0,  0, 26,
       21, 20, 0, 1, 0, 3, 21, 0, 8,  0, 9, 0, 10, 11, 3, 17, 7},
      {runtime[14], runtime[18], runtime[23], runtime[25], runtime[33],
       runtime[42], runtime[47], runtime[55], 4, 3, 2,
       std::make_shared<Array>(U"abcdefghi")},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 17, 17, 16, 16, 15, 15, 16, 13, 13, 12, 12, 11, 11, 10, 10, 11,
        12, 9,  7,  7,  6,  6,  7,  0,  0,  2,  2,  4,  4,  4,  4,  5,  4},
       {29, 29, 17, 17, 16, 16, 15, 15, 16, 13, 13, 12, 12, 11, 11, 10, 10, 11,
        12, 14, 7,  7,  6,  6,  7,  0,  0,  2,  2,  4,  4,  4,  4,  18, 4}},
      std::make_shared<Array>(U"4‿3‿2(⋈≡·(≠¨⋈∾)/⊸⊔)\"abcdefghi\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡(3⥊¯1)⊔\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡(3⥊¯1)⊔\"abc\"");
  CompileParams p({0, 5, 0, 2, 0, 4, 0, 1, 0, 3, 17, 17, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[22], runtime[42], 3, -1,
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 9, 9, 6, 6, 5, 5, 4, 4, 5, 9, 2, 2, 0, 0, 2, 0},
                   {14, 14, 9, 9, 7, 7, 5, 5, 4, 4, 5, 9, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"⟨⟩≡(3⥊-1)⊔\"abc\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡(2⥊¯1)⊔\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡(2⥊¯1)⊔\"a\"");
  CompileParams p({0, 5, 0, 2, 0, 4, 0, 1, 0, 3, 17, 17, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[22], runtime[42], 2, -1,
                   std::make_shared<Array>(U"a")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 9, 9, 6, 6, 5, 5, 4, 4, 5, 9, 2, 2, 0, 0, 2, 0},
                   {12, 12, 9, 9, 7, 7, 5, 5, 4, 4, 5, 9, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"⟨⟩≡(2⥊-1)⊔\"a\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍˘1‿1‿4<∘⥊⎉1 16‿4+⌜↕4)≡2↓⟨3‿2,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(≍˘1‿1‿4<∘⥊⎉1 16‿4+⌜↕4)≡2↓⟨3‿2,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24");
  CompileParams p(
      {0,  19, 0,  6,  16, 0,  3,  0,  15, 0,  16, 0,  13, 11, 3,  17, 0,  7,
       0,  16, 0,  15, 11, 2,  0,  17, 0,  18, 0,  17, 11, 3,  11, 2,  17, 0,
       5,  0,  15, 17, 0,  2,  0,  13, 0,  6,  16, 0,  9,  0,  0,  26, 0,  14,
       0,  13, 11, 2,  17, 0,  12, 0,  11, 0,  3,  0,  10, 0,  1,  27, 27, 0,
       12, 0,  12, 0,  13, 11, 3,  17, 0,  8,  0,  4,  26, 16, 17, 7},
      {runtime[0],  runtime[12], runtime[18], runtime[22], runtime[24],
       runtime[27], runtime[28], runtime[42], runtime[46], runtime[48],
       runtime[53], runtime[60], 1,           4,           16,
       2,           3,           -1,          0,           24},
      {{0, 1, 0}}, {{0, 0}},
      {{47, 47, 46, 46, 46, 45, 45, 40, 40, 42, 42, 44, 44, 44, 44, 45, 39, 39,
        27, 27, 29, 29, 29, 29, 31, 31, 34, 34, 36, 36, 36, 36, 26, 26, 39, 25,
        25, 24, 24, 25, 23, 23, 21, 21, 20, 20, 20, 19, 19, 18, 18, 19, 14, 14,
        17, 17, 17, 17, 18, 12, 12, 11, 11, 10, 10, 9,  9,  8,  8,  9,  11, 3,
        3,  5,  5,  7,  7,  7,  7,  8,  2,  2,  1,  1,  2,  1,  23, 0},
       {48, 48, 46, 46, 46, 45, 45, 40, 40, 42, 42, 44, 44, 44, 44, 45, 39, 39,
        27, 27, 29, 29, 29, 29, 32, 32, 34, 34, 37, 37, 37, 37, 38, 38, 39, 25,
        25, 24, 24, 25, 23, 23, 21, 21, 20, 20, 20, 19, 19, 18, 18, 19, 15, 15,
        17, 17, 17, 17, 19, 12, 12, 11, 11, 10, 10, 9,  9,  8,  8,  9,  11, 3,
        3,  5,  5,  7,  7,  7,  7,  12, 2,  2,  1,  1,  2,  2,  23, 22}},
      std::make_shared<Array>(
          U"(≍˘1‿1‿4<∘⥊⎉1 16‿4+⌜↕4)≡2↓⟨3‿2,-1‿0‿-1⟩⊔2‿3‿4⥊↕24"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⥊⚇0⊸≡○⊔⟜(⥊<)1‿2‿2‿¯1‿0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⥊⚇0⊸≡○⊔⟜(⥊<)1‿2‿2‿¯1‿0");
  CompileParams p(
      {0, 9, 0, 10, 0, 10, 0, 11, 0, 8, 11, 5, 0, 0,  0,  2,  20, 0,  6, 0,
       3, 0, 4, 0,  1, 0,  5, 0,  8, 0, 7,  0, 2, 27, 27, 27, 27, 16, 7},
      {runtime[12], runtime[18], runtime[22], runtime[42], runtime[54],
       runtime[55], runtime[56], runtime[61], 0, 1, 2, -1},
      {{0, 1, 0}}, {{0, 0}},
      {{12, 12, 14, 14, 16, 16, 18, 18, 21, 21, 21, 21, 10,
        10, 9,  9,  9,  7,  7,  6,  6,  5,  5,  4,  4,  3,
        3,  2,  2,  1,  1,  0,  0,  1,  3,  5,  7,  0,  0},
       {12, 12, 14, 14, 16, 16, 19, 19, 21, 21, 21, 21, 10,
        10, 9,  9,  9,  7,  7,  6,  6,  5,  5,  4,  4,  3,
        3,  2,  2,  1,  1,  0,  0,  1,  3,  5,  7,  11, 0}},
      std::make_shared<Array>(U"⥊⚇0⊸≡○⊔⟜(⥊<)1‿2‿2‿-1‿0"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾↕¨∘≢⊸⊔)⊸≡ 3‿2‿4⥊↕24") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾↕¨∘≢⊸⊔)⊸≡ 3‿2‿4⥊↕24");
  CompileParams p(
      {0, 12, 0, 4, 16, 0, 2, 0, 9, 0, 10, 0,  11, 11, 3, 17, 0,  0,  0,  8, 0,
       5, 0,  8, 0, 1,  0, 7, 0, 6, 0, 4,  26, 27, 27, 0, 3,  20, 27, 16, 7},
      {runtime[18], runtime[19], runtime[22], runtime[23], runtime[28],
       runtime[42], runtime[47], runtime[53], runtime[55], 3, 2, 4, 24},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 18, 18, 18, 17, 17, 12, 12, 14, 14, 16, 16, 16,
        16, 17, 10, 10, 9,  9,  7,  7,  6,  6,  5,  5,  4,  4,
        3,  3,  2,  2,  3,  4,  6,  1,  1,  1,  9,  0,  0},
       {20, 20, 18, 18, 18, 17, 17, 12, 12, 14, 14, 16, 16, 16,
        16, 17, 10, 10, 9,  9,  7,  7,  6,  6,  5,  5,  4,  4,
        3,  3,  2,  2,  3,  4,  6,  1,  1,  1,  9,  10, 8}},
      std::make_shared<Array>(U"(∾↕¨∘≢⊸⊔)⊸≡ 3‿2‿4⥊↕24"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("-⟜'a'⊸(⊔≡⊔○⥊)\"acc\"≍\"bac\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-⟜'a'⊸(⊔≡⊔○⥊)\"acc\"≍\"bac\"");
  CompileParams p(
      {0, 10, 0,  3, 0, 9, 17, 0, 2, 0, 5, 0,  4,  27, 0, 1,
       0, 4,  21, 0, 6, 0, 8,  0, 7, 0, 0, 27, 27, 16, 7},
      {runtime[1], runtime[18], runtime[22], runtime[24], runtime[42],
       runtime[54], runtime[55], runtime[56], std::make_shared<Character>(U'a'),
       std::make_shared<Array>(U"acc"), std::make_shared<Array>(U"bac")},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 18, 18, 13, 13, 18, 11, 11, 10, 10, 9, 9, 10, 8, 8,
        7,  7,  8,  5,  5,  2,  2,  1,  1,  0,  0,  1, 5, 0,  0},
       {23, 23, 18, 18, 17, 17, 18, 11, 11, 10, 10, 9, 9, 10, 8, 8,
        7,  7,  8,  5,  5,  4,  4,  1,  1,  0,  0,  1, 5, 12, 0}},
      std::make_shared<Array>(U"-⟜\'a\'⊸(⊔≡⊔○⥊)\"acc\"≍\"bac\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‿1/⟨↕0‿1,1‿1⥊3⟩)≡2⊔⥊3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿1/⟨↕0‿1,1‿1⥊3⟩)≡2⊔⥊3");
  CompileParams p(
      {0, 8,  0,  1, 16, 0,  4, 0, 5, 17, 0,  0, 0,  7,  0,
       6, 11, 2,  0, 2,  16, 0, 8, 0, 1,  0,  6, 0,  6,  11,
       2, 17, 11, 2, 0,  3,  0, 5, 0, 6,  11, 2, 17, 17, 7},
      {runtime[18], runtime[22], runtime[28], runtime[33], runtime[42], 2, 1, 0,
       3},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 21, 21, 21, 20, 20, 19, 19, 20, 18, 18, 7,  7,  9,
        9,  9,  9,  6,  6,  6,  15, 15, 14, 14, 11, 11, 13, 13, 13,
        13, 14, 5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  18, 0},
       {22, 22, 21, 21, 21, 20, 20, 19, 19, 20, 18, 18, 7,  7,  9,
        9,  9,  9,  6,  6,  6,  15, 15, 14, 14, 11, 11, 13, 13, 13,
        13, 14, 16, 16, 4,  4,  1,  1,  3,  3,  3,  3,  4,  18, 17}},
      std::make_shared<Array>(U"(2‿1/⟨↕0‿1,1‿1⥊3⟩)≡2⊔⥊3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((<=·↕1⊸+)≡·≢¨<¨⊸⊔⟜(<@))2‿1‿3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((<=·↕1⊸+)≡·≢¨<¨⊸⊔⟜(<@))2‿1‿3");
  CompileParams p(
      {0, 11, 0, 10, 0,  12, 11, 3,  0, 13, 0, 1, 16, 0,  9,  0, 6, 0,
       8, 0,  7, 0,  1,  26, 27, 27, 0, 7,  0, 4, 26, 20, 0,  3, 0, 0,
       0, 8,  0, 10, 27, 0,  5,  20, 0, 2,  0, 1, 21, 21, 16, 7},
      {runtime[0], runtime[12], runtime[15], runtime[18], runtime[19],
       runtime[28], runtime[42], runtime[47], runtime[55], runtime[56], 1, 2, 3,
       std::make_shared<Character>(U'\0')},
      {{0, 1, 0}}, {{0, 0}},
      {{24, 24, 26, 26, 28, 28, 28, 28, 21, 21, 20, 20, 20, 18, 18, 17, 17, 16,
        16, 15, 15, 14, 14, 15, 16, 18, 13, 13, 12, 12, 13, 12, 10, 10, 8,  8,
        7,  7,  6,  6,  7,  5,  5,  5,  3,  3,  2,  2,  3,  10, 0,  0},
       {24, 24, 26, 26, 28, 28, 28, 28, 21, 21, 20, 20, 20, 18, 18, 17, 17, 16,
        16, 15, 15, 14, 14, 15, 16, 18, 13, 13, 12, 12, 13, 13, 10, 10, 8,  8,
        7,  7,  6,  6,  7,  5,  5,  5,  3,  3,  2,  2,  3,  10, 23, 23}},
      std::make_shared<Array>(U"((<=·↕1⊸+)≡·≢¨<¨⊸⊔⟜(<@))2‿1‿3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1‿3/⟨\"a\",\"\"⟩)≡0‿¯1‿4⊔\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1‿3/⟨\"a\",\"\"⟩)≡0‿¯1‿4⊔\"ab\"");
  CompileParams p(
      {0, 10, 0, 2,  0, 5, 0, 6, 0, 7, 11, 3,  17, 0,  0,  0,
       8, 0,  9, 11, 2, 0, 1, 0, 3, 0, 4,  11, 2,  17, 17, 7},
      {runtime[18], runtime[33], runtime[42], 1, 3, 0, -1, 4,
       std::make_shared<Array>(U"a"), std::make_shared<Array>(U""),
       std::make_shared<Array>(U"ab")},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 21, 21, 15, 15, 17, 17, 20, 20, 20, 20, 21, 14, 14, 6,
        6,  10, 10, 5,  5,  4,  4,  1,  1,  3,  3,  3,  3,  4,  14, 0},
       {25, 25, 21, 21, 15, 15, 18, 18, 20, 20, 20, 20, 21, 14, 14, 8,
        8,  11, 11, 12, 12, 4,  4,  1,  1,  3,  3,  3,  3,  4,  14, 13}},
      std::make_shared<Array>(U"(1‿3/⟨\"a\",\"\"⟩)≡0‿-1‿4⊔\"ab\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1⊸↓⊸(≡○(⊔⟜\"ab\"))2‿3‿1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1⊸↓⊸(≡○(⊔⟜\"ab\"))2‿3‿1");
  CompileParams p(
      {0, 7, 0, 8,  0, 9, 11, 3, 0, 10, 0, 5, 0,  2,  27, 0,
       3, 0, 0, 27, 0, 4, 0,  1, 0, 4,  0, 6, 27, 27, 16, 7},
      {runtime[18], runtime[27], runtime[42], runtime[54], runtime[55],
       runtime[56], -1, 2, 3, 1, std::make_shared<Array>(U"ab")},
      {{0, 1, 0}}, {{0, 0}},
      {{17, 17, 19, 19, 21, 21, 21, 21, 11, 11, 10, 10, 9, 9, 10, 7,
        7,  6,  6,  7,  4,  4,  3,  3,  2,  2,  0,  0,  2, 4, 0,  0},
       {17, 17, 19, 19, 21, 21, 21, 21, 14, 14, 10, 10, 9, 9, 10, 7,
        7,  6,  6,  7,  4,  4,  3,  3,  2,  2,  1,  1,  2, 4, 16, 1}},
      std::make_shared<Array>(U"-1⊸↓⊸(≡○(⊔⟜\"ab\"))2‿3‿1"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍1‿1‿0≍∘/⟜≍¨\"bac\")≡⟨0,1‿0‿3⟩⊔\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍1‿1‿0≍∘/⟜≍¨\"bac\")≡⟨0,1‿0‿3⟩⊔\"ab\"");
  CompileParams p(
      {0,  11, 0, 3,  0, 8, 0, 7, 0,  8, 0,  9, 11, 3,  11, 2, 17,
       0,  0,  0, 10, 0, 4, 0, 1, 0,  6, 0,  2, 0,  5,  0,  1, 27,
       27, 26, 0, 7,  0, 7, 0, 8, 11, 3, 17, 0, 1,  16, 17, 7},
      {runtime[18], runtime[24], runtime[33], runtime[42], runtime[47],
       runtime[53], runtime[56], 1, 0, 3, std::make_shared<Array>(U"bac"),
       std::make_shared<Array>(U"ab")},
      {{0, 1, 0}}, {{0, 0}},
      {{30, 30, 29, 29, 21, 21, 23, 23, 25, 25, 27, 27, 27, 27, 20, 20, 29,
        19, 19, 13, 13, 12, 12, 11, 11, 10, 10, 9,  9,  8,  8,  7,  7,  8,
        10, 12, 2,  2,  4,  4,  6,  6,  6,  6,  7,  1,  1,  1,  19, 0},
       {33, 33, 29, 29, 21, 21, 23, 23, 25, 25, 27, 27, 27, 27, 28, 28, 29,
        19, 19, 17, 17, 12, 12, 11, 11, 10, 10, 9,  9,  8,  8,  7,  7,  8,
        10, 12, 2,  2,  4,  4,  6,  6,  6,  6,  12, 1,  1,  1,  19, 18}},
      std::make_shared<Array>(U"(≍1‿1‿0≍∘/⟜≍¨\"bac\")≡⟨0,1‿0‿3⟩⊔\"ab\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽˘≡·∾⟨2‿2,1‿0‿1⟩⊸⊔)\"ab\"≍\"cd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽˘≡·∾⟨2‿2,1‿0‿1⟩⊸⊔)\"ab\"≍\"cd\"");
  CompileParams p(
      {0, 11, 0,  2, 0,  10, 17, 0, 4, 0,  6, 0, 7, 0, 7, 11, 2,  0,  8,  0, 9,
       0, 8,  11, 3, 11, 2,  27, 0, 1, 20, 0, 0, 0, 5, 0, 3,  26, 21, 16, 7},
      {runtime[18], runtime[23], runtime[24], runtime[31], runtime[42],
       runtime[46], runtime[55], 2, 1, 0, std::make_shared<Array>(U"ab"),
       std::make_shared<Array>(U"cd")},
      {{0, 1, 0}}, {{0, 0}},
      {{25, 25, 24, 24, 20, 20, 24, 18, 18, 17, 17, 7, 7, 9,
        9,  9,  9,  11, 11, 13, 13, 15, 15, 15, 15, 6, 6, 17,
        5,  5,  5,  3,  3,  2,  2,  1,  1,  2,  3,  0, 0},
       {28, 28, 24, 24, 23, 23, 24, 18, 18, 17, 17, 7,  7,  9,
        9,  9,  9,  11, 11, 13, 13, 15, 15, 15, 15, 16, 16, 17,
        5,  5,  5,  3,  3,  2,  2,  1,  1,  2,  3,  19, 19}},
      std::make_shared<Array>(U"(⌽˘≡·∾⟨2‿2,1‿0‿1⟩⊸⊔)\"ab\"≍\"cd\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿0‿4≡\"abcd\"⊐\"cae\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿0‿4≡\"abcd\"⊐\"cae\"");
  CompileParams p(
      {0, 6, 0, 1, 0, 5, 17, 0, 0, 0, 2, 0, 3, 0, 4, 11, 3, 17, 7},
      {runtime[18], runtime[38], 2, 0, 4, std::make_shared<Array>(U"abcd"),
       std::make_shared<Array>(U"cae")},
      {{0, 1, 0}}, {{0, 0}},
      {{13, 13, 12, 12, 6, 6, 12, 5, 5, 0, 0, 2, 2, 4, 4, 4, 4, 5, 4},
       {17, 17, 12, 12, 11, 11, 12, 5, 5, 0, 0, 2, 2, 4, 4, 4, 4, 5, 4}},
      std::make_shared<Array>(U"2‿0‿4≡\"abcd\"⊐\"cae\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1⟩≡\"abcd\"⊐\"b\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1⟩≡\"abcd\"⊐\"b\"");
  CompileParams p({0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 11, 1, 17, 7},
                  {runtime[18], runtime[38], 1,
                   std::make_shared<Array>(U"abcd"),
                   std::make_shared<Array>(U"b")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{11, 11, 10, 10, 4, 4, 10, 3, 3, 1, 1, 0, 0, 3, 0},
                   {13, 13, 10, 10, 9, 9, 10, 3, 3, 1, 1, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"⟨1⟩≡\"abcd\"⊐\"b\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<2)≡\"cdef\"⊐'e'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<2)≡\"cdef\"⊐'e'");
  CompileParams p({0, 4, 0, 2, 0, 5, 17, 0, 1, 0, 3, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[18], runtime[38], 2,
                   std::make_shared<Character>(U'e'),
                   std::make_shared<Array>(U"cdef")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 11, 11, 5, 5, 11, 4, 4, 2, 2, 1, 1, 1, 4, 0},
                   {14, 14, 11, 11, 10, 10, 11, 4, 4, 2, 2, 1, 1, 1, 4, 3}},
                  std::make_shared<Array>(U"(<2)≡\"cdef\"⊐\'e\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<3)≡⊐⟜(3⊸⊏)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<3)≡⊐⟜(3⊸⊏)\"abcd\"");
  CompileParams p({0, 7,  0,  2, 0, 4, 0, 6, 27, 0,  5,  0,
                   3, 27, 16, 0, 1, 0, 6, 0, 0,  16, 17, 7},
                  {runtime[12], runtime[18], runtime[36], runtime[38],
                   runtime[55], runtime[56], 3,
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 10, 10, 9, 9, 8, 8, 9, 6, 6, 5,
                    5,  6,  5,  4,  4, 2, 2, 1, 1, 1, 4, 0},
                   {17, 17, 10, 10, 9, 9, 8, 8, 9, 6, 6, 5,
                    5,  6,  11, 4,  4, 2, 2, 1, 1, 1, 4, 3}},
                  std::make_shared<Array>(U"(<3)≡⊐⟜(3⊸⊏)\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(5⌊3+↕5)≡⊐⟜(3‿0‿0+⚇1⊢)↕5‿2‿1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(5⌊3+↕5)≡⊐⟜(3‿0‿0+⚇1⊢)↕5‿2‿1");
  CompileParams p(
      {0, 8,  0, 12, 0, 11, 11, 3,  0,  4, 16, 0, 3, 0, 11, 0,  7,  0,
       0, 27, 0, 9,  0, 10, 0,  10, 11, 3, 21, 0, 6, 0, 5,  27, 16, 0,
       2, 0,  8, 0,  4, 16, 0,  0,  0,  9, 17, 0, 1, 0, 8,  17, 17, 7},
      {runtime[0], runtime[6], runtime[18], runtime[21], runtime[28],
       runtime[38], runtime[56], runtime[61], 5, 3, 0, 1, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{23, 23, 25, 25, 27, 27, 27, 27, 22, 22, 22, 20, 20, 19, 19, 18, 18, 17,
        17, 18, 12, 12, 14, 14, 16, 16, 16, 16, 17, 10, 10, 9,  9,  10, 9,  8,
        8,  6,  6,  5,  5,  5,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  8,  0},
       {23, 23, 25, 25, 27, 27, 27, 27, 22, 22, 22, 20, 20, 19, 19, 18, 18, 17,
        17, 18, 12, 12, 14, 14, 16, 16, 16, 16, 19, 10, 10, 9,  9,  10, 21, 8,
        8,  6,  6,  5,  5,  5,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  8,  7}},
      std::make_shared<Array>(U"(5⌊3+↕5)≡⊐⟜(3‿0‿0+⚇1⊢)↕5‿2‿1"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿0‿1‿0‿2≡⊐\"ccacb\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿0‿1‿0‿2≡⊐\"ccacb\"");
  CompileParams p(
      {0, 5, 0, 1, 16, 0, 0, 0, 2, 0, 2, 0, 3, 0, 2, 0, 4, 11, 5, 17, 7},
      {runtime[18], runtime[38], 0, 1, 2, std::make_shared<Array>(U"ccacb")},
      {{0, 1, 0}}, {{0, 0}},
      {{11, 11, 10, 10, 10, 9, 9, 0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 8, 8, 9, 8},
       {17, 17, 10, 10, 10, 9, 9, 0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 8, 8, 9, 8}},
      std::make_shared<Array>(U"0‿0‿1‿0‿2≡⊐\"ccacb\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿0‿1‿0‿2≡⊐≍˜˘\"ccacb\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿0‿1‿0‿2≡⊐≍˜˘\"ccacb\"");
  CompileParams p({0, 8, 0, 4, 0, 3, 0, 1, 26, 26, 16, 0,  2, 16, 0,
                   0, 0, 5, 0, 5, 0, 6, 0, 5,  0,  7,  11, 5, 17, 7},
                  {runtime[18], runtime[24], runtime[38], runtime[45],
                   runtime[46], 0, 1, 2, std::make_shared<Array>(U"ccacb")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{14, 14, 13, 13, 12, 12, 11, 11, 12, 13, 11, 10, 10, 10, 9,
                    9,  0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  9,  8},
                   {20, 20, 13, 13, 12, 12, 11, 11, 12, 13, 13, 10, 10, 10, 9,
                    9,  0,  0,  2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  9,  8}},
                  std::make_shared<Array>(U"0‿0‿1‿0‿2≡⊐≍˜˘\"ccacb\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⊐⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⊐⟨⟩");
  CompileParams p(
      {11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[38], runtime[56]}, {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜⊐⟨⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿0‿0‿1≡\"acef\"∊\"adf\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿0‿0‿1≡\"acef\"∊\"adf\"");
  CompileParams p(
      {0, 5, 0, 1, 0, 4, 17, 0, 0, 0, 2, 0, 3, 0, 3, 0, 2, 11, 4, 17, 7},
      {runtime[18], runtime[40], 1, 0, std::make_shared<Array>(U"acef"),
       std::make_shared<Array>(U"adf")},
      {{0, 1, 0}}, {{0, 0}},
      {{15, 15, 14, 14, 8, 8, 14, 7, 7, 0, 0, 2, 2, 4, 4, 6, 6, 6, 6, 7, 6},
       {19, 19, 14, 14, 13, 13, 14, 7, 7, 0, 0, 2, 2, 4, 4, 6, 6, 6, 6, 7, 6}},
      std::make_shared<Array>(U"1‿0‿0‿1≡\"acef\"∊\"adf\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∊⟜(↕2)≡<⟜2)3⋆⌜○↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∊⟜(↕2)≡<⟜2)3⋆⌜○↕5");
  CompileParams p({0, 10, 0,  3, 0, 6, 0, 5,  0,  0,  26, 27, 0,
                   9, 17, 0,  8, 0, 7, 0, 1,  27, 0,  2,  0,  8,
                   0, 3,  16, 0, 7, 0, 4, 27, 21, 16, 7},
                  {runtime[4], runtime[12], runtime[18], runtime[28],
                   runtime[40], runtime[48], runtime[54], runtime[56], 2, 3, 5},
                  {{0, 1, 0}}, {{0, 0}},
                  {{17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 14, 15, 12,
                    12, 13, 10, 10, 9,  9,  8,  8,  9,  7,  7,  5,  5,
                    4,  4,  4,  2,  2,  1,  1,  2,  7,  0,  0},
                   {17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 14, 15, 12,
                    12, 16, 10, 10, 9,  9,  8,  8,  9,  7,  7,  5,  5,
                    4,  4,  4,  2,  2,  1,  1,  2,  7,  11, 11}},
                  std::make_shared<Array>(U"(∊⟜(↕2)≡<⟜2)3⋆⌜○↕5"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<1)≡3‿4‿5∊4+⌜○↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<1)≡3‿4‿5∊4+⌜○↕3");
  CompileParams p(
      {0, 8, 0, 3, 0,  6,  0, 5,  0, 0, 26, 27, 0, 9, 17, 0,  4, 0,
       8, 0, 9, 0, 10, 11, 3, 17, 0, 2, 0,  7,  0, 1, 16, 17, 7},
      {runtime[0], runtime[12], runtime[18], runtime[28], runtime[40],
       runtime[48], runtime[54], 1, 3, 4, 5},
      {{0, 1, 0}}, {{0, 0}},
      {{16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 13, 14, 11, 11, 12, 10, 10, 5,
        5,  7,  7,  9,  9,  9,  9,  10, 4,  4,  2,  2,  1,  1,  1,  4,  0},
       {16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 13, 14, 11, 11, 15, 10, 10, 5,
        5,  7,  7,  9,  9,  9,  9,  10, 4,  4,  2,  2,  1,  1,  1,  4,  3}},
      std::make_shared<Array>(U"(<1)≡3‿4‿5∊4+⌜○↕3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("('0'≠\"11010001\")≡∊\"abacbacd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "('0'≠\"11010001\")≡∊\"abacbacd\"");
  CompileParams p(
      {0, 5, 0, 2, 16, 0, 1, 0, 4, 0, 0, 0, 3, 17, 17, 7},
      {runtime[14], runtime[18], runtime[40], std::make_shared<Character>(U'0'),
       std::make_shared<Array>(U"11010001"),
       std::make_shared<Array>(U"abacbacd")},
      {{0, 1, 0}}, {{0, 0}},
      {{18, 18, 17, 17, 17, 16, 16, 5, 5, 4, 4, 1, 1, 4, 16, 0},
       {27, 27, 17, 17, 17, 16, 16, 14, 14, 4, 4, 3, 3, 4, 16, 15}},
      std::make_shared<Array>(U"(\'0\'≠\"11010001\")≡∊\"abacbacd\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↑⟜1≡⟜∊⥊⟜∞)9") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↑⟜1≡⟜∊⥊⟜∞)9");
  CompileParams p({0, 7, 0,  6, 0, 4, 0, 1, 27, 0,  3,  0,  4,
                   0, 0, 27, 0, 5, 0, 4, 0, 2,  27, 21, 16, 7},
                  {runtime[18], runtime[22], runtime[26], runtime[40],
                   runtime[56], 1, std::make_shared<Number>(1.0 / 0.0), 9},
                  {{0, 1, 0}}, {{0, 0}},
                  {{11, 11, 9, 9, 8, 8, 7, 7, 8, 6, 6, 5, 5,
                    4,  4,  5, 3, 3, 2, 2, 1, 1, 2, 4, 0, 0},
                   {11, 11, 9, 9, 8, 8, 7, 7, 8, 6, 6, 5,  5,
                    4,  4,  5, 3, 3, 2, 2, 1, 1, 2, 6, 10, 10}},
                  std::make_shared<Array>(U"(↑⟜1≡⟜∊⥊⟜∞)9"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⥊⟜1≡∊∘↕)6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⥊⟜1≡∊∘↕)6");
  CompileParams p(
      {0, 7, 0, 2, 0, 4, 0, 3, 27, 0, 0, 0, 6, 0, 5, 0, 1, 27, 21, 16, 7},
      {runtime[18], runtime[22], runtime[28], runtime[40], runtime[53],
       runtime[56], 1, 6},
      {{0, 1, 0}}, {{0, 0}},
      {{9, 9, 7, 7, 6, 6, 5, 5, 6, 4, 4, 3, 3, 2, 2, 1, 1, 2, 4, 0, 0},
       {9, 9, 7, 7, 6, 6, 5, 5, 6, 4, 4, 3, 3, 2, 2, 1, 1, 2, 4, 8, 8}},
      std::make_shared<Array>(U"(⥊⟜1≡∊∘↕)6"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜∊⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜∊⟨⟩");
  CompileParams p(
      {11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[40], runtime[56]}, {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜∊⟨⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡○∊⟜(≍˜˘)\"abcadbba\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡○∊⟜(≍˜˘)\"abcadbba\"");
  CompileParams p(
      {0, 7, 0, 4, 0, 3, 0, 1, 26, 26, 0, 6, 0, 2, 0, 5, 0, 0, 27, 27, 16, 7},
      {runtime[18], runtime[24], runtime[40], runtime[45], runtime[46],
       runtime[54], runtime[56], std::make_shared<Array>(U"abcadbba")},
      {{0, 1, 0}}, {{0, 0}},
      {{9, 9, 7, 7, 6, 6, 5, 5, 6, 7, 3, 3, 2, 2, 1, 1, 0, 0, 1, 3, 0, 0},
       {18, 18, 7, 7, 6, 6, 5, 5, 6, 7, 3, 3, 2, 2, 1, 1, 0, 0, 1, 3, 8, 0}},
      std::make_shared<Array>(U"≡○∊⟜(≍˜˘)\"abcadbba\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⍷⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⍷⟨⟩");
  CompileParams p(
      {11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[18], runtime[41], runtime[56]}, {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≡⟜⍷⟨⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ba\"≡⍷\"baa\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ba\"≡⍷\"baa\"");
  CompileParams p(
      {0, 3, 0, 1, 16, 0, 0, 0, 2, 17, 7},
      {runtime[18], runtime[41], std::make_shared<Array>(U"ba"),
       std::make_shared<Array>(U"baa")},
      {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 5, 5, 5, 4, 4, 0, 0, 4, 0}, {10, 10, 5, 5, 5, 4, 4, 3, 3, 4, 3}},
      std::make_shared<Array>(U"\"ba\"≡⍷\"baa\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿1‿0‿0≡\"abc\"⍷\"aabcba\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿1‿0‿0≡\"abc\"⍷\"aabcba\"");
  CompileParams p(
      {0, 5, 0, 1, 0, 4, 17, 0, 0, 0, 2, 0, 3, 0, 2, 0, 2, 11, 4, 17, 7},
      {runtime[18], runtime[41], 0, 1, std::make_shared<Array>(U"abc"),
       std::make_shared<Array>(U"aabcba")},
      {{0, 1, 0}}, {{0, 0}},
      {{14, 14, 13, 13, 8, 8, 13, 7, 7, 0, 0, 2, 2, 4, 4, 6, 6, 6, 6, 7, 6},
       {21, 21, 13, 13, 12, 12, 13, 7, 7, 0, 0, 2, 2, 4, 4, 6, 6, 6, 6, 7, 6}},
      std::make_shared<Array>(U"0‿1‿0‿0≡\"abc\"⍷\"aabcba\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿1≍0‿0)≡(1‿2≍4‿5)⍷3‿3⥊↕9") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿1≍0‿0)≡(1‿2≍4‿5)⍷3‿3⥊↕9");
  CompileParams p(
      {0, 11, 0, 3,  16, 0, 1, 0, 10, 0, 10, 11, 2,  17, 0,  4,  0,
       8, 0,  9, 11, 2,  0, 2, 0, 6,  0, 7,  11, 2,  17, 17, 0,  0,
       0, 5,  0, 5,  11, 2, 0, 2, 0,  5, 0,  6,  11, 2,  17, 17, 7},
      {runtime[18], runtime[22], runtime[24], runtime[28], runtime[41], 0, 1, 2,
       4, 5, 3, 9},
      {{0, 1, 0}}, {{0, 0}},
      {{25, 25, 24, 24, 24, 23, 23, 20, 20, 22, 22, 22, 22, 23, 19, 19, 15,
        15, 17, 17, 17, 17, 14, 14, 11, 11, 13, 13, 13, 13, 14, 19, 9,  9,
        5,  5,  7,  7,  7,  7,  4,  4,  1,  1,  3,  3,  3,  3,  4,  9,  0},
       {25, 25, 24, 24, 24, 23, 23, 20, 20, 22, 22, 22, 22, 23, 19, 19, 15,
        15, 17, 17, 17, 17, 14, 14, 11, 11, 13, 13, 13, 13, 14, 19, 9,  9,
        5,  5,  7,  7,  7,  7,  4,  4,  1,  1,  3,  3,  3,  3,  4,  9,  8}},
      std::make_shared<Array>(U"(0‿1≍0‿0)≡(1‿2≍4‿5)⍷3‿3⥊↕9"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕3‿0)≡⍷⟜(≍˘)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕3‿0)≡⍷⟜(≍˘)\"abc\"");
  CompileParams p({0, 8, 0, 4, 0, 1, 26, 0, 5, 0, 3,  27, 16,
                   0, 0, 0, 6, 0, 7, 11, 2, 0, 2, 16, 17, 7},
                  {runtime[18], runtime[24], runtime[28], runtime[41],
                   runtime[46], runtime[56], 3, 0,
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{13, 13, 11, 11, 10, 10, 11, 8, 8, 7, 7, 8, 7,
                    6,  6,  2,  2,  4,  4,  4,  4, 1, 1, 1, 6, 0},
                   {17, 17, 11, 11, 10, 10, 11, 8, 8, 7, 7, 8, 12,
                    6,  6,  2,  2,  4,  4,  4,  4, 1, 1, 1, 6, 5}},
                  std::make_shared<Array>(U"(↕3‿0)≡⍷⟜(≍˘)\"abc\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'(=≡⍷)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'(=≡⍷)\"abc\"");
  CompileParams p({0, 4, 0, 2, 0, 1, 0, 0, 21, 0, 3, 17, 7},
                  {runtime[15], runtime[18], runtime[41],
                   std::make_shared<Character>(U'a'),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{8, 8, 6, 6, 5, 5, 4, 4, 5, 0, 0, 3, 0},
                   {12, 12, 6, 6, 5, 5, 4, 4, 5, 2, 2, 7, 2}},
                  std::make_shared<Array>(U"\'a\'(=≡⍷)\"abc\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽¨≡⍉)↕2⥊3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽¨≡⍉)↕2⥊3");
  CompileParams p(
      {0, 7, 0, 1, 0, 6, 17, 0, 2, 16, 0, 4, 0, 0, 0, 5, 0, 3, 26, 21, 16, 7},
      {runtime[18], runtime[22], runtime[28], runtime[31], runtime[32],
       runtime[47], 2, 3},
      {{0, 1, 0}}, {{0, 0}},
      {{9, 9, 8, 8, 7, 7, 8, 6, 6, 6, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 0, 0},
       {9, 9, 8, 8, 7, 7, 8, 6, 6, 6, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 5, 5}},
      std::make_shared<Array>(U"(⌽¨≡⍉)↕2⥊3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍉≡<)'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍉≡<)'a'");
  CompileParams p(
      {0, 3, 0, 0, 0, 1, 0, 2, 21, 16, 7},
      {runtime[12], runtime[18], runtime[32],
       std::make_shared<Character>(U'a')},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 3, 3, 2, 2, 1, 1, 2, 0, 0}, {7, 7, 3, 3, 2, 2, 1, 1, 2, 4, 4}},
      std::make_shared<Array>(U"(⍉≡<)\'a\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´⍉⊸≡¨⟨<'a',\"a\",\"abc\",\"\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧´⍉⊸≡¨⟨<'a',\"a\",\"abc\",\"\"⟩");
  CompileParams p(
      {0, 7, 0, 1, 16, 0,  8,  0,  9, 0, 10, 11, 4,  0,  4, 0,
       2, 0, 6, 0, 3,  27, 26, 16, 0, 5, 0,  0,  26, 16, 7},
      {runtime[10], runtime[12], runtime[18], runtime[32], runtime[47],
       runtime[50], runtime[55], std::make_shared<Character>(U'a'),
       std::make_shared<Array>(U"a"), std::make_shared<Array>(U"abc"),
       std::make_shared<Array>(U"")},
      {{0, 1, 0}}, {{0, 0}},
      {{8, 8, 7, 7, 7, 12, 12, 16, 16, 22, 22, 6, 6, 5, 5, 4,
        4, 3, 3, 2, 2, 3,  5,  2,  1,  1,  0,  0, 1, 0, 0},
       {10, 10, 7, 7, 7, 14, 14, 20, 20, 23, 23, 24, 24, 5, 5, 4,
        4,  3,  3, 2, 2, 3,  5,  5,  1,  1,  0,  0,  1,  1, 0}},
      std::make_shared<Array>(U"∧´⍉⊸≡¨⟨<\'a\',\"a\",\"abc\",\"\"⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕4)(-˜⌜˜≡·⍉-⌜)↕3‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕4)(-˜⌜˜≡·⍉-⌜)↕3‿2");
  CompileParams p({0,  7,  0,  8,  11, 2, 0, 2, 16, 0,  5,  0, 0,
                   26, 0,  3,  20, 0,  1, 0, 4, 0,  5,  0,  4, 0,
                   0,  26, 26, 26, 21, 0, 6, 0, 2,  16, 17, 7},
                  {runtime[1], runtime[18], runtime[28], runtime[32],
                   runtime[45], runtime[48], 4, 3, 2},
                  {{0, 1, 0}}, {{0, 0}},
                  {{16, 16, 18, 18, 18, 18, 15, 15, 15, 13, 13, 12, 12,
                    13, 11, 11, 11, 9,  9,  8,  8,  7,  7,  6,  6,  5,
                    5,  6,  7,  8,  9,  2,  2,  1,  1,  1,  4,  0},
                   {16, 16, 18, 18, 18, 18, 15, 15, 15, 13, 13, 12, 12,
                    13, 11, 11, 11, 9,  9,  8,  8,  7,  7,  6,  6,  5,
                    5,  6,  7,  8,  9,  2,  2,  1,  1,  1,  14, 3}},
                  std::make_shared<Array>(U"(↕4)(-˜⌜˜≡·⍉-⌜)↕3‿2"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2×↕3)≡0‿0⍉6+⌜○↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2×↕3)≡0‿0⍉6+⌜○↕3");
  CompileParams p({0,  8,  0, 3, 0,  6, 0, 5, 0,  0,  26, 27, 0,
                   10, 17, 0, 4, 0,  9, 0, 9, 11, 2,  17, 0,  2,
                   0,  8,  0, 3, 16, 0, 1, 0, 7,  17, 17, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[28],
                   runtime[32], runtime[48], runtime[54], 2, 3, 0, 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 13, 14, 11,
                    11, 12, 10, 10, 7,  7,  9,  9,  9,  9,  10, 6,  6,
                    4,  4,  3,  3,  3,  2,  2,  1,  1,  2,  6,  0},
                   {16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 13, 14, 11,
                    11, 15, 10, 10, 7,  7,  9,  9,  9,  9,  10, 6,  6,
                    4,  4,  3,  3,  3,  2,  2,  1,  1,  2,  6,  5}},
                  std::make_shared<Array>(U"(2×↕3)≡0‿0⍉6+⌜○↕3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⍉≡<)4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⟨⟩⊸⍉≡<)4");
  CompileParams p({0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[32], runtime[55], 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{8, 8, 6, 6, 5, 5, 4, 4, 3, 3, 1, 1, 3, 5, 0, 0},
                   {8, 8, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 3, 5, 7, 7}},
                  std::make_shared<Array>(U"(⟨⟩⊸⍉≡<)4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(⍉≡⊢)<4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩(⍉≡⊢)<4");
  CompileParams p({0, 4, 0, 0, 16, 0, 2, 0, 1, 0, 3, 21, 11, 0, 17, 7},
                  {runtime[12], runtime[18], runtime[21], runtime[32], 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{8, 8, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 0, 0, 2, 0},
                   {8, 8, 7, 7, 7, 5, 5, 4, 4, 3, 3, 4, 1, 1, 6, 1}},
                  std::make_shared<Array>(U"⟨⟩(⍉≡⊢)<4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‿0‿1⥊⟨⟩)≡1‿2‿0‿1⍉↕↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿0‿1⥊⟨⟩)≡1‿2‿0‿1⍉↕↕4");
  CompileParams p(
      {0, 7,  0, 2, 16, 0, 2, 16, 0, 3, 0, 6, 0, 4, 0,  5, 0,  6,  11,
       4, 17, 0, 0, 11, 0, 0, 1,  0, 4, 0, 5, 0, 6, 11, 3, 17, 17, 7},
      {runtime[18], runtime[22], runtime[28], runtime[32], 2, 0, 1, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 11, 11, 13,
        13, 15, 15, 17, 17, 17, 17, 18, 10, 10, 7,  7,  6,
        6,  1,  1,  3,  3,  5,  5,  5,  5,  6,  10, 0},
       {21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 11, 11, 13,
        13, 15, 15, 17, 17, 17, 17, 18, 10, 10, 8,  8,  6,
        6,  1,  1,  3,  3,  5,  5,  5,  5,  6,  10, 9}},
      std::make_shared<Array>(U"(2‿0‿1⥊⟨⟩)≡1‿2‿0‿1⍉↕↕4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕1‿2‿0‿3)≡2<⊸⍉↕↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕1‿2‿0‿3)≡2<⊸⍉↕↕4");
  CompileParams p(
      {0, 9, 0, 2, 16, 0, 2, 16, 0, 3, 0,  4, 0, 0, 27, 0,  6, 17,
       0, 1, 0, 5, 0,  6, 0, 7,  0, 8, 11, 4, 0, 2, 16, 17, 7},
      {runtime[12], runtime[18], runtime[28], runtime[32], runtime[55], 1, 2, 0,
       3, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{17, 17, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 12, 12, 13, 11, 11, 12,
        10, 10, 2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  1,  1,  1,  10, 0},
       {17, 17, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 12, 12, 13, 11, 11, 14,
        10, 10, 2,  2,  4,  4,  6,  6,  8,  8,  8,  8,  1,  1,  1,  10, 9}},
      std::make_shared<Array>(U"(↕1‿2‿0‿3)≡2<⊸⍉↕↕4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0⊸⍉⊸≡2‿3⥊↕6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0⊸⍉⊸≡2‿3⥊↕6");
  CompileParams p({0, 8, 0, 2, 16, 0, 1, 0, 6, 0, 7,  11, 2,  17,
                   0, 0, 0, 4, 0,  3, 0, 4, 0, 5, 27, 27, 16, 7},
                  {runtime[18], runtime[22], runtime[28], runtime[32],
                   runtime[55], 0, 2, 3, 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 9, 9, 9, 8, 8, 5, 5, 7, 7, 7, 7, 8,
                    4,  4,  3, 3, 2, 2, 1, 1, 0, 0, 1, 3, 0, 0},
                   {10, 10, 9, 9, 9, 8, 8, 5, 5, 7, 7, 7, 7, 8,
                    4,  4,  3, 3, 2, 2, 1, 1, 0, 0, 1, 3, 4, 0}},
                  std::make_shared<Array>(U"0⊸⍉⊸≡2‿3⥊↕6"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿0‿3‿1‿4≡⍋\"bdace\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿0‿3‿1‿4≡⍋\"bdace\"");
  CompileParams p(
      {0, 7, 0, 1, 16, 0, 0, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 11, 5, 17, 7},
      {runtime[18], runtime[34], 2, 0, 3, 1, 4,
       std::make_shared<Array>(U"bdace")},
      {{0, 1, 0}}, {{0, 0}},
      {{11, 11, 10, 10, 10, 9, 9, 0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 8, 8, 9, 8},
       {17, 17, 10, 10, 10, 9, 9, 0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 8, 8, 9, 8}},
      std::make_shared<Array>(U"2‿0‿3‿1‿4≡⍋\"bdace\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‿2‿4‿3‿0‿1≡⍋↓\"deabb\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5‿2‿4‿3‿0‿1≡⍋↓\"deabb\"");
  CompileParams p({0, 9, 0, 1, 16, 0, 2, 16, 0, 0,  0, 3,  0,
                   4, 0, 5, 0, 6,  0, 7, 0,  8, 11, 6, 17, 7},
                  {runtime[18], runtime[27], runtime[34], 5, 2, 4, 3, 0, 1,
                   std::make_shared<Array>(U"deabb")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 0,  0,  2,
                    2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10},
                   {20, 20, 13, 13, 13, 12, 12, 12, 11, 11, 0,  0,  2,
                    2,  4,  4,  6,  6,  8,  8,  10, 10, 10, 10, 11, 10}},
                  std::make_shared<Array>(U"5‿2‿4‿3‿0‿1≡⍋↓\"deabb\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍋≡⍒)⟨\"\",↕0,0↑<\"abc\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍋≡⍒)⟨\"\",↕0,0↑<\"abc\"⟩");
  CompileParams p({0, 7, 0,  6,  0, 3, 16, 0, 8, 0, 0, 16, 0,  2,
                   0, 6, 17, 11, 3, 0, 5,  0, 1, 0, 4, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[26], runtime[28],
                   runtime[34], runtime[35], 0, std::make_shared<Array>(U""),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{6,  6,  10, 10, 9, 9, 9, 15, 15, 14, 14, 14, 13, 13,
                    12, 12, 13, 5,  5, 3, 3, 2,  2,  1,  1,  2,  0,  0},
                   {7,  7,  10, 10, 9,  9, 9, 19, 19, 14, 14, 14, 13, 13,
                    12, 12, 13, 20, 20, 3, 3, 2,  2,  1,  1,  2,  4,  4}},
                  std::make_shared<Array>(U"(⍋≡⍒)⟨\"\",↕0,0↑<\"abc\"⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍋≡↕∘≠)4‿0⥊@") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍋≡↕∘≠)4‿0⥊@");
  CompileParams p({0, 8, 0, 2, 0,  6, 0, 7, 11, 2,  17, 0, 0,
                   0, 5, 0, 3, 27, 0, 1, 0, 4,  21, 16, 7},
                  {runtime[14], runtime[18], runtime[22], runtime[28],
                   runtime[34], runtime[53], 4, 0,
                   std::make_shared<Character>(U'\0')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{11, 11, 10, 10, 7, 7, 9, 9, 9, 9, 10, 5, 5,
                    4,  4,  3,  3,  4, 2, 2, 1, 1, 2, 0,  0},
                   {11, 11, 10, 10, 7, 7, 9, 9, 9, 9, 10, 5, 5,
                    4,  4,  3,  3,  4, 2, 2, 1, 1, 2, 6,  6}},
                  std::make_shared<Array>(U"(⍋≡↕∘≠)4‿0⥊@"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍒≡⌽∘↕∘≠)⟨¯∞,¯1.5,π,∞,'A','a','b'⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍒≡⌽∘↕∘≠)⟨¯∞,¯1.5,π,∞,'A','a','b'⟩");
  CompileParams p(
      {0, 6, 0, 7, 0, 8, 0, 9, 0,  10, 0, 11, 0, 12, 11, 7,  0, 0,
       0, 5, 0, 2, 0, 5, 0, 3, 27, 27, 0, 1,  0, 4,  21, 16, 7},
      {runtime[14], runtime[18], runtime[28], runtime[31], runtime[35],
       runtime[53], std::make_shared<Number>(-1.0 / 0.0), -1.5,
       3.141592653589793, std::make_shared<Number>(1.0 / 0.0),
       std::make_shared<Character>(U'A'), std::make_shared<Character>(U'a'),
       std::make_shared<Character>(U'b')},
      {{0, 1, 0}}, {{0, 0}},
      {{10, 10, 13, 13, 18, 18, 20, 20, 22, 22, 26, 26, 30, 30, 9, 9, 7, 7,
        6,  6,  5,  5,  4,  4,  3,  3,  4,  6,  2,  2,  1,  1,  2, 0, 0},
       {11, 11, 16, 16, 18, 18, 20, 20, 24, 24, 28, 28, 32, 32, 33, 33, 7, 7,
        6,  6,  5,  5,  4,  4,  3,  3,  4,  6,  2,  2,  1,  1,  2,  8,  8}},
      std::make_shared<Array>(U"(⍒≡⌽∘↕∘≠)⟨-∞,-1.5,π,∞,\'A\',\'a\',\'b\'⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE(
    "(⍒≡⌽∘↕∘≠)⟨↕0,¯1.1,¯1,¯1‿¯∞,¯1‿0,¯1‿0‿0,¯1‿∞,0,6⥊0,1e¯20,1,1+1e¯15⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical(
      "test='{}'",
      "(⍒≡⌽∘↕∘≠)⟨↕0,¯1.1,¯1,¯1‿¯∞,¯1‿0,¯1‿0‿0,¯1‿∞,0,6⥊0,1e¯20,1,1+1e¯15⟩");
  CompileParams p(
      {0,  8, 0, 4,  16, 0,  9, 0,  10, 0,  10, 0,  11, 11, 2,  0,  10, 0,  8,
       11, 2, 0, 10, 0,  8,  0, 8,  11, 3,  0,  10, 0,  12, 11, 2,  0,  8,  0,
       8,  0, 3, 0,  13, 17, 0, 14, 0,  15, 0,  16, 0,  0,  0,  15, 17, 11, 12,
       0,  1, 0, 7,  0,  4,  0, 7,  0,  5,  27, 27, 0,  2,  0,  6,  21, 16, 7},
      {runtime[0], runtime[14], runtime[18], runtime[22], runtime[28],
       runtime[31], runtime[35], runtime[53], 0, -1.1, -1,
       std::make_shared<Number>(-1.0 / 0.0),
       std::make_shared<Number>(1.0 / 0.0), 6, 9.999999999999999e-21, 1, 1e-15},
      {{0, 1, 0}}, {{0, 0}},
      {{11, 11, 10, 10, 10, 13, 13, 18, 18, 21, 21, 24, 24, 24, 24, 27,
        27, 30, 30, 30, 30, 32, 32, 35, 35, 37, 37, 37, 37, 39, 39, 42,
        42, 42, 42, 44, 44, 48, 48, 47, 47, 46, 46, 47, 50, 50, 56, 56,
        60, 60, 59, 59, 58, 58, 59, 9,  9,  7,  7,  6,  6,  5,  5,  4,
        4,  3,  3,  4,  6,  2,  2,  1,  1,  2,  0,  0},
       {11, 11, 10, 10, 10, 16, 16, 19, 19, 22, 22, 25, 25, 25, 25, 28,
        28, 30, 30, 30, 30, 33, 33, 35, 35, 37, 37, 37, 37, 40, 40, 42,
        42, 42, 42, 44, 44, 48, 48, 47, 47, 46, 46, 47, 54, 54, 56, 56,
        64, 64, 59, 59, 58, 58, 59, 65, 65, 7,  7,  6,  6,  5,  5,  4,
        4,  3,  3,  4,  6,  2,  2,  1,  1,  2,  8,  8}},
      std::make_shared<Array>(U"(⍒≡⌽∘↕∘≠)⟨↕0,-1.1,-1,-1‿-∞,-1‿0,-1‿0‿0,-1‿∞,0,"
                              U"6⥊0,1e-20,1,1+1e-15⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍒≡⌽∘↕∘≠)(<∾⟨↕0,1,1‿1,2‿1‿1,2‿1,2,1‿2,2‿2,3⟩⥊¨<)'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(⍒≡⌽∘↕∘≠)(<∾⟨↕0,1,1‿1,2‿1‿1,2‿1,2,1‿2,2‿2,3⟩⥊¨<)'a'");
  CompileParams p(
      {0,  14, 0,  0,  0,  8,  0,  3,  26, 0,  10, 0,  5,  16, 0,  11,
       0,  11, 0,  11, 11, 2,  0,  12, 0,  11, 0,  11, 11, 3,  0,  12,
       0,  11, 11, 2,  0,  12, 0,  11, 0,  12, 11, 2,  0,  12, 0,  12,
       11, 2,  0,  13, 11, 9,  21, 0,  4,  0,  0,  21, 16, 0,  1,  0,
       9,  0,  5,  0,  9,  0,  6,  27, 27, 0,  2,  0,  7,  21, 16, 7},
      {runtime[12], runtime[14], runtime[18], runtime[22], runtime[23],
       runtime[28], runtime[31], runtime[35], runtime[47], runtime[53], 0, 1, 2,
       3, std::make_shared<Character>(U'a')},
      {{0, 1, 0}}, {{0, 0}},
      {{48, 48, 46, 46, 45, 45, 44, 44, 45, 14, 14, 13, 13, 13, 16, 16,
        18, 18, 20, 20, 20, 20, 22, 22, 24, 24, 26, 26, 26, 26, 28, 28,
        30, 30, 30, 30, 32, 32, 34, 34, 36, 36, 36, 36, 38, 38, 40, 40,
        40, 40, 42, 42, 12, 12, 44, 11, 11, 10, 10, 11, 9,  7,  7,  6,
        6,  5,  5,  4,  4,  3,  3,  4,  6,  2,  2,  1,  1,  2,  0,  0},
       {50, 50, 46, 46, 45, 45, 44, 44, 45, 14, 14, 13, 13, 13, 16, 16,
        18, 18, 20, 20, 20, 20, 22, 22, 24, 24, 26, 26, 26, 26, 28, 28,
        30, 30, 30, 30, 32, 32, 34, 34, 36, 36, 36, 36, 38, 38, 40, 40,
        40, 40, 42, 42, 43, 43, 45, 11, 11, 10, 10, 11, 47, 7,  7,  6,
        6,  5,  5,  4,  4,  3,  3,  4,  6,  2,  2,  1,  1,  2,  8,  8}},
      std::make_shared<Array>(
          U"(⍒≡⌽∘↕∘≠)(<∾⟨↕0,1,1‿1,2‿1‿1,2‿1,2,1‿2,2‿2,3⟩⥊¨<)\'a\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍋≡↕∘≠)⥊⍉(↕5)⥊⟜1⊸⥊⌜1‿'b'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍋≡↕∘≠)⥊⍉(↕5)⥊⟜1⊸⥊⌜1‿'b'");
  CompileParams p(
      {0,  11, 0,  12, 11, 2, 0,  6,  0, 2,  0,  8, 0,  11, 0, 9,
       0,  2,  27, 27, 26, 0, 10, 0,  3, 16, 17, 0, 4,  16, 0, 2,
       16, 0,  0,  0,  7,  0, 3,  27, 0, 1,  0,  5, 21, 16, 7},
      {runtime[14], runtime[18], runtime[22], runtime[28], runtime[32],
       runtime[34], runtime[48], runtime[53], runtime[55], runtime[56], 5, 1,
       std::make_shared<Character>(U'b')},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 21, 21, 21, 21, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14,
        13, 13, 14, 16, 18, 11, 11, 10, 10, 10, 13, 8,  8,  8,  7,  7,
        7,  5,  5,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  0,  0},
       {19, 19, 23, 23, 23, 23, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14,
        13, 13, 14, 16, 18, 11, 11, 10, 10, 10, 18, 8,  8,  8,  7,  7,
        7,  5,  5,  4,  4,  3,  3,  4,  2,  2,  1,  1,  2,  6,  6}},
      std::make_shared<Array>(U"(⍋≡↕∘≠)⥊⍉(↕5)⥊⟜1⊸⥊⌜1‿\'b\'"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊢≡○⍋(0‿1+≠)⥊⊢)⟨¯2,'a',1,'f'⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊢≡○⍋(0‿1+≠)⥊⊢)⟨¯2,'a',1,'f'⟩");
  CompileParams p(
      {0, 9, 0, 10, 0, 8,  0,  11, 11, 4, 0, 3, 0, 4,  0, 1, 0,  0,  0,
       7, 0, 8, 11, 2, 21, 21, 0,  5,  0, 6, 0, 2, 27, 0, 3, 21, 16, 7},
      {runtime[0], runtime[14], runtime[18], runtime[21], runtime[22],
       runtime[34], runtime[54], 0, 1, -2, std::make_shared<Character>(U'a'),
       std::make_shared<Character>(U'f')},
      {{0, 1, 0}}, {{0, 0}},
      {{16, 16, 19, 19, 23, 23, 25, 25, 15, 15, 13, 13, 12,
        12, 10, 10, 9,  9,  6,  6,  8,  8,  8,  8,  9,  12,
        4,  4,  3,  3,  2,  2,  3,  1,  1,  2,  0,  0},
       {17, 17, 21, 21, 23, 23, 27, 27, 28, 28, 13, 13, 12,
        12, 10, 10, 9,  9,  6,  6,  8,  8,  8,  8,  9,  12,
        4,  4,  3,  3,  2,  2,  3,  1,  1,  4,  14, 14}},
      std::make_shared<Array>(U"(⊢≡○⍋(0‿1+≠)⥊⊢)⟨-2,\'a\',1,\'f\'⟩"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1,2,3,1‿2,2‿1,1‿3,2‿2,3‿1⟩(⥊⊸(≠∘⊣∾˜¯1⊸⊑⊸(⌊∾⊣)∾×´⊸⌊)⌜≡○(⍋⥊)⥊⌜⟜(+`"
          "∘≠⟜(↕6)¨))↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1,2,3,1‿2,2‿1,1‿3,2‿2,3‿1⟩(⥊⊸(≠∘⊣∾˜¯1⊸⊑⊸(⌊∾⊣)"
                                "∾×´⊸⌊)⌜≡○(⍋⥊)⥊⌜⟜(+`∘≠⟜(↕6)¨))↕4");
  CompileParams p(
      {0,  25, 0,  8,  16, 0,  12, 0,  24, 0,  8,  16, 0,  19, 0,  3,  0,
       16, 0,  15, 0,  0,  26, 27, 27, 26, 0,  19, 0,  13, 0,  6,  26, 27,
       0,  6,  0,  9,  20, 0,  17, 0,  4,  27, 0,  13, 0,  2,  0,  18, 0,
       14, 0,  1,  26, 27, 0,  7,  0,  5,  0,  7,  0,  2,  21, 0,  18, 0,
       10, 0,  18, 0,  23, 27, 27, 21, 0,  11, 0,  7,  26, 0,  5,  0,  16,
       0,  3,  27, 21, 0,  18, 0,  6,  27, 26, 21, 0,  20, 0,  21, 0,  22,
       0,  20, 0,  21, 11, 2,  0,  21, 0,  20, 11, 2,  0,  20, 0,  22, 11,
       2,  0,  21, 0,  21, 11, 2,  0,  22, 0,  20, 11, 2,  11, 8,  17, 7},
      {runtime[0],  runtime[2],
       runtime[6],  runtime[14],
       runtime[18], runtime[20],
       runtime[22], runtime[23],
       runtime[28], runtime[34],
       runtime[37], runtime[45],
       runtime[47], runtime[48],
       runtime[50], runtime[52],
       runtime[53], runtime[54],
       runtime[55], runtime[56],
       1,           2,
       3,           -1,
       6,           4},
      {{0, 1, 0}}, {{0, 0}},
      {{76, 76, 75, 75, 75, 72, 72, 70, 70, 69, 69, 69, 67, 67, 66, 66, 65,
        65, 64, 64, 63, 63, 64, 65, 67, 72, 61, 61, 60, 60, 59, 59, 60, 61,
        57, 57, 56, 56, 56, 54, 54, 53, 53, 54, 52, 52, 50, 50, 49, 49, 48,
        48, 47, 47, 48, 49, 46, 46, 44, 44, 43, 43, 42, 42, 43, 40, 40, 39,
        39, 38, 38, 36, 36, 38, 40, 46, 35, 35, 34, 34, 35, 33, 33, 32, 32,
        31, 31, 32, 34, 29, 29, 28, 28, 29, 52, 53, 1,  1,  3,  3,  5,  5,
        7,  7,  9,  9,  9,  9,  11, 11, 13, 13, 13, 13, 15, 15, 17, 17, 17,
        17, 19, 19, 21, 21, 21, 21, 23, 23, 25, 25, 25, 25, 0,  0,  27, 0},
       {76, 76, 75, 75, 75, 72, 72, 70, 70, 69, 69, 69, 67, 67, 66, 66, 65,
        65, 64, 64, 63, 63, 64, 65, 67, 72, 61, 61, 60, 60, 59, 59, 60, 61,
        57, 57, 56, 56, 56, 54, 54, 53, 53, 54, 52, 52, 50, 50, 49, 49, 48,
        48, 47, 47, 48, 49, 46, 46, 44, 44, 43, 43, 42, 42, 43, 40, 40, 39,
        39, 38, 38, 37, 37, 38, 40, 46, 35, 35, 34, 34, 35, 33, 33, 32, 32,
        31, 31, 32, 35, 29, 29, 28, 28, 29, 52, 58, 1,  1,  3,  3,  5,  5,
        7,  7,  9,  9,  9,  9,  11, 11, 13, 13, 13, 13, 15, 15, 17, 17, 17,
        17, 19, 19, 21, 21, 21, 21, 23, 23, 25, 25, 25, 25, 26, 26, 74, 26}},
      std::make_shared<Array>(U"⟨1,2,3,1‿2,2‿1,1‿3,2‿2,3‿1⟩(⥊⊸(≠∘⊣∾˜-1⊸⊑⊸(⌊∾⊣)"
                              U"∾×´⊸⌊)⌜≡○(⍋⥊)⥊⌜⟜(+`∘≠⟜(↕6)¨))↕4"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((⥊˜-⥊⟜2‿0)∘≠≡⍋+⍒)2/↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((⥊˜-⥊⟜2‿0)∘≠≡⍋+⍒)2/↕5");
  CompileParams p(
      {0,  14, 0, 5, 16, 0, 6,  0, 12, 17, 0,  8,  0,  0, 0,  7,
       21, 0,  3, 0, 2,  0, 10, 0, 12, 0,  13, 11, 2,  0, 11, 0,
       4,  27, 0, 1, 0,  9, 0,  4, 26, 21, 27, 21, 16, 7},
      {runtime[0], runtime[1], runtime[14], runtime[18], runtime[22],
       runtime[28], runtime[33], runtime[34], runtime[35], runtime[45],
       runtime[53], runtime[56], 2, 0, 5},
      {{0, 1, 0}}, {{0, 0}},
      {{21, 21, 20, 20, 20, 19, 19, 18, 18, 19, 16, 16, 15, 15, 14, 14,
        15, 13, 13, 12, 12, 11, 11, 7,  7,  9,  9,  9,  9,  6,  6,  5,
        5,  6,  4,  4,  3,  3,  2,  2,  3,  4,  11, 13, 0,  0},
       {21, 21, 20, 20, 20, 19, 19, 18, 18, 19, 16, 16, 15, 15, 14, 14,
        15, 13, 13, 12, 12, 11, 11, 7,  7,  9,  9,  9,  9,  6,  6,  5,
        5,  6,  4,  4,  3,  3,  2,  2,  3,  4,  11, 13, 17, 17}},
      std::make_shared<Array>(U"((⥊˜-⥊⟜2‿0)∘≠≡⍋+⍒)2/↕5"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"edcba\"≡∨\"bdace\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"edcba\"≡∨\"bdace\"");
  CompileParams p(
      {0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
      {runtime[11], runtime[18], std::make_shared<Array>(U"edcba"),
       std::make_shared<Array>(U"bdace")},
      {{0, 1, 0}}, {{0, 0}},
      {{9, 9, 8, 8, 8, 7, 7, 0, 0, 7, 0}, {15, 15, 8, 8, 8, 7, 7, 6, 6, 7, 6}},
      std::make_shared<Array>(U"\"edcba\"≡∨\"bdace\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕7)≡∧⍋|⟜⌽1+↕7") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕7)≡∧⍋|⟜⌽1+↕7");
  CompileParams p({0,  8, 0, 4,  16, 0, 0,  0, 9, 17, 0, 5, 0, 7,  0,  1, 27,
                   16, 0, 6, 16, 0,  2, 16, 0, 3, 0,  8, 0, 4, 16, 17, 7},
                  {runtime[0], runtime[8], runtime[10], runtime[18],
                   runtime[28], runtime[31], runtime[34], runtime[56], 7, 1},
                  {{0, 1, 0}}, {{0, 0}},
                  {{13, 13, 12, 12, 12, 11, 11, 10, 10, 11, 9, 9, 8, 8, 7, 7, 8,
                    7,  6,  6,  6,  5,  5,  5,  4,  4,  2,  2, 1, 1, 1, 4, 0},
                   {13, 13, 12, 12, 12, 11, 11, 10, 10, 11, 9, 9, 8, 8, 7, 7, 8,
                    9,  6,  6,  6,  5,  5,  5,  4,  4,  2,  2, 1, 1, 1, 4, 3}},
                  std::make_shared<Array>(U"(↕7)≡∧⍋|⟜⌽1+↕7"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1,3,∞,'e','i'⟩ (⍋≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍋∘∾) (2÷˜↕8)∾\"aegz\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "⟨1,3,∞,'e','i'⟩ (⍋≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍋∘∾) (2÷˜↕8)∾\"aegz\"");
  CompileParams p(
      {0,  23, 0,  7, 0,  20, 0,  9,  16, 0,  12, 0,  1,  26, 0,  19,
       17, 17, 0,  7, 0,  14, 0,  10, 27, 0,  2,  0,  14, 0,  13, 0,
       0,  26, 27, 0, 11, 0,  15, 0,  10, 27, 0,  6,  21, 0,  8,  0,
       5,  21, 0,  5, 0,  14, 0,  3,  27, 21, 0,  4,  0,  10, 21, 0,
       16, 0,  17, 0, 18, 0,  21, 0,  22, 11, 5,  17, 7},
      {runtime[0],
       runtime[3],
       runtime[13],
       runtime[14],
       runtime[18],
       runtime[20],
       runtime[21],
       runtime[23],
       runtime[27],
       runtime[28],
       runtime[34],
       runtime[36],
       runtime[45],
       runtime[52],
       runtime[53],
       runtime[55],
       1,
       3,
       std::make_shared<Number>(1.0 / 0.0),
       2,
       8,
       std::make_shared<Character>(U'e'),
       std::make_shared<Character>(U'i'),
       std::make_shared<Array>(U"aegz")},
      {{0, 1, 0}}, {{0, 0}},
      {{47, 47, 46, 46, 44, 44, 43, 43, 43, 42, 42, 41, 41, 42, 40, 40,
        41, 46, 36, 36, 35, 35, 34, 34, 35, 32, 32, 31, 31, 30, 30, 29,
        29, 30, 31, 28, 28, 27, 27, 26, 26, 27, 25, 25, 26, 24, 24, 23,
        23, 24, 21, 21, 20, 20, 19, 19, 20, 22, 18, 18, 17, 17, 18, 1,
        1,  3,  3,  5,  5,  7,  7,  11, 11, 0,  0,  16, 0},
       {52, 52, 46, 46, 44, 44, 43, 43, 43, 42, 42, 41, 41, 42, 40, 40,
        42, 46, 36, 36, 35, 35, 34, 34, 35, 32, 32, 31, 31, 30, 30, 29,
        29, 30, 31, 28, 28, 27, 27, 26, 26, 27, 25, 25, 28, 24, 24, 23,
        23, 24, 21, 21, 20, 20, 19, 19, 20, 33, 18, 18, 17, 17, 18, 1,
        1,  3,  3,  5,  5,  9,  9,  13, 13, 14, 14, 37, 14}},
      std::make_shared<Array>(
          U"⟨1,3,∞,\'e\',\'i\'⟩ (⍋≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍋∘∾) (2÷˜↕8)∾\"aegz\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨'z','d',1‿0,0⟩ (⍒≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍒∘∾) (2÷˜↕8)∾\"aegz\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "⟨'z','d',1‿0,0⟩ (⍒≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍒∘∾) (2÷˜↕8)∾\"aegz\"");
  CompileParams p(
      {0,  23, 0,  7, 0,  20, 0,  9,  16, 0,  13, 0,  1,  26, 0,  19,
       17, 17, 0,  7, 0,  15, 0,  11, 27, 0,  2,  0,  15, 0,  14, 0,
       0,  26, 27, 0, 12, 0,  16, 0,  10, 27, 0,  6,  21, 0,  8,  0,
       5,  21, 0,  5, 0,  15, 0,  3,  27, 21, 0,  4,  0,  11, 21, 0,
       21, 0,  22, 0, 17, 0,  18, 11, 2,  0,  18, 11, 4,  17, 7},
      {runtime[0],
       runtime[3],
       runtime[13],
       runtime[14],
       runtime[18],
       runtime[20],
       runtime[21],
       runtime[23],
       runtime[27],
       runtime[28],
       runtime[34],
       runtime[35],
       runtime[36],
       runtime[45],
       runtime[52],
       runtime[53],
       runtime[55],
       1,
       0,
       2,
       8,
       std::make_shared<Character>(U'z'),
       std::make_shared<Character>(U'd'),
       std::make_shared<Array>(U"aegz")},
      {{0, 1, 0}}, {{0, 0}},
      {{47, 47, 46, 46, 44, 44, 43, 43, 43, 42, 42, 41, 41, 42, 40, 40,
        41, 46, 36, 36, 35, 35, 34, 34, 35, 32, 32, 31, 31, 30, 30, 29,
        29, 30, 31, 28, 28, 27, 27, 26, 26, 27, 25, 25, 26, 24, 24, 23,
        23, 24, 21, 21, 20, 20, 19, 19, 20, 22, 18, 18, 17, 17, 18, 1,
        1,  5,  5,  9,  9,  11, 11, 11, 11, 13, 13, 0,  0,  16, 0},
       {52, 52, 46, 46, 44, 44, 43, 43, 43, 42, 42, 41, 41, 42, 40, 40,
        42, 46, 36, 36, 35, 35, 34, 34, 35, 32, 32, 31, 31, 30, 30, 29,
        29, 30, 31, 28, 28, 27, 27, 26, 26, 27, 25, 25, 28, 24, 24, 23,
        23, 24, 21, 21, 20, 20, 19, 19, 20, 33, 18, 18, 17, 17, 18, 3,
        3,  7,  7,  9,  9,  11, 11, 11, 11, 13, 13, 14, 14, 37, 14}},
      std::make_shared<Array>(
          U"⟨\'z\',\'d\',1‿0,0⟩ (⍒≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍒∘∾) (2÷˜↕8)∾\"aegz\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<∘⌈≡(↕6)⊸⍋)2.5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<∘⌈≡(↕6)⊸⍋)2.5");
  CompileParams p({0, 8, 0, 4, 0, 6, 0, 7, 0,  3,  16, 27,
                   0, 2, 0, 0, 0, 5, 0, 1, 27, 21, 16, 7},
                  {runtime[7], runtime[12], runtime[18], runtime[28],
                   runtime[34], runtime[53], runtime[55], 6, 2.5},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 10, 10, 9, 9, 7, 7, 6, 6, 6, 9,
                    4,  4,  3,  3,  2, 2, 1, 1, 2, 4, 0, 0},
                   {14, 14, 10, 10, 9, 9, 7, 7, 6, 6, 6,  9,
                    4,  4,  3,  3,  2, 2, 1, 1, 2, 4, 11, 11}},
                  std::make_shared<Array>(U"(<∘⌈≡(↕6)⊸⍋)2.5"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<1)≡(↕2‿3)⍋1+↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<1)≡(↕2‿3)⍋1+↕3");
  CompileParams p(
      {0,  7, 0, 3, 16, 0,  0, 0, 5, 17, 0, 4, 0,  6,  0, 7,
       11, 2, 0, 3, 16, 17, 0, 2, 0, 5,  0, 1, 16, 17, 7},
      {runtime[0], runtime[12], runtime[18], runtime[28], runtime[34], 1, 2, 3},
      {{0, 1, 0}}, {{0, 0}},
      {{15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 11, 11, 7, 7, 9, 9,
        9,  9,  6,  6,  6,  11, 4,  4,  2,  2,  1,  1,  1, 4, 0},
       {15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 11, 11, 7, 7, 9, 9,
        9,  9,  6,  6,  6,  11, 4,  4,  2,  2,  1,  1,  1, 4, 3}},
      std::make_shared<Array>(U"(<1)≡(↕2‿3)⍋1+↕3"));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<0)≡\"abc\"⥊⊸⍒○<≍\"acc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<0)≡\"abc\"⥊⊸⍒○<≍\"acc\"");
  CompileParams p({0,  9,  0, 3, 16, 0, 0, 0, 5, 0, 4, 0,  6,  0, 2,
                   27, 27, 0, 8, 17, 0, 1, 0, 7, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[18], runtime[22], runtime[24],
                   runtime[35], runtime[54], runtime[55], 0,
                   std::make_shared<Array>(U"abc"),
                   std::make_shared<Array>(U"acc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{16, 16, 15, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10,
                    11, 13, 5,  5,  10, 4,  4,  2,  2,  1,  1,  1,  4,  0},
                   {20, 20, 15, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10,
                    11, 13, 9,  9,  14, 4,  4,  2,  2,  1,  1,  1,  4,  3}},
                  std::make_shared<Array>(U"(<0)≡\"abc\"⥊⊸⍒○<≍\"acc\""));
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                     p.source_indices.value(), p.source_str);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
