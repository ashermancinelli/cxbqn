/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:54
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("≡⟜(∾⥊¨)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜(∾⥊¨)\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], runtime[23],
                            runtime[47], runtime[56], CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 3, 0, 1, 26, 0, 2, 20, 0, 4, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾´≡∾)\"ab\"‿\"cde\"‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾´≡∾)\"ab\"‿\"cde\"‿\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[23],
                            runtime[50],
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"cde"),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 4, 0, 5, 11, 3, 0, 1, 0, 0, 0, 2, 0, 1, 26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡∾\"ab\"‿'c'‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡∾\"ab\"‿'c'‿\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[23],
                            CXBQN_NEW(Character, U'c'),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 5, 11, 3, 0, 1, 16, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2‿3‿4‿6‿9≡∾(⊢×≠↑↓)1+↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2‿3‿4‿6‿9≡∾(⊢×≠↑↓)1+↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[14],
        runtime[18],          runtime[21],          runtime[23],
        runtime[26],          runtime[27],          runtime[28],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 9)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0, 8,  16, 0,  0,  0,  9, 17, 0,  7, 0,  6, 0,
             2, 21, 0, 1,  0,  4,  21, 16, 0, 5,  16, 0, 3,  0, 9,
             0, 10, 0, 11, 0,  12, 0,  13, 0, 14, 11, 6, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≡⟜∾∧≡⟜(∾<))<4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≡⟜∾∧≡⟜(∾<))<4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10], runtime[12], runtime[18],
                            runtime[23], runtime[56], CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  5, 0, 1, 16, 0, 1, 0, 3, 20, 0,  4,  0, 2,
             27, 0, 0, 0, 3,  0, 4, 0, 2, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1‿4,⥊2⟩((∾⋆⌜⌜)≡⋆⌜○∾)⟨2‿3‿4,⟨⟩,⥊5⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿4,⥊2⟩((∾⋆⌜⌜)≡⋆⌜○∾)⟨2‿3‿4,⟨⟩,⥊5⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[4],           runtime[18],          runtime[22],
        runtime[23],          runtime[48],          runtime[54],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8,  0,  9, 0, 7, 11, 3,  11, 0, 0, 10, 0, 2,  16, 11, 3,  0,  3,
             0, 5,  0,  4, 0, 0, 26, 27, 0,  1, 0, 4,  0, 4,  0,  0,  26, 26, 0,
             3, 20, 21, 0, 6, 0, 7,  11, 2,  0, 8, 0,  2, 16, 11, 2,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6‿3⥊0)≡∾⟨2‿3,3,3‿3⟩⥊¨0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(6‿3⥊0)≡∾⟨2‿3,3,3‿3⟩⥊¨0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[23],          runtime[47],
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 3, 0, 1,  26, 0,  7, 0,  5, 11, 2,  0,
             5, 0, 5, 0, 5, 11, 2,  11, 3, 17, 0, 2,  16, 0,
             0, 0, 6, 0, 1, 0,  4,  0,  5, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\"≡\"abc\"∾'d'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"≡\"abc\"∾'d'");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18], runtime[23], CXBQN_NEW(Character, U'd'),
        CXBQN_NEW(Array, U"abcd"), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 4, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\"≡\"abc\"∾<'d'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"≡\"abc\"∾<'d'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[23],
                            CXBQN_NEW(Character, U'd'),
                            CXBQN_NEW(Array, U"abcd"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 2, 0, 5, 17, 0, 1, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕4‿3)≡(↕3‿3)∾3∾¨↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕4‿3)≡(↕3‿3)∾3∾¨↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[23],
                            runtime[28],          runtime[47],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  5, 0, 2, 16, 0,  3, 0, 1, 26, 0, 5, 17, 0, 1, 0, 5,  0,  5,
             11, 2, 0, 2, 16, 17, 0, 0, 0, 4,  0, 5, 11, 2, 0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾˜≡·¯1⊸(×´∘↓∾↑)∘≢⊸⥊≍˜)2‿3⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾˜≡·¯1⊸(×´∘↓∾↑)∘≢⊸⥊≍˜)2‿3⥊\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2],
                            runtime[18],
                            runtime[19],
                            runtime[22],
                            runtime[23],
                            runtime[24],
                            runtime[26],
                            runtime[27],
                            runtime[45],
                            runtime[50],
                            runtime[53],
                            runtime[55],
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  15, 0, 3, 0,  13, 0,  14, 11, 2,  17, 0, 8,  0,  5,
             26, 0,  3, 0, 11, 0,  2,  0,  10, 0,  6,  0, 4,  0,  7,
             0,  10, 0, 9, 0,  0,  26, 27, 21, 0,  11, 0, 12, 27, 27,
             27, 20, 0, 1, 0,  8,  0,  4,  26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾´≡∾)⟨3‿2‿1,0‿2‿1⟩⥊¨<↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾´≡∾)⟨3‿2‿1,0‿2‿1⟩⥊¨<↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[22],
        runtime[23],          runtime[28],          runtime[47],
        runtime[50],          CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0, 4, 16, 0, 0, 16, 0, 5, 0,  2,  26, 0, 7,
             0, 8,  0, 9, 11, 3, 0, 10, 0, 8, 0,  9,  11, 3, 11,
             2, 17, 0, 3, 0,  1, 0, 6,  0, 3, 26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1‿2,⥊0,⥊3⟩≡⊔1‿0‿0‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿2,⥊0,⥊3⟩≡⊔1‿0‿0‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[42],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3,  0, 5, 0, 5, 0, 4,  11, 4, 0, 2, 16, 0,  0, 0,  3, 0,
             4, 11, 2, 0, 5, 0, 1, 16, 0,  6, 0, 1, 16, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡⊔5⥊¯1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡⊔5⥊¯1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], runtime[42],
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, -1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 3, 17, 0, 2, 16, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⊔⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⊔⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[42], runtime[56]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊔≡⥊¨¨∘⊔∘⊑)⟨1‿0‿0‿2⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊔≡⥊¨¨∘⊔∘⊑)⟨1‿0‿0‿2⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[37],
        runtime[42],          runtime[47],          runtime[53],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 7, 0, 7, 0, 8,  11, 4,  11, 1, 0, 2, 0, 5,  0,  3, 0,
             5, 0, 4, 0, 4, 0, 1, 26, 26, 27, 27, 0, 0, 0, 3, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍⍟2∘<¨⌽↕3‿2)≡⊔⟨2‿1‿0,0‿1⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍⍟2∘<¨⌽↕3‿2)≡⊔⟨2‿1‿0,0‿1⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[24],
        runtime[28],          runtime[31],          runtime[42],
        runtime[47],          runtime[53],          runtime[62],
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9,  0, 11, 0, 12, 11, 3, 0,  12, 0, 11, 11, 2,  11, 2,  0,
             5, 16, 0, 1,  0, 10, 0,  9, 11, 2,  0, 3,  16, 0,  4,  16, 0,
             6, 0,  0, 0,  7, 0,  9,  0, 8,  0,  2, 27, 27, 26, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕0‿0)≡⊔⟨⟩‿⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕0‿0)≡⊔⟨⟩‿⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], runtime[42],
                            CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 11, 0, 11, 2, 0, 2, 16, 0,  0,
             0,  3, 0,  3, 11, 2, 0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊔≡·≍⍟2∘<·∾⌜´/∘(0⊸=)¨)⟨0‿¯1‿0‿0,¯1‿0‿0⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊔≡·≍⍟2∘<·∾⌜´/∘(0⊸=)¨)⟨0‿¯1‿0‿0,¯1‿0‿0⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[15],          runtime[18],
        runtime[23],          runtime[24],          runtime[33],
        runtime[42],          runtime[47],          runtime[48],
        runtime[50],          runtime[53],          runtime[55],
        runtime[62],          CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, -1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0,  15, 0, 14, 0,  14, 11, 4,  0,  15, 0,  14, 0,  14,
             11, 3,  11, 2,  0, 7,  0,  1,  0,  11, 0,  14, 27, 0,  10, 0,
             5,  27, 26, 0,  9, 0,  8,  0,  3,  26, 26, 20, 0,  0,  0,  10,
             0,  13, 0,  12, 0, 4,  27, 27, 20, 0,  2,  0,  6,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿0‿1↑⌜≍⍟2∘<∘⥊¨1‿0)≡⊔⟨2,1‿0⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿0‿1↑⌜≍⍟2∘<∘⥊¨1‿0)≡⊔⟨2,1‿0⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],         runtime[18],          runtime[22],
        runtime[24],         runtime[26],          runtime[42],
        runtime[47],         runtime[48],          runtime[53],
        runtime[62],         CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 12, 0,  11, 0,  10, 11, 2,  11, 2,  0,  5,  16, 0, 1,
             0, 11, 0,  10, 11, 2,  0,  6,  0,  2,  0,  8,  0,  0, 0,
             8, 0,  12, 0,  9,  0,  3,  27, 27, 27, 26, 16, 0,  7, 0,
             4, 26, 0,  10, 0,  10, 0,  11, 11, 3,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿0‿1↑⌜≍⍟2∘(<0‿0‿0⊸∾)¨1‿0)≡⊔0‿0⊸↓¨⟨2,1‿0⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿0‿1↑⌜≍⍟2∘(<0‿0‿0⊸∾)¨1‿0)≡⊔0‿0⊸↓¨⟨2,1‿0⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[23],
        runtime[24],          runtime[26],          runtime[27],
        runtime[42],          runtime[47],          runtime[48],
        runtime[53],          runtime[55],          runtime[62],
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0,  13, 0,  12, 11, 2,  11, 2,  0,  7,  0,  5,  0,  10, 0,
             12, 0,  12, 11, 2,  27, 26, 16, 0,  6,  16, 0,  1,  0,  13, 0,  12,
             11, 2,  0,  7,  0,  2,  0,  10, 0,  12, 0,  12, 0,  12, 11, 3,  27,
             0,  0,  20, 0,  9,  0,  14, 0,  11, 0,  3,  27, 27, 26, 16, 0,  8,
             0,  4,  26, 0,  12, 0,  12, 0,  13, 11, 3,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4‿3‿2(⋈≡·(≠¨⋈∾)/⊸⊔)\"abcdefghi\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4‿3‿2(⋈≡·(≠¨⋈∾)/⊸⊔)\"abcdefghi\"");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[14],          runtime[18],
        runtime[23],          runtime[25],
        runtime[33],          runtime[42],
        runtime[47],          runtime[55],
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"abcdefghi")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 5, 0, 7, 0,  4, 27, 0, 2, 0, 3,  0,  6, 0,  0, 26,
             21, 20, 0, 1, 0, 3, 21, 0, 8,  0, 9, 0, 10, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡(3⥊¯1)⊔\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡(3⥊¯1)⊔\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],           runtime[22],
                            runtime[42],           CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, -1), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 4, 0, 1, 0, 3, 17, 17, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡(2⥊¯1)⊔\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡(2⥊¯1)⊔\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],           runtime[22],
                            runtime[42],           CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -1), CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 4, 0, 1, 0, 3, 17, 17, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍˘1‿1‿4<∘⥊⎉1 16‿4+⌜↕4)≡2↓⟨3‿2,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(≍˘1‿1‿4<∘⥊⎉1 16‿4+⌜↕4)≡2↓⟨3‿2,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[12],          runtime[18],
        runtime[22],          runtime[24],          runtime[27],
        runtime[28],          runtime[42],          runtime[46],
        runtime[48],          runtime[53],          runtime[60],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 16),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, -1),
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 24)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  19, 0,  6, 16, 0, 3,  0,  15, 0,  16, 0,  13, 11, 3,
             17, 0,  7,  0, 16, 0, 15, 11, 2,  0,  17, 0,  18, 0,  17,
             11, 3,  11, 2, 17, 0, 5,  0,  15, 17, 0,  2,  0,  13, 0,
             6,  16, 0,  9, 0,  0, 26, 0,  14, 0,  13, 11, 2,  17, 0,
             12, 0,  11, 0, 3,  0, 10, 0,  1,  27, 27, 0,  12, 0,  12,
             0,  13, 11, 3, 17, 0, 8,  0,  4,  26, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⥊⚇0⊸≡○⊔⟜(⥊<)1‿2‿2‿¯1‿0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⥊⚇0⊸≡○⊔⟜(⥊<)1‿2‿2‿¯1‿0");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[22],
        runtime[42],          runtime[54],          runtime[55],
        runtime[56],          runtime[61],          CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, -1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 10, 0, 10, 0, 11, 0,  8,  11, 5,  0,
             0, 0, 2, 20, 0, 6,  0, 3,  0,  4,  0,  1,  0,
             5, 0, 8, 0,  7, 0,  2, 27, 27, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∾↕¨∘≢⊸⊔)⊸≡ 3‿2‿4⥊↕24") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∾↕¨∘≢⊸⊔)⊸≡ 3‿2‿4⥊↕24");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[19],          runtime[22],
        runtime[23],          runtime[28],          runtime[42],
        runtime[47],          runtime[53],          runtime[55],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4),
        CXBQN_NEW(Number, 24)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 12, 0, 4, 16, 0,  2,  0, 9, 0,  10, 0,  11, 11,
             3, 17, 0, 0, 0,  8,  0,  5, 0, 8,  0,  1,  0,  7,
             0, 6,  0, 4, 26, 27, 27, 0, 3, 20, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("-⟜'a'⊸(⊔≡⊔○⥊)\"acc\"≍\"bac\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-⟜'a'⊸(⊔≡⊔○⥊)\"acc\"≍\"bac\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],
                            runtime[18],
                            runtime[22],
                            runtime[24],
                            runtime[42],
                            runtime[54],
                            runtime[55],
                            runtime[56],
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Array, U"acc"),
                            CXBQN_NEW(Array, U"bac")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0,  3, 0, 9, 17, 0, 2, 0, 5, 0,  4,  27, 0, 1,
             0, 4,  21, 0, 6, 0, 8,  0, 7, 0, 0, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‿1/⟨↕0‿1,1‿1⥊3⟩)≡2⊔⥊3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿1/⟨↕0‿1,1‿1⥊3⟩)≡2⊔⥊3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[28],
        runtime[33],          runtime[42],          CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8,  0,  1, 16, 0,  4, 0, 5, 17, 0,  0, 0,  7,  0,
             6, 11, 2,  0, 2,  16, 0, 8, 0, 1,  0,  6, 0,  6,  11,
             2, 17, 11, 2, 0,  3,  0, 5, 0, 6,  11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((<=·↕1⊸+)≡·≢¨<¨⊸⊔⟜(<@))2‿1‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((<=·↕1⊸+)≡·≢¨<¨⊸⊔⟜(<@))2‿1‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[12],
                            runtime[15],          runtime[18],
                            runtime[19],          runtime[28],
                            runtime[42],          runtime[47],
                            runtime[55],          runtime[56],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0, 10, 0,  12, 11, 3,  0, 13, 0, 1, 16, 0,  9,  0, 6, 0,
             8, 0,  7, 0,  1,  26, 27, 27, 0, 7,  0, 4, 26, 20, 0,  3, 0, 0,
             0, 8,  0, 10, 27, 0,  5,  20, 0, 2,  0, 1, 21, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1‿3/⟨\"a\",\"\"⟩)≡0‿¯1‿4⊔\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1‿3/⟨\"a\",\"\"⟩)≡0‿¯1‿4⊔\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[33],
                            runtime[42],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U""),
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 2,  0, 5, 0, 6, 0, 7, 11, 3,  17, 0,  0,  0,
             8, 0,  9, 11, 2, 0, 1, 0, 3, 0, 4,  11, 2,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1⊸↓⊸(≡○(⊔⟜\"ab\"))2‿3‿1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1⊸↓⊸(≡○(⊔⟜\"ab\"))2‿3‿1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[27],
                            runtime[42],
                            runtime[54],
                            runtime[55],
                            runtime[56],
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 8,  0, 9, 11, 3, 0, 10, 0, 5, 0,  2,  27, 0,
             3, 0, 0, 27, 0, 4, 0,  1, 0, 4,  0, 6, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍1‿1‿0≍∘/⟜≍¨\"bac\")≡⟨0,1‿0‿3⟩⊔\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍1‿1‿0≍∘/⟜≍¨\"bac\")≡⟨0,1‿0‿3⟩⊔\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[24],
                            runtime[33],
                            runtime[42],
                            runtime[47],
                            runtime[53],
                            runtime[56],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"bac"),
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 3,  0, 8, 0, 7, 0,  8, 0,  9, 11, 3,  11, 2, 17,
             0,  0,  0, 10, 0, 4, 0, 1, 0,  6, 0,  2, 0,  5,  0,  1, 27,
             27, 26, 0, 7,  0, 7, 0, 8, 11, 3, 17, 0, 1,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽˘≡·∾⟨2‿2,1‿0‿1⟩⊸⊔)\"ab\"≍\"cd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽˘≡·∾⟨2‿2,1‿0‿1⟩⊸⊔)\"ab\"≍\"cd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[23],
                            runtime[24],
                            runtime[31],
                            runtime[42],
                            runtime[46],
                            runtime[55],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"cd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0,  2, 0, 10, 17, 0, 4, 0,  6,  0,  7, 0,
             7, 11, 2,  0, 8, 0,  9,  0, 8, 11, 3,  11, 2, 27,
             0, 1,  20, 0, 0, 0,  5,  0, 3, 26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿0‿4≡\"abcd\"⊐\"cae\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿0‿4≡\"abcd\"⊐\"cae\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[38],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Array, U"abcd"),
                            CXBQN_NEW(Array, U"cae")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 5, 17, 0, 0, 0, 2, 0, 3, 0, 4, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1⟩≡\"abcd\"⊐\"b\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1⟩≡\"abcd\"⊐\"b\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[38], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"abcd"), CXBQN_NEW(Array, U"b")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 11, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<2)≡\"cdef\"⊐'e'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<2)≡\"cdef\"⊐'e'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[38],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'e'),
                            CXBQN_NEW(Array, U"cdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 5, 17, 0, 1, 0, 3, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<3)≡⊐⟜(3⊸⊏)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<3)≡⊐⟜(3⊸⊏)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[36],          runtime[38],
                            runtime[55],          runtime[56],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0,  2, 0, 4, 0, 6, 27, 0,  5,  0,
             3, 27, 16, 0, 1, 0, 6, 0, 0,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(5⌊3+↕5)≡⊐⟜(3‿0‿0+⚇1⊢)↕5‿2‿1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(5⌊3+↕5)≡⊐⟜(3‿0‿0+⚇1⊢)↕5‿2‿1");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[6],           runtime[18],
        runtime[21],          runtime[28],          runtime[38],
        runtime[56],          runtime[61],          CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8,  0, 12, 0, 11, 11, 3,  0,  4, 16, 0, 3, 0, 11, 0,  7,  0,
             0, 27, 0, 9,  0, 10, 0,  10, 11, 3, 21, 0, 6, 0, 5,  27, 16, 0,
             2, 0,  8, 0,  4, 16, 0,  0,  0,  9, 17, 0, 1, 0, 8,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿0‿1‿0‿2≡⊐\"ccacb\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿0‿1‿0‿2≡⊐\"ccacb\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[38],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"ccacb")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 0, 0, 2, 0, 2, 0, 3, 0, 2, 0, 4, 11, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿0‿1‿0‿2≡⊐≍˜˘\"ccacb\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿0‿1‿0‿2≡⊐≍˜˘\"ccacb\"");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[24],          runtime[38],
        runtime[45],          runtime[46],          CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"ccacb")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 4, 0, 3, 0, 1, 26, 26, 16, 0,  2, 16, 0,
             0, 0, 5, 0, 5, 0, 6, 0, 5,  0,  7,  11, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⊐⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⊐⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[38], runtime[56]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿0‿0‿1≡\"acef\"∊\"adf\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿0‿0‿1≡\"acef\"∊\"adf\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[40],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"acef"),
                            CXBQN_NEW(Array, U"adf")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 4, 17, 0, 0, 0, 2, 0, 3, 0, 3, 0, 2, 11, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(∊⟜(↕2)≡<⟜2)3⋆⌜○↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(∊⟜(↕2)≡<⟜2)3⋆⌜○↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[4],           runtime[12],         runtime[18],
        runtime[28],          runtime[40],         runtime[48],
        runtime[54],          runtime[56],         CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0,  3, 0, 6, 0, 5, 0, 0,  26, 27, 0, 9, 17, 0,  8,  0, 7,
             0, 1,  27, 0, 2, 0, 8, 0, 3, 16, 0,  7,  0, 4, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<1)≡3‿4‿5∊4+⌜○↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<1)≡3‿4‿5∊4+⌜○↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[12],          runtime[18],
        runtime[28],          runtime[40],          runtime[48],
        runtime[54],          CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 3, 0,  6,  0, 5,  0, 0, 26, 27, 0, 9, 17, 0,  4, 0,
             8, 0, 9, 0, 10, 11, 3, 17, 0, 2, 0,  7,  0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("('0'≠\"11010001\")≡∊\"abacbacd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "('0'≠\"11010001\")≡∊\"abacbacd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14],
                            runtime[18],
                            runtime[40],
                            CXBQN_NEW(Character, U'0'),
                            CXBQN_NEW(Array, U"11010001"),
                            CXBQN_NEW(Array, U"abacbacd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 16, 0, 1, 0, 4, 0, 0, 0, 3, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↑⟜1≡⟜∊⥊⟜∞)9") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↑⟜1≡⟜∊⥊⟜∞)9");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[22],
                            runtime[26],
                            runtime[40],
                            runtime[56],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, 9)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0,  6, 0, 4, 0, 1, 27, 0,  3,  0,  4,
             0, 0, 27, 0, 5, 0, 4, 0, 2,  27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⥊⟜1≡∊∘↕)6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⥊⟜1≡∊∘↕)6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18], runtime[22], runtime[28],          runtime[40],
        runtime[53], runtime[56], CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 2, 0, 4, 0, 3, 27, 0, 0, 0, 6, 0, 5, 0, 1, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜∊⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜∊⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[40], runtime[56]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡○∊⟜(≍˜˘)\"abcadbba\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡○∊⟜(≍˜˘)\"abcadbba\"");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18], runtime[24], runtime[40], runtime[45],
        runtime[46], runtime[54], runtime[56], CXBQN_NEW(Array, U"abcadbba")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 4, 0, 3, 0, 1,  26, 26, 0,
             6, 0, 2, 0, 5, 0, 0, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⍷⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⍷⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[41], runtime[56]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ba\"≡⍷\"baa\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ba\"≡⍷\"baa\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[41], CXBQN_NEW(Array, U"ba"),
                            CXBQN_NEW(Array, U"baa")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿1‿0‿0≡\"abc\"⍷\"aabcba\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿1‿0‿0≡\"abc\"⍷\"aabcba\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[41],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"aabcba")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 4, 17, 0, 0, 0, 2, 0, 3, 0, 2, 0, 2, 11, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿1≍0‿0)≡(1‿2≍4‿5)⍷3‿3⥊↕9") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿1≍0‿0)≡(1‿2≍4‿5)⍷3‿3⥊↕9");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[24],
        runtime[28],          runtime[41],          CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4),
        CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 9)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0, 3,  16, 0, 1, 0, 10, 0, 10, 11, 2,  17, 0,  4,  0,
             8, 0,  9, 11, 2,  0, 2, 0, 6,  0, 7,  11, 2,  17, 17, 0,  0,
             0, 5,  0, 5,  11, 2, 0, 2, 0,  5, 0,  6,  11, 2,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕3‿0)≡⍷⟜(≍˘)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕3‿0)≡⍷⟜(≍˘)\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[24],          runtime[28],
        runtime[41],          runtime[46],          runtime[56],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 4, 0, 1, 26, 0, 5, 0, 3,  27, 16,
             0, 0, 0, 6, 0, 7, 11, 2, 0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a'(=≡⍷)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'(=≡⍷)\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[15], runtime[18], runtime[41],
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 1, 0, 0, 21, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽¨≡⍉)↕2⥊3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽¨≡⍉)↕2⥊3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18], runtime[22], runtime[28],          runtime[31],
        runtime[32], runtime[47], CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 1, 0, 6, 17, 0,  2,  16, 0,
             4, 0, 0, 0, 5, 0, 3,  26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍉≡<)'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍉≡<)'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[32],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 1, 0, 2, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´⍉⊸≡¨⟨<'a',\"a\",\"abc\",\"\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧´⍉⊸≡¨⟨<'a',\"a\",\"abc\",\"\"⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10],
                            runtime[12],
                            runtime[18],
                            runtime[32],
                            runtime[47],
                            runtime[50],
                            runtime[55],
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 1, 16, 0,  8,  0,  9, 0, 10, 11, 4,  0,  4, 0,
             2, 0, 6, 0, 3,  27, 26, 16, 0, 5, 0,  0,  26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕4)(-˜⌜˜≡·⍉-⌜)↕3‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕4)(-˜⌜˜≡·⍉-⌜)↕3‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[18],          runtime[28],
        runtime[32],          runtime[45],          runtime[48],
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 8, 11, 2, 0, 2, 16, 0,  5,  0,  0, 26, 0, 3, 20, 0,  1,
             0, 4, 0, 5, 0,  4, 0, 0, 26, 26, 26, 21, 0, 6,  0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2×↕3)≡0‿0⍉6+⌜○↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2×↕3)≡0‿0⍉6+⌜○↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[28],          runtime[32],          runtime[48],
        runtime[54],          CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0,  3, 0,  6, 0, 5, 0, 0, 26, 27, 0, 10, 17, 0, 4,  0,  9,
             0, 9, 11, 2, 17, 0, 2, 0, 8, 0, 3,  16, 0, 1,  0,  7, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⍉≡<)4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⟨⟩⊸⍉≡<)4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[32], runtime[55],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(⍉≡⊢)<4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩(⍉≡⊢)<4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[21], runtime[32],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 2, 0, 1, 0, 3, 21, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‿0‿1⥊⟨⟩)≡1‿2‿0‿1⍉↕↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿0‿1⥊⟨⟩)≡1‿2‿0‿1⍉↕↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[28],          runtime[32],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 2, 16, 0, 2, 16, 0, 3, 0, 6, 0, 4, 0,  5, 0,  6,  11,
             4, 17, 0, 0, 11, 0, 0, 1,  0, 4, 0, 5, 0, 6, 11, 3, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕1‿2‿0‿3)≡2<⊸⍉↕↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕1‿2‿0‿3)≡2<⊸⍉↕↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[28],          runtime[32],
                            runtime[55],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 2, 16, 0, 2, 16, 0, 3, 0,  4, 0, 0, 27, 0,  6, 17,
             0, 1, 0, 5, 0,  6, 0, 7,  0, 8, 11, 4, 0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0⊸⍉⊸≡2‿3⥊↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0⊸⍉⊸≡2‿3⥊↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[28],
        runtime[32],          runtime[55],          CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 2, 16, 0, 1, 0, 6, 0, 7,  11, 2,  17,
             0, 0, 0, 4, 0,  3, 0, 4, 0, 5, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‿0‿3‿1‿4≡⍋\"bdace\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿0‿3‿1‿4≡⍋\"bdace\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[34],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Array, U"bdace")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 1, 16, 0, 0, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 11, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‿2‿4‿3‿0‿1≡⍋↓\"deabb\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5‿2‿4‿3‿0‿1≡⍋↓\"deabb\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[27],
                            runtime[34],          CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Array, U"deabb")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 1, 16, 0, 2, 16, 0, 0,  0, 3,  0,
             4, 0, 5, 0, 6,  0, 7, 0,  8, 11, 6, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍋≡⍒)⟨\"\",↕0,0↑<\"abc\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍋≡⍒)⟨\"\",↕0,0↑<\"abc\"⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],           runtime[26],
        runtime[28],          runtime[34],           runtime[35],
        CXBQN_NEW(Number, 0), CXBQN_NEW(Array, U""), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0,  6,  0, 3, 16, 0, 8, 0, 0, 16, 0,  2,
             0, 6, 17, 11, 3, 0, 5,  0, 1, 0, 4, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍋≡↕∘≠)4‿0⥊@") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍋≡↕∘≠)4‿0⥊@");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14],
                            runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[34],
                            runtime[53],
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 2, 0,  6, 0, 7, 11, 2,  17, 0, 0,
             0, 5, 0, 3, 27, 0, 1, 0, 4,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍒≡⌽∘↕∘≠)⟨¯∞,¯1.5,π,∞,'A','a','b'⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍒≡⌽∘↕∘≠)⟨¯∞,¯1.5,π,∞,'A','a','b'⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14],
                            runtime[18],
                            runtime[28],
                            runtime[31],
                            runtime[35],
                            runtime[53],
                            CXBQN_NEW(Number, -1.0 / 0.0),
                            CXBQN_NEW(Number, -1.5),
                            CXBQN_NEW(Number, 3.141592653589793),
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Character, U'A'),
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Character, U'b')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 7, 0, 8, 0, 9, 0,  10, 0, 11, 0, 12, 11, 7,  0, 0,
             0, 5, 0, 2, 0, 5, 0, 3, 27, 27, 0, 1,  0, 4,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE(
    "(⍒≡⌽∘↕∘≠)⟨↕0,¯1.1,¯1,¯1‿¯∞,¯1‿0,¯1‿0‿0,¯1‿∞,0,6⥊0,1e¯20,1,1+1e¯15⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical(
      "test='{}'",
      "(⍒≡⌽∘↕∘≠)⟨↕0,¯1.1,¯1,¯1‿¯∞,¯1‿0,¯1‿0‿0,¯1‿∞,0,6⥊0,1e¯20,1,1+1e¯15⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[14],
                            runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[31],
                            runtime[35],
                            runtime[53],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -1.1),
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, -1.0 / 0.0),
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 9.999999999999999e-21),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 1e-15)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8,  0, 4,  16, 0,  9,  0,  10, 0,  10, 0,  11, 11, 2,  0,
             10, 0,  8, 11, 2,  0,  10, 0,  8,  0,  8,  11, 3,  0,  10, 0,
             12, 11, 2, 0,  8,  0,  8,  0,  3,  0,  13, 17, 0,  14, 0,  15,
             0,  16, 0, 0,  0,  15, 17, 11, 12, 0,  1,  0,  7,  0,  4,  0,
             7,  0,  5, 27, 27, 0,  2,  0,  6,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍒≡⌽∘↕∘≠)(<∾⟨↕0,1,1‿1,2‿1‿1,2‿1,2,1‿2,2‿2,3⟩⥊¨<)'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(⍒≡⌽∘↕∘≠)(<∾⟨↕0,1,1‿1,2‿1‿1,2‿1,2,1‿2,2‿2,3⟩⥊¨<)'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[14],          runtime[18],
        runtime[22],          runtime[23],          runtime[28],
        runtime[31],          runtime[35],          runtime[47],
        runtime[53],          CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0,  0,  0,  8,  0,  3,  26, 0,  10, 0,  5,  16, 0,  11,
             0,  11, 0,  11, 11, 2,  0,  12, 0,  11, 0,  11, 11, 3,  0,  12,
             0,  11, 11, 2,  0,  12, 0,  11, 0,  12, 11, 2,  0,  12, 0,  12,
             11, 2,  0,  13, 11, 9,  21, 0,  4,  0,  0,  21, 16, 0,  1,  0,
             9,  0,  5,  0,  9,  0,  6,  27, 27, 0,  2,  0,  7,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⍋≡↕∘≠)⥊⍉(↕5)⥊⟜1⊸⥊⌜1‿'b'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⍋≡↕∘≠)⥊⍉(↕5)⥊⟜1⊸⥊⌜1‿'b'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14],
                            runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[32],
                            runtime[34],
                            runtime[48],
                            runtime[53],
                            runtime[55],
                            runtime[56],
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Character, U'b')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0,  12, 11, 2, 0,  6,  0, 2,  0,  8, 0,  11, 0, 9,
             0,  2,  27, 27, 26, 0, 10, 0,  3, 16, 17, 0, 4,  16, 0, 2,
             16, 0,  0,  0,  7,  0, 3,  27, 0, 1,  0,  5, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊢≡○⍋(0‿1+≠)⥊⊢)⟨¯2,'a',1,'f'⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊢≡○⍋(0‿1+≠)⥊⊢)⟨¯2,'a',1,'f'⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[14],
                            runtime[18],
                            runtime[21],
                            runtime[22],
                            runtime[34],
                            runtime[54],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, -2),
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Character, U'f')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 10, 0, 8,  0,  11, 11, 4, 0, 3, 0, 4,  0, 1, 0,  0,  0,
             7, 0, 8, 11, 2, 21, 21, 0,  5,  0, 6, 0, 2, 27, 0, 3, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1,2,3,1‿2,2‿1,1‿3,2‿2,3‿1⟩(⥊⊸(≠∘⊣∾˜¯1⊸⊑⊸(⌊∾⊣)∾×´⊸⌊)⌜≡○(⍋⥊)⥊⌜⟜(+`"
          "∘≠⟜(↕6)¨))↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1,2,3,1‿2,2‿1,1‿3,2‿2,3‿1⟩(⥊⊸(≠∘⊣∾˜¯1⊸⊑⊸(⌊∾⊣)"
                                "∾×´⊸⌊)⌜≡○(⍋⥊)⥊⌜⟜(+`∘≠⟜(↕6)¨))↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[6],
        runtime[14],          runtime[18],          runtime[20],
        runtime[22],          runtime[23],          runtime[28],
        runtime[34],          runtime[37],          runtime[45],
        runtime[47],          runtime[48],          runtime[50],
        runtime[52],          runtime[53],          runtime[54],
        runtime[55],          runtime[56],          CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, -1),
        CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  25, 0,  8,  16, 0,  12, 0,  24, 0,  8,  16, 0,  19, 0,  3,  0,
             16, 0,  15, 0,  0,  26, 27, 27, 26, 0,  19, 0,  13, 0,  6,  26, 27,
             0,  6,  0,  9,  20, 0,  17, 0,  4,  27, 0,  13, 0,  2,  0,  18, 0,
             14, 0,  1,  26, 27, 0,  7,  0,  5,  0,  7,  0,  2,  21, 0,  18, 0,
             10, 0,  18, 0,  23, 27, 27, 21, 0,  11, 0,  7,  26, 0,  5,  0,  16,
             0,  3,  27, 21, 0,  18, 0,  6,  27, 26, 21, 0,  20, 0,  21, 0,  22,
             0,  20, 0,  21, 11, 2,  0,  21, 0,  20, 11, 2,  0,  20, 0,  22, 11,
             2,  0,  21, 0,  21, 11, 2,  0,  22, 0,  20, 11, 2,  11, 8,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((⥊˜-⥊⟜2‿0)∘≠≡⍋+⍒)2/↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((⥊˜-⥊⟜2‿0)∘≠≡⍋+⍒)2/↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[1],           runtime[14],
        runtime[18],          runtime[22],          runtime[28],
        runtime[33],          runtime[34],          runtime[35],
        runtime[45],          runtime[53],          runtime[56],
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0, 5, 16, 0, 6,  0, 12, 17, 0,  8,  0,  0, 0,  7,
             21, 0,  3, 0, 2,  0, 10, 0, 12, 0,  13, 11, 2,  0, 11, 0,
             4,  27, 0, 1, 0,  9, 0,  4, 26, 21, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"edcba\"≡∨\"bdace\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"edcba\"≡∨\"bdace\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[11], runtime[18],
                            CXBQN_NEW(Array, U"edcba"),
                            CXBQN_NEW(Array, U"bdace")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕7)≡∧⍋|⟜⌽1+↕7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕7)≡∧⍋|⟜⌽1+↕7");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[8],          runtime[10], runtime[18],
        runtime[28],          runtime[31],         runtime[34], runtime[56],
        CXBQN_NEW(Number, 7), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0, 4,  16, 0, 0,  0, 9, 17, 0, 5, 0, 7,  0,  1, 27,
             16, 0, 6, 16, 0,  2, 16, 0, 3, 0,  8, 0, 4, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨1,3,∞,'e','i'⟩ (⍋≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍋∘∾) (2÷˜↕8)∾\"aegz\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "⟨1,3,∞,'e','i'⟩ (⍋≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍋∘∾) (2÷˜↕8)∾\"aegz\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[3],
                            runtime[13],
                            runtime[14],
                            runtime[18],
                            runtime[20],
                            runtime[21],
                            runtime[23],
                            runtime[27],
                            runtime[28],
                            runtime[34],
                            runtime[36],
                            runtime[45],
                            runtime[52],
                            runtime[53],
                            runtime[55],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 8),
                            CXBQN_NEW(Character, U'e'),
                            CXBQN_NEW(Character, U'i'),
                            CXBQN_NEW(Array, U"aegz")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  23, 0,  7, 0,  20, 0,  9,  16, 0,  12, 0,  1,  26, 0,  19,
             17, 17, 0,  7, 0,  14, 0,  10, 27, 0,  2,  0,  14, 0,  13, 0,
             0,  26, 27, 0, 11, 0,  15, 0,  10, 27, 0,  6,  21, 0,  8,  0,
             5,  21, 0,  5, 0,  14, 0,  3,  27, 21, 0,  4,  0,  10, 21, 0,
             16, 0,  17, 0, 18, 0,  21, 0,  22, 11, 5,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨'z','d',1‿0,0⟩ (⍒≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍒∘∾) (2÷˜↕8)∾\"aegz\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "⟨'z','d',1‿0,0⟩ (⍒≡≠∘⊣(⊣↓⊢⍋⊸⊏+`∘>)⍒∘∾) (2÷˜↕8)∾\"aegz\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[3],
                            runtime[13],
                            runtime[14],
                            runtime[18],
                            runtime[20],
                            runtime[21],
                            runtime[23],
                            runtime[27],
                            runtime[28],
                            runtime[34],
                            runtime[35],
                            runtime[36],
                            runtime[45],
                            runtime[52],
                            runtime[53],
                            runtime[55],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 8),
                            CXBQN_NEW(Character, U'z'),
                            CXBQN_NEW(Character, U'd'),
                            CXBQN_NEW(Array, U"aegz")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  23, 0,  7, 0,  20, 0,  9,  16, 0,  13, 0,  1,  26, 0,  19,
             17, 17, 0,  7, 0,  15, 0,  11, 27, 0,  2,  0,  15, 0,  14, 0,
             0,  26, 27, 0, 12, 0,  16, 0,  10, 27, 0,  6,  21, 0,  8,  0,
             5,  21, 0,  5, 0,  15, 0,  3,  27, 21, 0,  4,  0,  11, 21, 0,
             21, 0,  22, 0, 17, 0,  18, 11, 2,  0,  18, 11, 4,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<∘⌈≡(↕6)⊸⍋)2.5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<∘⌈≡(↕6)⊸⍋)2.5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[7],  runtime[12],          runtime[18],
        runtime[28], runtime[34],          runtime[53],
        runtime[55], CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 2.5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 4, 0, 6, 0, 7, 0,  3,  16, 27,
             0, 2, 0, 0, 0, 5, 0, 1, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<1)≡(↕2‿3)⍋1+↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<1)≡(↕2‿3)⍋1+↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[12],
                            runtime[18],          runtime[28],
                            runtime[34],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  7, 0, 3, 16, 0,  0, 0, 5, 17, 0, 4, 0,  6,  0, 7,
             11, 2, 0, 3, 16, 17, 0, 2, 0, 5,  0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<0)≡\"abc\"⥊⊸⍒○<≍\"acc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<0)≡\"abc\"⥊⊸⍒○<≍\"acc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[22],
                            runtime[24],
                            runtime[35],
                            runtime[54],
                            runtime[55],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"acc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9,  0, 3, 16, 0, 0, 0, 5, 0, 4, 0,  6,  0, 2,
             27, 27, 0, 8, 17, 0, 1, 0, 7, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
