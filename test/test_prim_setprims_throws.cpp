/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-18T17:59:09
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("'a'+'c'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'+'c'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[0], std::make_shared<Character>(U'a'),
                   std::make_shared<Character>(U'c')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'a\'+\'c\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←-⋄f+2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←-⋄f+2");
  CompileParams p({0, 1, 33, 0, 0, 48, 6, 0, 2, 0, 0, 34, 0, 0, 17, 7},
                  {runtime[0], runtime[1], 2}, {{0, 1, 0}}, {{0, 1}},
                  {{2, 2, 0, 0, 0, 0, 1, 6, 6, 5, 5, 4, 4, 4, 5, 4},
                   {2, 2, 0, 0, 0, 0, 1, 6, 6, 5, 5, 4, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"F←-⋄f+2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("97-'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "97-'a'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[1], 97, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{3, 3, 2, 2, 0, 0, 2, 0}, {5, 5, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"97-\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("@-1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "@-1");
  CompileParams p({0, 1, 0, 0, 0, 2, 17, 7},
                  {runtime[1], 1, std::make_shared<Character>(U'\0')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0}, {2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"@-1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("-'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-'a'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[1], std::make_shared<Character>(U'a')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"-\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←÷⋄-f") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←÷⋄-f");
  CompileParams p({0, 1, 33, 0, 0, 48, 6, 34, 0, 0, 0, 0, 16, 7},
                  {runtime[1], runtime[3]}, {{0, 1, 0}}, {{0, 1}},
                  {{2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 4, 4, 4, 4},
                   {2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 4, 4, 4, 4}},
                  std::make_shared<Array>(U"F←÷⋄-f"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2×'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2×'a'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[2], 2, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0}, {4, 4, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"2×\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("÷'b'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "÷'b'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[3], std::make_shared<Character>(U'b')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"÷\'b\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←√-⋄÷f") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←√-⋄÷f");
  CompileParams p({0, 0, 0, 2, 20, 33, 0, 0, 48, 6, 34, 0, 0, 0, 1, 16, 7},
                  {runtime[1], runtime[3], runtime[5]}, {{0, 1, 0}}, {{0, 1}},
                  {{3, 3, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 5, 5, 5, 5},
                   {3, 3, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 5, 5, 5, 5}},
                  std::make_shared<Array>(U"F←√-⋄÷f"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⋆'π'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⋆'π'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[4], std::make_shared<Character>(U'π')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⋆\'π\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("'e'⋆'π'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'e'⋆'π'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[4], std::make_shared<Character>(U'e'),
                   std::make_shared<Character>(U'π')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'e\'⋆\'π\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←⌈⋄⌊f") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←⌈⋄⌊f");
  CompileParams p({0, 1, 33, 0, 0, 48, 6, 34, 0, 0, 0, 0, 16, 7},
                  {runtime[6], runtime[7]}, {{0, 1, 0}}, {{0, 1}},
                  {{2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 4, 4, 4, 4},
                   {2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 4, 4, 4, 4}},
                  std::make_shared<Array>(U"F←⌈⋄⌊f"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←+⋄G←-⋄f≤g") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←+⋄G←-⋄f≤g");
  CompileParams p({0,  0, 33, 0, 0, 48, 6, 0,  1, 33, 0,  1,
                   48, 6, 34, 0, 1, 0,  2, 34, 0, 0,  17, 7},
                  {runtime[0], runtime[1], runtime[16]}, {{0, 1, 0}}, {{0, 2}},
                  {{2, 2, 0,  0,  0,  0, 1, 6, 6, 4, 4, 4,
                    4, 5, 10, 10, 10, 9, 9, 8, 8, 8, 9, 8},
                   {2, 2, 0,  0,  0,  0, 1, 6, 6, 4, 4, 4,
                    4, 5, 10, 10, 10, 9, 9, 8, 8, 8, 9, 8}},
                  std::make_shared<Array>(U"F←+⋄G←-⋄f≤g"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("!0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "!0");
  CompileParams p({0, 1, 0, 0, 16, 7}, {runtime[43], 0}, {{0, 1, 0}}, {{0, 0}},
                  {{1, 1, 0, 0, 0, 0}, {1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"!0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("\"error\"!\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"error\"!\"abc\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[43], std::make_shared<Array>(U"error"),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{8, 8, 7, 7, 0, 0, 7, 0}, {12, 12, 7, 7, 6, 6, 7, 6}},
                  std::make_shared<Array>(U"\"error\"!\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("√'x'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "√'x'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[5], std::make_shared<Character>(U'x')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"√\'x\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("'a'∧¯1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'∧¯1");
  CompileParams p({0, 1, 0, 0, 0, 2, 17, 7},
                  {runtime[10], -1, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {5, 5, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'a\'∧¯1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←-⋄2∨f") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←-⋄2∨f");
  CompileParams p({0, 0, 33, 0, 0, 48, 6, 34, 0, 0, 0, 1, 0, 2, 17, 7},
                  {runtime[1], runtime[11], 2}, {{0, 1, 0}}, {{0, 1}},
                  {{2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 5, 5, 4, 4, 5, 4},
                   {2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 5, 5, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"F←-⋄2∨f"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("¬'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬'a'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[9], std::make_shared<Character>(U'a')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"¬\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2¬'c'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2¬'c'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[9], 2, std::make_shared<Character>(U'c')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0}, {4, 4, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"2¬\'c\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←{𝕩}⋄0¬f") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←{𝕩}⋄0¬f");
  CompileParams p(
      {1, 1, 33, 0, 0, 48, 6, 34, 0, 0, 0, 0, 0, 1, 17, 7, 34, 0, 1, 7},
      {runtime[9], 0}, {{0, 1, 0}, {0, 0, 1}}, {{0, 1}, {16, 3}},
      {{2, 2, 0, 0, 0, 0, 1, 8, 8, 8, 7, 7, 6, 6, 7, 2, 3, 3, 3, 3},
       {4, 4, 0, 0, 0, 0, 1, 8, 8, 8, 7, 7, 6, 6, 7, 4, 3, 3, 3, 3}},
      std::make_shared<Array>(U"F←{𝕩}⋄0¬f"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("F←+-⋄|f") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←+-⋄|f");
  CompileParams p({0, 1, 0, 0, 20, 33, 0, 0, 48, 6, 34, 0, 0, 0, 2, 16, 7},
                  {runtime[0], runtime[1], runtime[8]}, {{0, 1, 0}}, {{0, 1}},
                  {{3, 3, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 5, 5, 5, 5},
                   {3, 3, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 5, 5, 5, 5}},
                  std::make_shared<Array>(U"F←+-⋄|f"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("26|'A'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "26|'A'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[8], 26, std::make_shared<Character>(U'A')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{3, 3, 2, 2, 0, 0, 2, 0}, {5, 5, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"26|\'A\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊑\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊑\"\"");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[37], std::make_shared<Array>(U"")}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {2, 2, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊑\"\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊑2‿0⥊⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊑2‿0⥊⟨⟩");
  CompileParams p({11, 0, 0, 0, 0, 2, 0, 3, 11, 2, 17, 0, 1, 16, 7},
                  {runtime[22], runtime[37], 2, 0}, {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 1, 1, 3, 3, 3, 3, 4, 0, 0, 0, 0},
                   {6, 6, 4, 4, 1, 1, 3, 3, 3, 3, 4, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊑2‿0⥊⟨⟩"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("+´11") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "+´11");
  CompileParams p({0, 2, 0, 1, 0, 0, 26, 16, 7}, {runtime[0], runtime[50], 11},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0, 0}, {3, 3, 1, 1, 0, 0, 1, 1, 0}},
                  std::make_shared<Array>(U"+´11"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("-´<'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-´<'a'");
  CompileParams p(
      {0, 3, 0, 1, 16, 0, 2, 0, 0, 26, 16, 7},
      {runtime[1], runtime[12], runtime[50], std::make_shared<Character>(U'a')},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0, 0},
       {5, 5, 2, 2, 2, 1, 1, 0, 0, 1, 1, 0}},
      std::make_shared<Array>(U"-´<\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("×´3‿1⥊\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "×´3‿1⥊\"abc\"");
  CompileParams p({0, 5, 0, 1, 0, 3, 0, 4, 11, 2, 17, 0, 2, 0, 0, 26, 16, 7},
                  {runtime[2], runtime[22], runtime[50], 3, 1,
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{6, 6, 5, 5, 2, 2, 4, 4, 4, 4, 5, 1, 1, 0, 0, 1, 0, 0},
                   {10, 10, 5, 5, 2, 2, 4, 4, 4, 4, 5, 1, 1, 0, 0, 1, 1, 0}},
                  std::make_shared<Array>(U"×´3‿1⥊\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2‿3⊢¨4‿5‿6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿3⊢¨4‿5‿6");
  CompileParams p(
      {0, 4, 0, 5, 0, 6, 11, 3, 0, 1, 0, 0, 26, 0, 2, 0, 3, 11, 2, 17, 7},
      {runtime[21], runtime[47], 2, 3, 4, 5, 6}, {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 7, 7, 9, 9, 9, 9, 4, 4, 3, 3, 4, 0, 0, 2, 2, 2, 2, 3, 2},
       {5, 5, 7, 7, 9, 9, 9, 9, 4, 4, 3, 3, 4, 0, 0, 2, 2, 2, 2, 4, 2}},
      std::make_shared<Array>(U"2‿3⊢¨4‿5‿6"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("\"abcd\"-\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"-\"a\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[1], std::make_shared<Array>(U"abcd"),
                   std::make_shared<Array>(U"a")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 0, 0, 6, 0}, {9, 9, 6, 6, 5, 5, 6, 5}},
                  std::make_shared<Array>(U"\"abcd\"-\"a\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(↕4)×(↕3)⊢⌜↕2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕4)×(↕3)⊢⌜↕2");
  CompileParams p({0, 6,  0,  2, 16, 0, 3, 0, 1, 26, 0,  5, 0,
                   2, 16, 17, 0, 0,  0, 4, 0, 2, 16, 17, 7},
                  {runtime[2], runtime[21], runtime[28], runtime[48], 4, 3, 2},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 11, 11, 11, 10, 10, 9, 9, 10, 7, 7, 6,
                    6,  6,  9,  4,  4,  2,  2,  1, 1, 1,  4, 0},
                   {12, 12, 11, 11, 11, 10, 10, 9, 9, 10, 7, 7, 6,
                    6,  6,  10, 4,  4,  2,  2,  1, 1, 1,  4, 3}},
                  std::make_shared<Array>(U"(↕4)×(↕3)⊢⌜↕2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("10⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "10⊑↕10");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7}, {runtime[28], runtime[37], 10},
      {{0, 1, 0}}, {{0, 0}},
      {{4, 4, 3, 3, 3, 2, 2, 0, 0, 2, 0}, {5, 5, 3, 3, 3, 2, 2, 1, 1, 2, 1}},
      std::make_shared<Array>(U"10⊑↕10"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("¯11⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯11⊑↕10");
  CompileParams p(
      {0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7}, {runtime[28], runtime[37], -11, 10},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 4, 4, 4, 3, 3, 2, 2, 3, 2}},
      std::make_shared<Array>(U"¯11⊑↕10"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("0.5⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0.5⊑↕10");
  CompileParams p(
      {0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7}, {runtime[28], runtime[37], 0.5, 10},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 4, 4, 4, 3, 3, 2, 2, 3, 2}},
      std::make_shared<Array>(U"0.5⊑↕10"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("'x'⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'x'⊑↕10");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 1, 0, 3, 17, 7},
      {runtime[28], runtime[37], 10, std::make_shared<Character>(U'x')},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 4, 4, 4, 3, 3, 2, 2, 3, 2}},
      std::make_shared<Array>(U"\'x\'⊑↕10"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨⟩⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩⊑↕10");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 1, 11, 0, 17, 7}, {runtime[28], runtime[37], 10},
      {{0, 1, 0}}, {{0, 0}},
      {{4, 4, 3, 3, 3, 2, 2, 0, 0, 2, 0}, {5, 5, 3, 3, 3, 2, 2, 1, 1, 2, 1}},
      std::make_shared<Array>(U"⟨⟩⊑↕10"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2⊑3+⌜○↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2⊑3+⌜○↕4");
  CompileParams p(
      {0, 7, 0, 1, 0, 4, 0, 3, 0, 0, 26, 27, 0, 6, 17, 0, 2, 0, 5, 17, 7},
      {runtime[0], runtime[28], runtime[37], runtime[48], runtime[54], 2, 3, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 4, 5, 2, 2, 3, 1, 1, 0, 0, 1, 0},
       {7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 4, 5, 2, 2, 6, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"2⊑3+⌜○↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("21‿12‿03≡⟨2‿¯3‿0,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "21‿12‿03≡⟨2‿¯3‿0,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4");
  CompileParams p(
      {0,  15, 0, 3,  16, 0,  5,  0, 0,  26, 0, 8, 0,  3, 16, 0,  1,  0, 14, 17,
       17, 0,  4, 0,  9,  0,  10, 0, 11, 11, 3, 0, 12, 0, 9,  11, 2,  0, 11, 0,
       13, 11, 2, 11, 3,  17, 0,  2, 0,  6,  0, 7, 0,  8, 11, 3,  17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[28], runtime[37],
       runtime[48], 21, 12, 3, 2, -3, 0, 1, -1, 10, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{37, 37, 36, 36, 36, 35, 35, 34, 34, 35, 32, 32, 31, 31, 31,
        30, 30, 28, 28, 30, 34, 26, 26, 10, 10, 12, 12, 15, 15, 15,
        15, 17, 17, 19, 19, 19, 19, 21, 21, 23, 23, 23, 23, 9,  9,
        26, 8,  8,  0,  0,  3,  3,  6,  6,  6,  6,  8,  6},
       {37, 37, 36, 36, 36, 35, 35, 34, 34, 35, 32, 32, 31, 31, 31,
        30, 30, 29, 29, 30, 35, 26, 26, 10, 10, 13, 13, 15, 15, 15,
        15, 17, 17, 19, 19, 19, 19, 21, 21, 24, 24, 24, 24, 25, 25,
        26, 8,  8,  1,  1,  4,  4,  7,  7,  7,  7,  8,  7}},
      std::make_shared<Array>(U"21‿12‿03≡⟨2‿¯3‿0,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨2,⟨3⟩⟩⊑↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨2,⟨3⟩⟩⊑↕4");
  CompileParams p({0, 4, 0, 0, 16, 0, 1, 0, 2, 0, 3, 11, 1, 11, 2, 17, 7},
                  {runtime[28], runtime[37], 2, 3, 4}, {{0, 1, 0}}, {{0, 0}},
                  {{9, 9, 8, 8, 8, 7, 7, 1, 1, 4, 4, 3, 3, 0, 0, 7, 0},
                   {9, 9, 8, 8, 8, 7, 7, 1, 1, 4, 4, 5, 5, 6, 6, 7, 6}},
                  std::make_shared<Array>(U"⟨2,⟨3⟩⟩⊑↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(<2)⊑↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<2)⊑↕4");
  CompileParams p({0, 4, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[28], runtime[37], 2, 4}, {{0, 1, 0}},
                  {{0, 0}},
                  {{6, 6, 5, 5, 5, 4, 4, 2, 2, 1, 1, 1, 4, 0},
                   {6, 6, 5, 5, 5, 4, 4, 2, 2, 1, 1, 1, 4, 3}},
                  std::make_shared<Array>(U"(<2)⊑↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(≍≍2)⊑↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍≍2)⊑↕4");
  CompileParams p({0, 4, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 0, 0, 16, 17, 7},
                  {runtime[24], runtime[28], runtime[37], 2, 4}, {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 6, 5, 5, 3, 3, 2, 2, 2, 1, 1, 1, 5, 0},
                   {7, 7, 6, 6, 6, 5, 5, 3, 3, 2, 2, 2, 1, 1, 1, 5, 4}},
                  std::make_shared<Array>(U"(≍≍2)⊑↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕@") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕@");
  CompileParams p(
      {0, 1, 0, 0, 16, 7}, {runtime[28], std::make_shared<Character>(U'\0')},
      {{0, 1, 0}}, {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {1, 1, 0, 0, 0, 0}},
      std::make_shared<Array>(U"↕@"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕2.4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕2.4");
  CompileParams p({0, 1, 0, 0, 16, 7}, {runtime[28], 2.4}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"↕2.4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕<6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕<6");
  CompileParams p({0, 2, 0, 0, 16, 0, 1, 16, 7}, {runtime[12], runtime[28], 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 1, 0, 0, 0, 0}, {2, 2, 1, 1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"↕<6"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕≍2‿3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕≍2‿3");
  CompileParams p({0, 2, 0, 3, 11, 2, 0, 0, 16, 0, 1, 16, 7},
                  {runtime[24], runtime[28], 2, 3}, {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 4, 4, 4, 4, 1, 1, 1, 0, 0, 0, 0},
                   {2, 2, 4, 4, 4, 4, 1, 1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"↕≍2‿3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕¯1‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕¯1‿2");
  CompileParams p(
      {0, 1, 0, 2, 11, 2, 0, 0, 16, 7}, {runtime[28], -1, 2}, {{0, 1, 0}},
      {{0, 0}},
      {{1, 1, 4, 4, 4, 4, 0, 0, 0, 0}, {2, 2, 4, 4, 4, 4, 0, 0, 0, 0}},
      std::make_shared<Array>(U"↕¯1‿2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("-˙◶÷‿× 4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-˙◶÷‿× 4");
  CompileParams p(
      {0, 5, 0, 2, 0, 1, 11, 2, 0, 4, 0, 3, 0, 0, 26, 27, 16, 7},
      {runtime[1], runtime[2], runtime[3], runtime[44], runtime[59], 4},
      {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 3, 3, 5, 5, 5, 5, 2, 2, 1, 1, 0, 0, 1, 2, 0, 0},
       {7, 7, 3, 3, 5, 5, 5, 5, 2, 2, 1, 1, 0, 0, 1, 2, 5, 0}},
      std::make_shared<Array>(U"-˙◶÷‿× 4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("¯3⥊3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯3⥊3");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7}, {runtime[22], -3, 3}, {{0, 1, 0}},
                  {{0, 0}},
                  {{3, 3, 2, 2, 0, 0, 2, 0}, {3, 3, 2, 2, 1, 1, 2, 1}},
                  std::make_shared<Array>(U"¯3⥊3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1.6‿2.5⥊↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1.6‿2.5⥊↕4");
  CompileParams p({0, 4, 0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
                  {runtime[22], runtime[28], 1.6, 2.5, 4}, {{0, 1, 0}},
                  {{0, 0}},
                  {{9, 9, 8, 8, 8, 7, 7, 0, 0, 4, 4, 4, 4, 7, 4},
                   {9, 9, 8, 8, 8, 7, 7, 2, 2, 6, 6, 6, 6, 7, 6}},
                  std::make_shared<Array>(U"1.6‿2.5⥊↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(≍2‿3)⥊↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍2‿3)⥊↕3");
  CompileParams p({0, 4, 0, 2, 16, 0, 0, 0, 3, 0, 4, 11, 2, 0, 1, 16, 17, 7},
                  {runtime[22], runtime[24], runtime[28], 2, 3}, {{0, 1, 0}},
                  {{0, 0}},
                  {{8, 8, 7, 7, 7, 6, 6, 2, 2, 4, 4, 4, 4, 1, 1, 1, 6, 0},
                   {8, 8, 7, 7, 7, 6, 6, 2, 2, 4, 4, 4, 4, 1, 1, 1, 6, 5}},
                  std::make_shared<Array>(U"(≍2‿3)⥊↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("\"     \"≡5⥊\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"     \"≡5⥊\"\"");
  CompileParams p({0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[22], 5,
                   std::make_shared<Array>(U"     "),
                   std::make_shared<Array>(U"")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 9, 9, 8, 8, 9, 7, 7, 0, 0, 7, 0},
                   {11, 11, 9, 9, 8, 8, 9, 7, 7, 6, 6, 7, 6}},
                  std::make_shared<Array>(U"\"     \"≡5⥊\"\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("4‿∘⥊↕15") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4‿∘⥊↕15");
  CompileParams p({0, 4, 0, 1, 16, 0, 0, 0, 3, 0, 2, 11, 2, 17, 7},
                  {runtime[22], runtime[28], runtime[53], 4, 15}, {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {6, 6, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"4‿∘⥊↕15"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE(">↕¨2‿3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", ">↕¨2‿3");
  CompileParams p({0, 3, 0, 4, 11, 2, 0, 2, 0, 1, 26, 16, 0, 0, 16, 7},
                  {runtime[13], runtime[28], runtime[47], 2, 3}, {{0, 1, 0}},
                  {{0, 0}},
                  {{3, 3, 5, 5, 5, 5, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0},
                   {3, 3, 5, 5, 5, 5, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0}},
                  std::make_shared<Array>(U">↕¨2‿3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE(">⟨⥊2,3⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", ">⟨⥊2,3⟩");
  CompileParams p({0, 2, 0, 1, 16, 0, 3, 11, 2, 0, 0, 16, 7},
                  {runtime[13], runtime[22], 2, 3}, {{0, 1, 0}}, {{0, 0}},
                  {{3, 3, 2, 2, 2, 5, 5, 1, 1, 0, 0, 0, 0},
                   {3, 3, 2, 2, 2, 5, 5, 6, 6, 0, 0, 0, 0}},
                  std::make_shared<Array>(U">⟨⥊2,3⟩"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE(">(≍⋈⊢)↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", ">(≍⋈⊢)↕4");
  CompileParams p(
      {0, 5, 0, 4, 16, 0, 1, 0, 3, 0, 2, 21, 16, 0, 0, 16, 7},
      {runtime[13], runtime[21], runtime[24], runtime[25], runtime[28], 4},
      {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 6, 6, 6, 4, 4, 3, 3, 2, 2, 3, 1, 0, 0, 0, 0},
       {7, 7, 6, 6, 6, 4, 4, 3, 3, 2, 2, 3, 5, 0, 0, 0, 0}},
      std::make_shared<Array>(U">(≍⋈⊢)↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1‿0≍1‿2‿3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿0≍1‿2‿3");
  CompileParams p({0, 1, 0, 3, 0, 4, 11, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[24], 1, 0, 2, 3}, {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 6, 6, 8, 8, 8, 8, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {4, 4, 6, 6, 8, 8, 8, 8, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"1‿0≍1‿2‿3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("≍⟜≍↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⟜≍↕3");
  CompileParams p({0, 3, 0, 1, 16, 0, 0, 0, 2, 0, 0, 27, 16, 7},
                  {runtime[24], runtime[28], runtime[56], 3}, {{0, 1, 0}},
                  {{0, 0}},
                  {{4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0},
                   {4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
                  std::make_shared<Array>(U"≍⟜≍↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽⎉1.1 ↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉1.1 ↕4");
  CompileParams p({0, 4, 0, 0, 16, 0, 3, 0, 2, 0, 1, 27, 16, 7},
                  {runtime[28], runtime[31], runtime[60], 1.1, 4}, {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 6, 2, 2, 1, 1, 0, 0, 1, 0, 0},
                   {7, 7, 6, 6, 6, 4, 4, 1, 1, 0, 0, 1, 4, 0}},
                  std::make_shared<Array>(U"⌽⎉1.1 ↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽⎉'x' ↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉'x' ↕4");
  CompileParams p({0, 3, 0, 0, 16, 0, 4, 0, 2, 0, 1, 27, 16, 7},
                  {runtime[28], runtime[31], runtime[60], 4,
                   std::make_shared<Character>(U'x')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 6, 2, 2, 1, 1, 0, 0, 1, 0, 0},
                   {7, 7, 6, 6, 6, 4, 4, 1, 1, 0, 0, 1, 4, 0}},
                  std::make_shared<Array>(U"⌽⎉\'x\' ↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽⎉(<<0) ↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉(<<0) ↕4");
  CompileParams p(
      {0, 5, 0, 1, 16, 0, 4, 0, 0, 16, 0, 0, 16, 0, 3, 0, 2, 27, 16, 7},
      {runtime[12], runtime[28], runtime[31], runtime[60], 0, 4}, {{0, 1, 0}},
      {{0, 0}},
      {{9, 9, 8, 8, 8, 5, 5, 4, 4, 4, 3, 3, 3, 1, 1, 0, 0, 1, 0, 0},
       {9, 9, 8, 8, 8, 5, 5, 4, 4, 4, 3, 3, 3, 1, 1, 0, 0, 1, 6, 0}},
      std::make_shared<Array>(U"⌽⎉(<<0) ↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽⎉≍ ↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉≍ ↕4");
  CompileParams p({0, 4, 0, 1, 16, 0, 0, 0, 3, 0, 2, 27, 16, 7},
                  {runtime[24], runtime[28], runtime[31], runtime[60], 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 4, 2, 2, 1, 1, 0, 0, 1, 0, 0},
                   {5, 5, 4, 4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
                  std::make_shared<Array>(U"⌽⎉≍ ↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽⚇2‿2.5 ↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⚇2‿2.5 ↕3");
  CompileParams p({0, 5, 0, 0, 16, 0, 3, 0, 4, 11, 2, 0, 2, 0, 1, 27, 16, 7},
                  {runtime[28], runtime[31], runtime[61], 2, 2.5, 3},
                  {{0, 1, 0}}, {{0, 0}},
                  {{9, 9, 8, 8, 8, 2, 2, 4, 4, 4, 4, 1, 1, 0, 0, 1, 0, 0},
                   {9, 9, 8, 8, 8, 2, 2, 6, 6, 6, 6, 1, 1, 0, 0, 1, 6, 0}},
                  std::make_shared<Array>(U"⌽⚇2‿2.5 ↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2+⍟1‿'c'4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2+⍟1‿'c'4");
  CompileParams p(
      {0, 4, 0, 3, 0, 5, 11, 2, 0, 1, 0, 0, 27, 0, 2, 17, 7},
      {runtime[0], runtime[62], 2, 1, 4, std::make_shared<Character>(U'c')},
      {{0, 1, 0}}, {{0, 0}},
      {{8, 8, 3, 3, 5, 5, 5, 5, 2, 2, 1, 1, 2, 0, 0, 1, 0},
       {8, 8, 3, 3, 7, 7, 7, 7, 2, 2, 1, 1, 2, 0, 0, 7, 0}},
      std::make_shared<Array>(U"2+⍟1‿\'c\'4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⋆⍟1.5 2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⋆⍟1.5 2");
  CompileParams p(
      {0, 3, 0, 2, 0, 1, 0, 0, 27, 16, 7}, {runtime[4], runtime[62], 1.5, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {6, 6, 4, 4, 1, 1, 0, 0, 1, 4, 0}},
      std::make_shared<Array>(U"⋆⍟1.5 2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("+`4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "+`4");
  CompileParams p({0, 2, 0, 1, 0, 0, 26, 16, 7}, {runtime[0], runtime[52], 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0, 0}, {2, 2, 1, 1, 0, 0, 1, 1, 0}},
                  std::make_shared<Array>(U"+`4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("+`<'c'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "+`<'c'");
  CompileParams p(
      {0, 3, 0, 1, 16, 0, 2, 0, 0, 26, 16, 7},
      {runtime[0], runtime[12], runtime[52], std::make_shared<Character>(U'c')},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0, 0},
       {5, 5, 2, 2, 2, 1, 1, 0, 0, 1, 1, 0}},
      std::make_shared<Array>(U"+`<\'c\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("3‿4+`4+⌜○↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3‿4+`4+⌜○↕3");
  CompileParams p(
      {0,  5, 0, 1, 0, 4,  0, 2, 0, 0, 26, 27, 0,  6,
       17, 0, 3, 0, 0, 26, 0, 5, 0, 6, 11, 2,  17, 7},
      {runtime[0], runtime[28], runtime[48], runtime[52], runtime[54], 3, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 7, 8, 5, 5,
        6,  4,  4, 3, 3, 4, 0, 0, 2, 2, 2, 2, 3, 2},
       {10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 7, 8, 5, 5,
        9,  4,  4, 3, 3, 4, 0, 0, 2, 2, 2, 2, 4, 2}},
      std::make_shared<Array>(U"3‿4+`4+⌜○↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊏\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊏\"\"");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[36], std::make_shared<Array>(U"")}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {2, 2, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊏\"\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊏0‿3⥊\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊏0‿3⥊\"\"");
  CompileParams p(
      {0, 4, 0, 0, 0, 2, 0, 3, 11, 2, 17, 0, 1, 16, 7},
      {runtime[22], runtime[36], 0, 3, std::make_shared<Array>(U"")},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 1, 1, 3, 3, 3, 3, 4, 0, 0, 0, 0},
       {6, 6, 4, 4, 1, 1, 3, 3, 3, 3, 4, 0, 0, 0, 0}},
      std::make_shared<Array>(U"⊏0‿3⥊\"\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("3⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3⊏\"abc\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[36], 3, std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0}, {6, 6, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"3⊏\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1.5⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1.5⊏\"abc\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[36], 1.5, std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {8, 8, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"1.5⊏\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("'x'⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'x'⊏\"abc\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[36], std::make_shared<Character>(U'x'),
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {8, 8, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'x\'⊏\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨⥊0,1⟩⊏≍\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⥊0,1⟩⊏≍\"abc\"");
  CompileParams p({0, 5, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 0, 4, 11, 2, 17, 7},
                  {runtime[22], runtime[24], runtime[36], 0, 1,
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{8, 8, 7, 7, 7, 6, 6, 2, 2, 1, 1, 1, 4, 4, 0, 0, 6, 0},
                   {12, 12, 7, 7, 7, 6, 6, 2, 2, 1, 1, 1, 4, 4, 5, 5, 6, 5}},
                  std::make_shared<Array>(U"⟨⥊0,1⟩⊏≍\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("0‿0<¨⊸⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿0<¨⊸⊏\"abc\"");
  CompileParams p(
      {0, 5, 0, 1, 0, 3, 0, 2, 0, 0, 26, 27, 0, 4, 0, 4, 11, 2, 17, 7},
      {runtime[12], runtime[36], runtime[47], runtime[55], 0,
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 4, 5, 0, 0, 2, 2, 2, 2, 3, 2},
       {11, 11, 6, 6, 5, 5, 4, 4, 3, 3, 4, 5, 0, 0, 2, 2, 2, 2, 6, 2}},
      std::make_shared<Array>(U"0‿0<¨⊸⊏\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨3‿¯∞,⟨⟩⟩⊏4‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3‿¯∞,⟨⟩⟩⊏4‿3⥊0");
  CompileParams p(
      {0, 5, 0, 0, 0,  4, 0,  2, 11, 2, 17, 0, 1,
       0, 2, 0, 3, 11, 2, 11, 0, 11, 2, 17, 7},
      {runtime[22], runtime[36], 3, std::make_shared<Number>(-1.0 / 0.0), 4, 0},
      {{0, 1, 0}}, {{0, 0}},
      {{14, 14, 13, 13, 10, 10, 12, 12, 12, 12, 13, 9, 9,
        1,  1,  3,  3,  3,  3,  6,  6,  0,  0,  9,  0},
       {14, 14, 13, 13, 10, 10, 12, 12, 12, 12, 13, 9, 9,
        1,  1,  4,  4,  4,  4,  7,  7,  8,  8,  9,  8}},
      std::make_shared<Array>(U"⟨3‿¯∞,⟨⟩⟩⊏4‿3⥊0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(≍≍<5‿1)⊏↕6‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍≍<5‿1)⊏↕6‿2");
  CompileParams p(
      {0, 6,  0, 7, 11, 2,  0, 2, 16, 0, 3, 0,  4,  0,
       5, 11, 2, 0, 0,  16, 0, 1, 16, 0, 1, 16, 17, 7},
      {runtime[12], runtime[24], runtime[28], runtime[36], 5, 1, 6, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{10, 10, 12, 12, 12, 12, 9, 9, 9, 8, 8, 4, 4, 6,
        6,  6,  6,  3,  3,  3,  2, 2, 2, 1, 1, 1, 8, 0},
       {10, 10, 12, 12, 12, 12, 9, 9, 9, 8, 8, 4, 4, 6,
        6,  6,  6,  3,  3,  3,  2, 2, 2, 1, 1, 1, 8, 7}},
      std::make_shared<Array>(U"(≍≍<5‿1)⊏↕6‿2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2.5↑\"abce\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2.5↑\"abce\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[26], 2.5, std::make_shared<Array>(U"abce")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {9, 9, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"2.5↑\"abce\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2‿'c'↑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿'c'↑\"abcd\"");
  CompileParams p({0, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[26], 2, std::make_shared<Character>(U'c'),
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{6, 6, 5, 5, 0, 0, 2, 2, 2, 2, 5, 2},
                   {11, 11, 5, 5, 0, 0, 4, 4, 4, 4, 5, 4}},
                  std::make_shared<Array>(U"2‿\'c\'↑\"abcd\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(≍2‿3)↑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍2‿3)↑\"abcd\"");
  CompileParams p(
      {0, 4, 0, 1, 0, 2, 0, 3, 11, 2, 0, 0, 16, 17, 7},
      {runtime[24], runtime[26], 2, 3, std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{7, 7, 6, 6, 2, 2, 4, 4, 4, 4, 1, 1, 1, 6, 0},
       {12, 12, 6, 6, 2, 2, 4, 4, 4, 4, 1, 1, 1, 6, 5}},
      std::make_shared<Array>(U"(≍2‿3)↑\"abcd\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("0.1↓\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0.1↓\"abcd\"");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[27], 0.1, std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {9, 9, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"0.1↓\"abcd\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨∘⟩↓\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨∘⟩↓\"abcd\"");
  CompileParams p(
      {0, 2, 0, 0, 0, 1, 11, 1, 17, 7},
      {runtime[27], runtime[53], std::make_shared<Array>(U"abcd")}, {{0, 1, 0}},
      {{0, 0}},
      {{4, 4, 3, 3, 1, 1, 0, 0, 3, 0}, {9, 9, 3, 3, 1, 1, 2, 2, 3, 2}},
      std::make_shared<Array>(U"⟨∘⟩↓\"abcd\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("@↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "@↕↕5");
  CompileParams p(
      {0, 1, 0, 0, 16, 0, 0, 0, 2, 17, 7},
      {runtime[28], 5, std::make_shared<Character>(U'\0')}, {{0, 1, 0}},
      {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}, {3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"@↕↕5"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2‿1↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿1↕↕5");
  CompileParams p({0, 3, 0, 0, 16, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[28], 2, 1, 5}, {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {5, 5, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"2‿1↕↕5"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("¯1↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1↕↕5");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7}, {runtime[28], -1, 5}, {{0, 1, 0}},
      {{0, 0}},
      {{4, 4, 3, 3, 3, 2, 2, 0, 0, 2, 0}, {4, 4, 3, 3, 3, 2, 2, 1, 1, 2, 1}},
      std::make_shared<Array>(U"¯1↕↕5"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("7↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7↕↕5");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7}, {runtime[28], 7, 5}, {{0, 1, 0}},
      {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}, {3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"7↕↕5"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("'a'«'b'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'«'b'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[29], std::make_shared<Character>(U'a'),
                   std::make_shared<Character>(U'b')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\'a\'«\'b\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("\"a\"»'b'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"»'b'");
  CompileParams p({0, 1, 0, 0, 0, 2, 17, 7},
                  {runtime[30], std::make_shared<Character>(U'b'),
                   std::make_shared<Array>(U"a")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 3, 0}, {6, 6, 3, 3, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"\"a\"»\'b\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("≍⊸»\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⊸»\"abc\"");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[24], runtime[30], runtime[55], std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {7, 7, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≍⊸»\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽'a'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[31], std::make_shared<Character>(U'a')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⌽\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽<∞") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽<∞");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 1, 16, 7},
      {runtime[12], runtime[31], std::make_shared<Number>(1.0 / 0.0)},
      {{0, 1, 0}}, {{0, 0}},
      {{2, 2, 1, 1, 1, 0, 0, 0, 0}, {2, 2, 1, 1, 1, 0, 0, 0, 0}},
      std::make_shared<Array>(U"⌽<∞"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2⌽'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2⌽'a'");
  CompileParams p({0, 2, 0, 0, 0, 1, 17, 7},
                  {runtime[31], 2, std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0}, {4, 4, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"2⌽\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1‿2⌽↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2⌽↕4");
  CompileParams p({0, 4, 0, 0, 16, 0, 1, 0, 2, 0, 3, 11, 2, 17, 7},
                  {runtime[28], runtime[31], 1, 2, 4}, {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {5, 5, 4, 4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"1‿2⌽↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽‿2⌽3+⌜○↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽‿2⌽3+⌜○↕4");
  CompileParams p(
      {0, 7,  0, 1, 0, 4, 0, 3, 0,  0, 26, 27, 0,
       6, 17, 0, 2, 0, 2, 0, 5, 11, 2, 17, 7},
      {runtime[0], runtime[28], runtime[31], runtime[48], runtime[54], 2, 3, 4},
      {{0, 1, 0}}, {{0, 0}},
      {{9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 6, 7, 4,
        4, 5, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
       {9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 6, 7, 4,
        4, 8, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
      std::make_shared<Array>(U"⌽‿2⌽3+⌜○↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(<<3)⌽↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<<3)⌽↕4");
  CompileParams p({0, 4, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 0, 0, 16, 17, 7},
                  {runtime[12], runtime[28], runtime[31], 3, 4}, {{0, 1, 0}},
                  {{0, 0}},
                  {{7, 7, 6, 6, 6, 5, 5, 3, 3, 2, 2, 2, 1, 1, 1, 5, 0},
                   {7, 7, 6, 6, 6, 5, 5, 3, 3, 2, 2, 2, 1, 1, 1, 5, 4}},
                  std::make_shared<Array>(U"(<<3)⌽↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("/2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "/2");
  CompileParams p({0, 1, 0, 0, 16, 7}, {runtime[33], 2}, {{0, 1, 0}}, {{0, 0}},
                  {{1, 1, 0, 0, 0, 0}, {1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"/2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("/1‿¯1‿0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "/1‿¯1‿0");
  CompileParams p({0, 1, 0, 2, 0, 3, 11, 3, 0, 0, 16, 7},
                  {runtime[33], 1, -1, 0}, {{0, 1, 0}}, {{0, 0}},
                  {{1, 1, 3, 3, 6, 6, 6, 6, 0, 0, 0, 0},
                   {1, 1, 4, 4, 6, 6, 6, 6, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"/1‿¯1‿0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("/=⌜˜↕2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "/=⌜˜↕2");
  CompileParams p(
      {0, 5, 0, 1, 16, 0, 3, 0, 4, 0, 0, 26, 26, 16, 0, 2, 16, 7},
      {runtime[15], runtime[28], runtime[33], runtime[45], runtime[48], 2},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 1, 0, 0, 0, 0},
       {5, 5, 4, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 3, 0, 0, 0, 0}},
      std::make_shared<Array>(U"/=⌜˜↕2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2/<2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2/<2");
  CompileParams p(
      {0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7}, {runtime[12], runtime[33], 2},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}, {3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
      std::make_shared<Array>(U"2/<2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("0‿1/\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿1/\"abc\"");
  CompileParams p({0, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[33], 0, 1, std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
                   {8, 8, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"0‿1/\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨↕3,↕3⟩/\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨↕3,↕3⟩/\"abc\"");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 0, 0, 16, 0, 2, 0, 0, 16, 11, 2, 17, 7},
      {runtime[28], runtime[33], 3, std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{8, 8, 7, 7, 2, 2, 1, 1, 1, 5, 5, 4, 4, 4, 0, 0, 7, 0},
       {12, 12, 7, 7, 2, 2, 1, 1, 1, 5, 5, 4, 4, 4, 6, 6, 7, 6}},
      std::make_shared<Array>(U"⟨↕3,↕3⟩/\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1‿2/○≍\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2/○≍\"ab\"");
  CompileParams p({0, 5, 0, 0, 0, 2, 0, 1, 27, 0, 3, 0, 4, 11, 2, 17, 7},
                  {runtime[24], runtime[33], runtime[54], 1, 2,
                   std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{6, 6, 5, 5, 4, 4, 3, 3, 4, 0, 0, 2, 2, 2, 2, 3, 2},
                   {9, 9, 5, 5, 4, 4, 3, 3, 4, 0, 0, 2, 2, 2, 2, 5, 2}},
                  std::make_shared<Array>(U"1‿2/○≍\"ab\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("¯1‿2/\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1‿2/\"ab\"");
  CompileParams p({0, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
                  {runtime[33], -1, 2, std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 0, 0, 3, 3, 3, 3, 4, 3},
                   {8, 8, 4, 4, 1, 1, 3, 3, 3, 3, 4, 3}},
                  std::make_shared<Array>(U"¯1‿2/\"ab\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∾'c'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾'c'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[23], std::make_shared<Character>(U'c')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"∾\'c\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∾\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾\"abc\"");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[23], std::make_shared<Array>(U"abc")}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {5, 5, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"∾\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∾≍\"ab\"‿\"cde\"‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾≍\"ab\"‿\"cde\"‿\"\"");
  CompileParams p({0, 2, 0, 3, 0, 4, 11, 3, 0, 1, 16, 0, 0, 16, 7},
                  {runtime[23], runtime[24], std::make_shared<Array>(U"ab"),
                   std::make_shared<Array>(U"cde"),
                   std::make_shared<Array>(U"")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 7, 7, 13, 13, 13, 13, 1, 1, 1, 0, 0, 0, 0},
                   {5, 5, 11, 11, 14, 14, 14, 14, 1, 1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"∾≍\"ab\"‿\"cde\"‿\"\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∾⟨2‿3,1‿3,2‿2⟩⥊¨0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾⟨2‿3,1‿3,2‿2⟩⥊¨0");
  CompileParams p(
      {0, 6,  0, 2, 0, 0, 26, 0,  3, 0,  4, 11, 2, 0, 5,  0,
       4, 11, 2, 0, 3, 0, 3,  11, 2, 11, 3, 17, 0, 1, 16, 7},
      {runtime[22], runtime[23], runtime[47], 2, 3, 1, 0}, {{0, 1, 0}},
      {{0, 0}},
      {{16, 16, 15, 15, 14, 14, 15, 2,  2,  4, 4, 4,  4, 6, 6, 8,
        8,  8,  8,  10, 10, 12, 12, 12, 12, 1, 1, 14, 0, 0, 0, 0},
       {16, 16, 15, 15, 14, 14, 15, 2,  2,  4,  4,  4,  4, 6, 6, 8,
        8,  8,  8,  10, 10, 12, 12, 12, 12, 13, 13, 15, 0, 0, 0, 0}},
      std::make_shared<Array>(U"∾⟨2‿3,1‿3,2‿2⟩⥊¨0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("'a'∾≍\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'∾≍\"abc\"");
  CompileParams p(
      {0, 3, 0, 1, 16, 0, 0, 0, 2, 17, 7},
      {runtime[23], runtime[24], std::make_shared<Character>(U'a'),
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 4, 3, 3, 0, 0, 3, 0}, {9, 9, 4, 4, 4, 3, 3, 2, 2, 3, 2}},
      std::make_shared<Array>(U"\'a\'∾≍\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("\"ab\"∾○≍\"cde\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ab\"∾○≍\"cde\"");
  CompileParams p({0, 4, 0, 1, 0, 2, 0, 0, 27, 0, 3, 17, 7},
                  {runtime[23], runtime[24], runtime[54],
                   std::make_shared<Array>(U"ab"),
                   std::make_shared<Array>(U"cde")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{7, 7, 6, 6, 5, 5, 4, 4, 5, 0, 0, 4, 0},
                   {11, 11, 6, 6, 5, 5, 4, 4, 5, 3, 3, 6, 3}},
                  std::make_shared<Array>(U"\"ab\"∾○≍\"cde\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(2‿3⥊↕6)∾↕2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿3⥊↕6)∾↕2");
  CompileParams p(
      {0, 3, 0, 2, 16, 0, 1,  0, 5,  0,  2, 16,
       0, 0, 0, 3, 0,  4, 11, 2, 17, 17, 7},
      {runtime[22], runtime[23], runtime[28], 2, 3, 6}, {{0, 1, 0}}, {{0, 0}},
      {{10, 10, 9, 9, 9, 8, 8, 6, 6, 5, 5, 5, 4, 4, 1, 1, 3, 3, 3, 3, 4, 8, 0},
       {10, 10, 9, 9, 9, 8, 8, 6, 6, 5, 5, 5, 4, 4, 1, 1, 3, 3, 3, 3, 4, 8, 7}},
      std::make_shared<Array>(U"(2‿3⥊↕6)∾↕2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊔3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔3");
  CompileParams p({0, 1, 0, 0, 16, 7}, {runtime[42], 3}, {{0, 1, 0}}, {{0, 0}},
                  {{1, 1, 0, 0, 0, 0}, {1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊔3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊔<3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔<3");
  CompileParams p({0, 2, 0, 0, 16, 0, 1, 16, 7}, {runtime[12], runtime[42], 3},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 1, 0, 0, 0, 0}, {2, 2, 1, 1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊔<3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊔≍↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔≍↕3");
  CompileParams p({0, 3, 0, 1, 16, 0, 0, 16, 0, 2, 16, 7},
                  {runtime[24], runtime[28], runtime[42], 3}, {{0, 1, 0}},
                  {{0, 0}},
                  {{3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0},
                   {3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊔≍↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊔1.5‿0‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔1.5‿0‿2");
  CompileParams p({0, 1, 0, 2, 0, 3, 11, 3, 0, 0, 16, 7},
                  {runtime[42], 1.5, 0, 2}, {{0, 1, 0}}, {{0, 0}},
                  {{1, 1, 5, 5, 7, 7, 7, 7, 0, 0, 0, 0},
                   {3, 3, 5, 5, 7, 7, 7, 7, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊔1.5‿0‿2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊔1‿¯2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔1‿¯2");
  CompileParams p(
      {0, 1, 0, 2, 11, 2, 0, 0, 16, 7}, {runtime[42], 1, -2}, {{0, 1, 0}},
      {{0, 0}},
      {{1, 1, 3, 3, 3, 3, 0, 0, 0, 0}, {1, 1, 4, 4, 4, 4, 0, 0, 0, 0}},
      std::make_shared<Array>(U"⊔1‿¯2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊔˜'a'‿1‿0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔˜'a'‿1‿0");
  CompileParams p(
      {0, 4, 0, 2, 0, 3, 11, 3, 0, 1, 0, 0, 26, 16, 7},
      {runtime[42], runtime[45], 1, 0, std::make_shared<Character>(U'a')},
      {{0, 1, 0}}, {{0, 0}},
      {{2, 2, 6, 6, 8, 8, 8, 8, 1, 1, 0, 0, 1, 0, 0},
       {4, 4, 6, 6, 8, 8, 8, 8, 1, 1, 0, 0, 1, 1, 0}},
      std::make_shared<Array>(U"⊔˜\'a\'‿1‿0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("4⊔○↕2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4⊔○↕2");
  CompileParams p({0, 4, 0, 0, 0, 2, 0, 1, 27, 0, 3, 17, 7},
                  {runtime[28], runtime[42], runtime[54], 4, 2}, {{0, 1, 0}},
                  {{0, 0}},
                  {{4, 4, 3, 3, 2, 2, 1, 1, 2, 0, 0, 1, 0},
                   {4, 4, 3, 3, 2, 2, 1, 1, 2, 0, 0, 3, 0}},
                  std::make_shared<Array>(U"4⊔○↕2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨1‿2,3‿1⟩⊔2‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿2,3‿1⟩⊔2‿3⥊0");
  CompileParams p({0, 5, 0,  0, 0, 3, 0, 4, 11, 2, 17, 0, 1,  0, 2,
                   0, 3, 11, 2, 0, 4, 0, 2, 11, 2, 11, 2, 17, 7},
                  {runtime[22], runtime[42], 1, 2, 3, 0}, {{0, 1, 0}}, {{0, 0}},
                  {{14, 14, 13, 13, 10, 10, 12, 12, 12, 12, 13, 9, 9, 1, 1,
                    3,  3,  3,  3,  5,  5,  7,  7,  7,  7,  0,  0, 9, 0},
                   {14, 14, 13, 13, 10, 10, 12, 12, 12, 12, 13, 9, 9, 1, 1,
                    3,  3,  3,  3,  5,  5,  7,  7,  7,  7,  8,  8, 9, 8}},
                  std::make_shared<Array>(U"⟨1‿2,3‿1⟩⊔2‿3⥊0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨1‿2,3‿4‿5,6‿7⟩⊔2‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿2,3‿4‿5,6‿7⟩⊔2‿3⥊0");
  CompileParams p(
      {0, 9, 0, 0, 0, 3, 0,  4, 11, 2, 17, 0, 1,  0, 2,  0, 3,  11, 2,
       0, 4, 0, 5, 0, 6, 11, 3, 0,  7, 0,  8, 11, 2, 11, 3, 17, 7},
      {runtime[22], runtime[42], 1, 2, 3, 4, 5, 6, 7, 0}, {{0, 1, 0}}, {{0, 0}},
      {{20, 20, 19, 19, 16, 16, 18, 18, 18, 18, 19, 15, 15, 1,  1, 3, 3,  3, 3,
        5,  5,  7,  7,  9,  9,  9,  9,  11, 11, 13, 13, 13, 13, 0, 0, 15, 0},
       {20, 20, 19, 19, 16, 16, 18, 18, 18, 18, 19, 15, 15,
        1,  1,  3,  3,  3,  3,  5,  5,  7,  7,  9,  9,  9,
        9,  11, 11, 13, 13, 13, 13, 14, 14, 15, 14}},
      std::make_shared<Array>(U"⟨1‿2,3‿4‿5,6‿7⟩⊔2‿3⥊0"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("≍⊸⊔≍˘↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⊸⊔≍˘↕3");
  CompileParams p(
      {0, 5, 0, 1, 16, 0, 3, 0, 0, 26, 16, 0, 2, 0, 4, 0, 0, 27, 16, 7},
      {runtime[24], runtime[28], runtime[42], runtime[46], runtime[55], 3},
      {{0, 1, 0}}, {{0, 0}},
      {{6, 6, 5, 5, 5, 4, 4, 3, 3, 4, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0},
       {6, 6, 5, 5, 5, 4, 4, 3, 3, 4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≍⊸⊔≍˘↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨⟨<3,2⟩,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟨<3,2⟩,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24");
  CompileParams p(
      {0, 9, 0,  2, 16, 0,  1, 0, 5, 0, 4, 0, 8, 11, 3, 17, 0, 3,  0, 4,
       0, 0, 16, 0, 5,  11, 2, 0, 6, 0, 7, 0, 6, 11, 3, 11, 2, 17, 7},
      {runtime[12], runtime[22], runtime[28], runtime[42], 3, 2, -1, 0, 4, 24},
      {{0, 1, 0}}, {{0, 0}},
      {{24, 24, 23, 23, 23, 22, 22, 17, 17, 19, 19, 21, 21,
        21, 21, 22, 16, 16, 3,  3,  2,  2,  2,  5,  5,  1,
        1,  8,  8,  11, 11, 13, 13, 13, 13, 0,  0,  16, 0},
       {25, 25, 23, 23, 23, 22, 22, 17, 17, 19, 19, 21, 21,
        21, 21, 22, 16, 16, 3,  3,  2,  2,  2,  5,  5,  6,
        6,  9,  9,  11, 11, 14, 14, 14, 14, 15, 15, 16, 15}},
      std::make_shared<Array>(U"⟨⟨<3,2⟩,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(2‿3⥊↕4)⊔↕2‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿3⥊↕4)⊔↕2‿2");
  CompileParams p({0, 3,  0, 3, 11, 2, 0, 1, 16, 0, 2,  0,  5, 0,
                   1, 16, 0, 0, 0,  3, 0, 4, 11, 2, 17, 17, 7},
                  {runtime[22], runtime[28], runtime[42], 2, 3, 4}, {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 12, 12, 12, 12, 9, 9, 9, 8, 8, 6, 6, 5,
                    5,  5,  4,  4,  1,  1,  3, 3, 3, 3, 4, 8, 0},
                   {10, 10, 12, 12, 12, 12, 9, 9, 9, 8, 8, 6, 6, 5,
                    5,  5,  4,  4,  1,  1,  3, 3, 3, 3, 4, 8, 7}},
                  std::make_shared<Array>(U"(2‿3⥊↕4)⊔↕2‿2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(3‿3⥊↕4)⊔↕2‿2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿3⥊↕4)⊔↕2‿2");
  CompileParams p({0, 5,  0, 5, 11, 2, 0, 1, 16, 0, 2,  0,  4, 0,
                   1, 16, 0, 0, 0,  3, 0, 3, 11, 2, 17, 17, 7},
                  {runtime[22], runtime[28], runtime[42], 3, 4, 2}, {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 12, 12, 12, 12, 9, 9, 9, 8, 8, 6, 6, 5,
                    5,  5,  4,  4,  1,  1,  3, 3, 3, 3, 4, 8, 0},
                   {10, 10, 12, 12, 12, 12, 9, 9, 9, 8, 8, 6, 6, 5,
                    5,  5,  4,  4,  1,  1,  3, 3, 3, 3, 4, 8, 7}},
                  std::make_shared<Array>(U"(3‿3⥊↕4)⊔↕2‿2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊐˜'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊐˜'a'");
  CompileParams p({0, 2, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[38], runtime[45], std::make_shared<Character>(U'a')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 1, 1, 0, 0, 1, 1, 0}},
                  std::make_shared<Array>(U"⊐˜\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊏⊸⊐\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊏⊸⊐\"abc\"");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[36], runtime[38], runtime[55], std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {7, 7, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"⊏⊸⊐\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(3‿2‿4⥊0)⊐4⥊1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿4⥊0)⊐4⥊1");
  CompileParams p({0, 6, 0, 0, 0, 4, 17, 0,  1, 0,  5,  0,
                   0, 0, 2, 0, 3, 0, 4,  11, 3, 17, 17, 7},
                  {runtime[22], runtime[38], 3, 2, 4, 0, 1}, {{0, 1, 0}},
                  {{0, 0}},
                  {{12, 12, 11, 11, 10, 10, 11, 9, 9, 7, 7, 6,
                    6,  1,  1,  3,  3,  5,  5,  5, 5, 6, 9, 0},
                   {12, 12, 11, 11, 10, 10, 11, 9, 9, 7, 7, 6,
                    6,  1,  1,  3,  3,  5,  5,  5, 5, 6, 9, 8}},
                  std::make_shared<Array>(U"(3‿2‿4⥊0)⊐4⥊1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⊐+˙@") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊐+˙@");
  CompileParams p({0, 3, 0, 2, 0, 0, 26, 16, 0, 1, 16, 7},
                  {runtime[0], runtime[38], runtime[44],
                   std::make_shared<Character>(U'\0')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{3, 3, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0},
                   {3, 3, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⊐+˙@"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(↕5)∊1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕5)∊1");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 0, 0, 16, 17, 7}, {runtime[28], runtime[40], 5, 1},
      {{0, 1, 0}}, {{0, 0}},
      {{5, 5, 4, 4, 2, 2, 1, 1, 1, 4, 0}, {5, 5, 4, 4, 2, 2, 1, 1, 1, 4, 3}},
      std::make_shared<Array>(U"(↕5)∊1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2∊≍˘↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2∊≍˘↕4");
  CompileParams p({0, 5, 0, 1, 16, 0, 3, 0, 0, 26, 16, 0, 2, 0, 4, 17, 7},
                  {runtime[24], runtime[28], runtime[40], runtime[46], 2, 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 2, 2, 3, 2, 1, 1, 0, 0, 1, 0},
                   {5, 5, 4, 4, 4, 3, 3, 2, 2, 3, 3, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"2∊≍˘↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∊<4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∊<4");
  CompileParams p({0, 2, 0, 0, 16, 0, 1, 16, 7}, {runtime[12], runtime[40], 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 1, 0, 0, 0, 0}, {2, 2, 1, 1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"∊<4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍷'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍷'a'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[41], std::make_shared<Character>(U'a')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⍷\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("≍⊸⍷\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⊸⍷\"abc\"");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[24], runtime[41], runtime[55], std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {7, 7, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"≍⊸⍷\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("0‿¯1‿1⍉(3⥊1)⥊1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿¯1‿1⍉(3⥊1)⥊1");
  CompileParams p({0, 4, 0, 0, 0, 4, 0, 0, 0,  5, 17, 17,
                   0, 1, 0, 2, 0, 3, 0, 4, 11, 3, 17, 7},
                  {runtime[22], runtime[32], 0, -1, 1, 3}, {{0, 1, 0}},
                  {{0, 0}},
                  {{13, 13, 12, 12, 10, 10, 9, 9, 8, 8, 9, 12,
                    6,  6,  0,  0,  2,  2,  5, 5, 5, 5, 6, 5},
                   {13, 13, 12, 12, 10, 10, 9, 9, 8, 8, 9, 12,
                    6,  6,  0,  0,  3,  3,  5, 5, 5, 5, 6, 5}},
                  std::make_shared<Array>(U"0‿¯1‿1⍉(3⥊1)⥊1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1‿0≍˘⊸⍉\"ab\"≍\"cd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿0≍˘⊸⍉\"ab\"≍\"cd\"");
  CompileParams p({0, 7, 0,  0,  0, 6, 17, 0, 1,  0, 3,  0, 2,
                   0, 0, 26, 27, 0, 4, 0,  5, 11, 2, 17, 7},
                  {runtime[24], runtime[32], runtime[46], runtime[55], 1, 0,
                   std::make_shared<Array>(U"ab"),
                   std::make_shared<Array>(U"cd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 11, 11, 7, 7, 11, 6, 6, 5, 5, 4, 4,
                    3,  3,  4,  5,  0, 0, 2,  2, 2, 2, 3, 2},
                   {15, 15, 11, 11, 10, 10, 11, 6, 6, 5, 5, 4, 4,
                    3,  3,  4,  5,  0,  0,  2,  2, 2, 2, 6, 2}},
                  std::make_shared<Array>(U"1‿0≍˘⊸⍉\"ab\"≍\"cd\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("0‿2⍉+⌜˜↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿2⍉+⌜˜↕3");
  CompileParams p(
      {0,  7,  0, 1, 16, 0, 3, 0, 4,  0, 0,  26,
       26, 16, 0, 2, 0,  5, 0, 6, 11, 2, 17, 7},
      {runtime[0], runtime[28], runtime[32], runtime[45], runtime[48], 0, 2, 3},
      {{0, 1, 0}}, {{0, 0}},
      {{8, 8, 7, 7, 7, 6, 6, 5, 5, 4, 4, 5, 6, 4, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2},
       {8, 8, 7, 7, 7, 6, 6, 5, 5, 4, 4, 5,
        6, 6, 3, 3, 0, 0, 2, 2, 2, 2, 3, 2}},
      std::make_shared<Array>(U"0‿2⍉+⌜˜↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("2‿0‿0⍉↕↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿0‿0⍉↕↕3");
  CompileParams p(
      {0, 4, 0, 0, 16, 0, 0, 16, 0, 1, 0, 2, 0, 3, 0, 3, 11, 3, 17, 7},
      {runtime[28], runtime[32], 2, 0, 3}, {{0, 1, 0}}, {{0, 0}},
      {{8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 0, 0, 2, 2, 4, 4, 4, 4, 5, 4},
       {8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 0, 0, 2, 2, 4, 4, 4, 4, 5, 4}},
      std::make_shared<Array>(U"2‿0‿0⍉↕↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("3⍉↕↕3") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3⍉↕↕3");
  CompileParams p({0, 2, 0, 0, 16, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[28], runtime[32], 3}, {{0, 1, 0}}, {{0, 0}},
                  {{4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0},
                   {4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, 0, 1, 0}},
                  std::make_shared<Array>(U"3⍉↕↕3"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍋'a'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍋'a'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[34], std::make_shared<Character>(U'a')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⍋\'a\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍋'a'‿∘") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍋'a'‿∘");
  CompileParams p(
      {0, 2, 0, 1, 11, 2, 0, 0, 16, 7},
      {runtime[34], runtime[53], std::make_shared<Character>(U'a')},
      {{0, 1, 0}}, {{0, 0}},
      {{1, 1, 5, 5, 5, 5, 0, 0, 0, 0}, {3, 3, 5, 5, 5, 5, 0, 0, 0, 0}},
      std::make_shared<Array>(U"⍋\'a\'‿∘"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍒2") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍒2");
  CompileParams p({0, 1, 0, 0, 16, 7}, {runtime[35], 2}, {{0, 1, 0}}, {{0, 0}},
                  {{1, 1, 0, 0, 0, 0}, {1, 1, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"⍒2"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∧⊏⟨+⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧⊏⟨+⟩");
  CompileParams p(
      {0, 0, 11, 1, 0, 2, 16, 0, 1, 16, 7},
      {runtime[0], runtime[10], runtime[36]}, {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0}, {3, 3, 4, 4, 1, 1, 1, 0, 0, 0, 0}},
      std::make_shared<Array>(U"∧⊏⟨+⟩"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∧+‿-") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧+‿-");
  CompileParams p(
      {0, 0, 0, 1, 11, 2, 0, 2, 16, 7}, {runtime[0], runtime[1], runtime[10]},
      {{0, 1, 0}}, {{0, 0}},
      {{1, 1, 3, 3, 3, 3, 0, 0, 0, 0}, {1, 1, 3, 3, 3, 3, 0, 0, 0, 0}},
      std::make_shared<Array>(U"∧+‿-"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("∨'c'") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∨'c'");
  CompileParams p({0, 1, 0, 0, 16, 7},
                  {runtime[11], std::make_shared<Character>(U'c')}, {{0, 1, 0}},
                  {{0, 0}}, {{1, 1, 0, 0, 0, 0}, {3, 3, 0, 0, 0, 0}},
                  std::make_shared<Array>(U"∨\'c\'"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍋˜6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍋˜6");
  CompileParams p({0, 2, 0, 1, 0, 0, 26, 16, 7}, {runtime[34], runtime[45], 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{2, 2, 1, 1, 0, 0, 1, 0, 0}, {2, 2, 1, 1, 0, 0, 1, 1, 0}},
                  std::make_shared<Array>(U"⍋˜6"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍒⟜↕4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍒⟜↕4");
  CompileParams p(
      {0, 3, 0, 0, 0, 2, 0, 1, 27, 16, 7},
      {runtime[28], runtime[35], runtime[56], 4}, {{0, 1, 0}}, {{0, 0}},
      {{3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {3, 3, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"⍒⟜↕4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(3‿2‿4⥊0)⍋4⥊1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿4⥊0)⍋4⥊1");
  CompileParams p({0, 6, 0, 0, 0, 4, 17, 0,  1, 0,  5,  0,
                   0, 0, 2, 0, 3, 0, 4,  11, 3, 17, 17, 7},
                  {runtime[22], runtime[34], 3, 2, 4, 0, 1}, {{0, 1, 0}},
                  {{0, 0}},
                  {{12, 12, 11, 11, 10, 10, 11, 9, 9, 7, 7, 6,
                    6,  1,  1,  3,  3,  5,  5,  5, 5, 6, 9, 0},
                   {12, 12, 11, 11, 10, 10, 11, 9, 9, 7, 7, 6,
                    6,  1,  1,  3,  3,  5,  5,  5, 5, 6, 9, 8}},
                  std::make_shared<Array>(U"(3‿2‿4⥊0)⍋4⥊1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("(3‿2‿4⥊0)⍒1") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿4⥊0)⍒1");
  CompileParams p({0, 6, 0, 1, 0, 5, 0, 0, 0, 2, 0, 3, 0, 4, 11, 3, 17, 17, 7},
                  {runtime[22], runtime[35], 3, 2, 4, 0, 1}, {{0, 1, 0}},
                  {{0, 0}},
                  {{10, 10, 9, 9, 7, 7, 6, 6, 1, 1, 3, 3, 5, 5, 5, 5, 6, 9, 0},
                   {10, 10, 9, 9, 7, 7, 6, 6, 1, 1, 3, 3, 5, 5, 5, 5, 6, 9, 8}},
                  std::make_shared<Array>(U"(3‿2‿4⥊0)⍒1"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨+⟩⍋↕6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨+⟩⍋↕6");
  CompileParams p({0, 3, 0, 1, 16, 0, 2, 0, 0, 11, 1, 17, 7},
                  {runtime[0], runtime[28], runtime[34], 6}, {{0, 1, 0}},
                  {{0, 0}},
                  {{5, 5, 4, 4, 4, 3, 3, 1, 1, 0, 0, 3, 0},
                   {5, 5, 4, 4, 4, 3, 3, 1, 1, 2, 2, 3, 2}},
                  std::make_shared<Array>(U"⟨+⟩⍋↕6"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⟨1‿3‿1,1‿3‿2⟩⍒⟨1‿3‿{𝕩}⟩") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿3‿1,1‿3‿2⟩⍒⟨1‿3‿{𝕩}⟩");
  CompileParams p(
      {0,  1, 0, 2, 1, 1, 11, 3, 11, 1, 0,  0, 0,  1, 0,  2, 0, 1,
       11, 3, 0, 1, 0, 2, 0,  3, 11, 3, 11, 2, 17, 7, 34, 0, 1, 7},
      {runtime[35], 1, 3, 2}, {{0, 1, 0}, {0, 0, 1}}, {{0, 0}, {32, 3}},
      {{15, 15, 17, 17, 19, 19, 19, 19, 14, 14, 13, 13, 1,  1,  3,  3,  5,  5,
        5,  5,  7,  7,  9,  9,  11, 11, 11, 11, 0,  0,  13, 19, 20, 20, 20, 20},
       {15, 15, 17, 17, 21, 21, 21, 21, 22, 22, 13, 13, 1,  1,  3,  3,  5, 5, 5,
        5,  7,  7,  9,  9,  11, 11, 11, 11, 12, 12, 13, 21, 20, 20, 20, 20}},
      std::make_shared<Array>(U"⟨1‿3‿1,1‿3‿2⟩⍒⟨1‿3‿{𝕩}⟩"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⍉⌾≍ \"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍉⌾≍ \"abc\"");
  CompileParams p(
      {0, 3, 0, 0, 0, 2, 0, 1, 27, 16, 7},
      {runtime[24], runtime[32], runtime[57], std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{4, 4, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {8, 8, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"⍉⌾≍ \"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("-⌾⊏ 4") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-⌾⊏ 4");
  CompileParams p(
      {0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
      {runtime[1], runtime[36], runtime[57], 4}, {{0, 1, 0}}, {{0, 0}},
      {{4, 4, 2, 2, 1, 1, 0, 0, 1, 0, 0}, {4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 0}},
      std::make_shared<Array>(U"-⌾⊏ 4"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕∘≠⊸+⌾(10⊸⥊)↕6") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕∘≠⊸+⌾(10⊸⥊)↕6");
  CompileParams p({0, 8, 0, 3, 16, 0, 2, 0, 5, 0,  7,  27, 0,  6, 0,
                   0, 0, 5, 0, 1,  0, 4, 0, 3, 27, 27, 27, 16, 7},
                  {runtime[0], runtime[14], runtime[22], runtime[28],
                   runtime[53], runtime[55], runtime[57], 10, 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{13, 13, 12, 12, 12, 10, 10, 9, 9, 7, 7, 9, 5, 5, 4,
                    4,  3,  3,  2,  2,  1,  1,  0, 0, 1, 3, 5, 0, 0},
                   {13, 13, 12, 12, 12, 10, 10, 9, 9, 8, 8, 9, 5,  5, 4,
                    4,  3,  3,  2,  2,  1,  1,  0, 0, 1, 3, 5, 11, 0}},
                  std::make_shared<Array>(U"↕∘≠⊸+⌾(10⊸⥊)↕6"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("↕∘≠⊸+⌾(2⊸/)↕5") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕∘≠⊸+⌾(2⊸/)↕5");
  CompileParams p({0, 8, 0, 2, 16, 0, 3, 0, 5, 0,  7,  27, 0,  6, 0,
                   0, 0, 5, 0, 1,  0, 4, 0, 2, 27, 27, 27, 16, 7},
                  {runtime[0], runtime[14], runtime[28], runtime[33],
                   runtime[53], runtime[55], runtime[57], 2, 5},
                  {{0, 1, 0}}, {{0, 0}},
                  {{12, 12, 11, 11, 11, 9, 9, 8, 8, 7, 7, 8, 5, 5, 4,
                    4,  3,  3,  2,  2,  1, 1, 0, 0, 1, 3, 5, 0, 0},
                   {12, 12, 11, 11, 11, 9, 9, 8, 8, 7, 7, 8, 5,  5, 4,
                    4,  3,  3,  2,  2,  1, 1, 0, 0, 1, 3, 5, 10, 0}},
                  std::make_shared<Array>(U"↕∘≠⊸+⌾(2⊸/)↕5"));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("1⊸⌽⌾(1‿3‿3‿0⊸⊏)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1⊸⌽⌾(1‿3‿3‿0⊸⊏)\"abcd\"");
  CompileParams p({0, 7,  0, 1, 0, 2, 0, 4, 0, 5, 0,  5,  0,  6, 11,
                   4, 27, 0, 3, 0, 0, 0, 2, 0, 4, 27, 27, 16, 7},
                  {runtime[31], runtime[36], runtime[55], runtime[57], 1, 3, 0,
                   std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{15, 15, 13, 13, 12, 12, 5, 5, 7, 7, 9, 9, 11, 11, 11,
                    11, 12, 3,  3,  2,  2,  1, 1, 0, 0, 1, 3, 0,  0},
                   {20, 20, 13, 13, 12, 12, 5, 5, 7, 7, 9, 9, 11, 11, 11,
                    11, 12, 3,  3,  2,  2,  1, 1, 0, 0, 1, 3, 14, 0}},
                  std::make_shared<Array>(U"1⊸⌽⌾(1‿3‿3‿0⊸⊏)\"abcd\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}

TEST_CASE("⌽⌾(1↓4↑⊢)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached_annot();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⌾(1↓4↑⊢)\"abc\"");
  CompileParams p(
      {0, 7, 0, 0, 0, 1, 0, 6, 21, 0, 2, 0, 5, 21, 0, 4, 0, 3, 27, 16, 7},
      {runtime[21], runtime[26], runtime[27], runtime[31], runtime[57], 1, 4,
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{9, 9, 7, 7, 6, 6, 5, 5, 6, 4, 4, 3, 3, 4, 1, 1, 0, 0, 1, 0, 0},
       {13, 13, 7, 7, 6, 6, 5, 5, 6, 4, 4, 3, 3, 4, 1, 1, 0, 0, 1, 8, 0}},
      std::make_shared<Array>(U"⌽⌾(1↓4↑⊢)\"abc\""));
  REQUIRE_THROWS(vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies,
                         p.source_indices.value(), p.source_str));
}
