/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:56
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("'a'+'c'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'+'c'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←-⋄f+2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←-⋄f+2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[1], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 33, 0, 0, 48, 6, 0, 2, 0, 0, 34, 0, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("97-'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "97-'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], CXBQN_NEW(Number, 97),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("@-1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "@-1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("-'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←÷⋄-f") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←÷⋄-f");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[3]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 33, 0, 0, 48, 6, 34, 0, 0, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2×'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2×'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("÷'b'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "÷'b'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[3], CXBQN_NEW(Character, U'b')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←√-⋄÷f") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←√-⋄÷f");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[3], runtime[5]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 0, 0, 2, 20, 33, 0, 0, 48, 6, 34, 0, 0, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⋆'π'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⋆'π'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[4], CXBQN_NEW(Character, U'π')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("'e'⋆'π'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'e'⋆'π'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[4], CXBQN_NEW(Character, U'e'),
                            CXBQN_NEW(Character, U'π')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←⌈⋄⌊f") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←⌈⋄⌊f");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[6], runtime[7]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 33, 0, 0, 48, 6, 34, 0, 0, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←+⋄G←-⋄f≤g") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←+⋄G←-⋄f≤g");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[1], runtime[16]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  0, 33, 0, 0, 48, 6, 0,  1, 33, 0,  1,
             48, 6, 34, 0, 1, 0,  2, 34, 0, 0,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 2}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("!0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "!0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[43], CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("\"error\"!\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"error\"!\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[43], CXBQN_NEW(Array, U"error"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("√'x'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "√'x'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[5], CXBQN_NEW(Character, U'x')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("'a'∧¯1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'∧¯1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←-⋄2∨f") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←-⋄2∨f");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[11], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 0, 33, 0, 0, 48, 6, 34, 0, 0, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("¬'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¬'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2¬'c'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2¬'c'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←{𝕩}⋄0¬f") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←{𝕩}⋄0¬f");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[9], CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 0, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{1, 1, 33, 0, 0, 48, 6, 34, 0, 0, 0, 0, 0, 1, 17, 7, 34, 0, 1, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}, {16, 3}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("F←+-⋄|f") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "F←+-⋄|f");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[1], runtime[8]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 20, 33, 0, 0, 48, 6, 34, 0, 0, 0, 2, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 1}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("26|'A'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "26|'A'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[8], CXBQN_NEW(Number, 26),
                            CXBQN_NEW(Character, U'A')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊑\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊑\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[37], CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊑2‿0⥊⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊑2‿0⥊⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22], runtime[37], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 0, 0, 2, 0, 3, 11, 2, 17, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("+´11") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "+´11");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[50], CXBQN_NEW(Number, 11)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("-´<'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-´<'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[12], runtime[50],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 2, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("×´3‿1⥊\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "×´3‿1⥊\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2],           runtime[22],
                            runtime[50],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 3, 0, 4, 11, 2, 17, 0, 2, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2‿3⊢¨4‿5‿6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿3⊢¨4‿5‿6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[21],          runtime[47],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 5, 0, 6, 11, 3, 0, 1, 0, 0, 26, 0, 2, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("\"abcd\"-\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"-\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], CXBQN_NEW(Array, U"abcd"),
                            CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(↕4)×(↕3)⊢⌜↕2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕4)×(↕3)⊢⌜↕2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2],           runtime[21],
                            runtime[28],          runtime[48],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6,  0,  2, 16, 0, 3, 0, 1, 26, 0,  5, 0,
             2, 16, 17, 0, 0,  0, 4, 0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("10⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "10⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[37], CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("¯11⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯11⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[37], CXBQN_NEW(Number, -11),
                            CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("0.5⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0.5⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[37], CXBQN_NEW(Number, 0.5),
                            CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("'x'⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'x'⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[37], CXBQN_NEW(Number, 10),
                            CXBQN_NEW(Character, U'x')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨⟩⊑↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩⊑↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[37], CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2⊑3+⌜○↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2⊑3+⌜○↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[28],
                            runtime[37],          runtime[48],
                            runtime[54],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 1, 0, 4, 0, 3, 0, 0, 26, 27, 0, 6, 17, 0, 2, 0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("21‿12‿03≡⟨2‿¯3‿0,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "21‿12‿03≡⟨2‿¯3‿0,1‿2,0‿¯1⟩⊑(10×↕3)+⌜↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[2],
                            runtime[18],
                            runtime[28],
                            runtime[37],
                            runtime[48],
                            CXBQN_NEW(Number, 21),
                            CXBQN_NEW(Number, 12),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -3),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 10),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  15, 0,  3,  16, 0,  5, 0, 0,  26, 0,  8,  0, 3,  16,
             0,  1,  0,  14, 17, 17, 0, 4, 0,  9,  0,  10, 0, 11, 11,
             3,  0,  12, 0,  9,  11, 2, 0, 11, 0,  13, 11, 2, 11, 3,
             17, 0,  2,  0,  6,  0,  7, 0, 8,  11, 3,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨2,⟨3⟩⟩⊑↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨2,⟨3⟩⟩⊑↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[37], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 1, 0, 2, 0, 3, 11, 1, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(<2)⊑↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<2)⊑↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[28], runtime[37],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(≍≍2)⊑↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍≍2)⊑↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[28], runtime[37],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕@") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕@");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕2.4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕2.4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Number, 2.4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕<6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕<6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[28], CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕≍2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕≍2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[28], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 3, 11, 2, 0, 0, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕¯1‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕¯1‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 2, 11, 2, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("-˙◶÷‿× 4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-˙◶÷‿× 4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],  runtime[2],  runtime[3],
                            runtime[44], runtime[59], CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 1, 11, 2, 0, 4, 0, 3, 0, 0, 26, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("¯3⥊3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯3⥊3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22], CXBQN_NEW(Number, -3),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1.6‿2.5⥊↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1.6‿2.5⥊↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22], runtime[28], CXBQN_NEW(Number, 1.6),
                            CXBQN_NEW(Number, 2.5), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(≍2‿3)⥊↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍2‿3)⥊↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22], runtime[24], runtime[28],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 16, 0, 0, 0, 3, 0, 4, 11, 2, 0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("\"     \"≡5⥊\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"     \"≡5⥊\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Array, U"     "), CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("4‿∘⥊↕15") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4‿∘⥊↕15");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22], runtime[28], runtime[53],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 15)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 0, 0, 3, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE(">↕¨2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", ">↕¨2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[13], runtime[28], runtime[47],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 4, 11, 2, 0, 2, 0, 1, 26, 16, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE(">⟨⥊2,3⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", ">⟨⥊2,3⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[13], runtime[22], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 3, 11, 2, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE(">(≍⋈⊢)↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", ">(≍⋈⊢)↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[13], runtime[21], runtime[24],
                            runtime[25], runtime[28], CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 4, 16, 0, 1, 0, 3, 0, 2, 21, 16, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1‿0≍1‿2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿0≍1‿2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 3, 0, 4, 11, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("≍⟜≍↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⟜≍↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[28], runtime[56],
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 0, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽⎉1.1 ↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉1.1 ↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[31], runtime[60],
                            CXBQN_NEW(Number, 1.1), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 3, 0, 2, 0, 1, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽⎉'x' ↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉'x' ↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[31], runtime[60],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Character, U'x')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 4, 0, 2, 0, 1, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽⎉(<<0) ↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉(<<0) ↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[28],
                            runtime[31],          runtime[60],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 4, 0, 0, 16, 0, 0, 16, 0, 3, 0, 2, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽⎉≍ ↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⎉≍ ↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[28], runtime[31], runtime[60],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 0, 0, 3, 0, 2, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽⚇2‿2.5 ↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⚇2‿2.5 ↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28],
                            runtime[31],
                            runtime[61],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 2.5),
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 0, 16, 0, 3, 0, 4, 11, 2, 0, 2, 0, 1, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2+⍟1‿'c'4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2+⍟1‿'c'4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[62],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 3, 0, 5, 11, 2, 0, 1, 0, 0, 27, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⋆⍟1.5 2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⋆⍟1.5 2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[4], runtime[62], CXBQN_NEW(Number, 1.5),
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 0, 1, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("+`4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "+`4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[52], CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("+`<'c'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "+`<'c'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[12], runtime[52],
                            CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 2, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("3‿4+`4+⌜○↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3‿4+`4+⌜○↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[28],          runtime[48],         runtime[52],
        runtime[54], CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  5, 0, 1, 0, 4,  0, 2, 0, 0, 26, 27, 0,  6,
             17, 0, 3, 0, 0, 26, 0, 5, 0, 6, 11, 2,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊏\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊏\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[36], CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊏0‿3⥊\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊏0‿3⥊\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22], runtime[36], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 2, 0, 3, 11, 2, 17, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("3⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[36], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1.5⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1.5⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[36], CXBQN_NEW(Number, 1.5),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("'x'⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'x'⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[36], CXBQN_NEW(Character, U'x'),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨⥊0,1⟩⊏≍\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⥊0,1⟩⊏≍\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[24],
                            runtime[36],          CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 0, 4, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("0‿0<¨⊸⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿0<¨⊸⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[36],
                            runtime[47],          runtime[55],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 3, 0, 2, 0, 0, 26, 27, 0, 4, 0, 4, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨3‿¯∞,⟨⟩⟩⊏4‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3‿¯∞,⟨⟩⟩⊏4‿3⥊0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[36],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, -1.0 / 0.0),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 0, 0,  4, 0,  2, 11, 2, 17, 0, 1,
             0, 2, 0, 3, 11, 2, 11, 0, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(≍≍<5‿1)⊏↕6‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍≍<5‿1)⊏↕6‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[24],
                            runtime[28],          runtime[36],
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6,  0, 7, 11, 2,  0, 2, 16, 0, 3, 0,  4,  0,
             5, 11, 2, 0, 0,  16, 0, 1, 16, 0, 1, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2.5↑\"abce\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2.5↑\"abce\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[26], CXBQN_NEW(Number, 2.5),
                            CXBQN_NEW(Array, U"abce")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2‿'c'↑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿'c'↑\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[26], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'c'),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(≍2‿3)↑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍2‿3)↑\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[26], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 0, 3, 11, 2, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("0.1↓\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0.1↓\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[27], CXBQN_NEW(Number, 0.1),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨∘⟩↓\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨∘⟩↓\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[27], runtime[53],
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 11, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("@↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "@↕↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2‿1↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿1↕↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 16, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("¯1↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1↕↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("7↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7↕↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], CXBQN_NEW(Number, 7),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("'a'«'b'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'«'b'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[29], CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Character, U'b')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("\"a\"»'b'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"»'b'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[30], CXBQN_NEW(Character, U'b'),
                            CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("≍⊸»\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⊸»\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[30], runtime[55],
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[31], CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽<∞") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽<∞");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[31],
                            CXBQN_NEW(Number, 1.0 / 0.0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2⌽'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2⌽'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[31], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 0, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1‿2⌽↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2⌽↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[31], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 1, 0, 2, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽‿2⌽3+⌜○↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽‿2⌽3+⌜○↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[28],
                            runtime[31],          runtime[48],
                            runtime[54],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 1, 0, 4, 0, 3, 0,  0, 26, 27, 0,
             6, 17, 0, 2, 0, 2, 0, 5, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(<<3)⌽↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<<3)⌽↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[28], runtime[31],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 2, 0, 3, 0, 0, 16, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("/2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "/2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[33], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("/1‿¯1‿0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "/1‿¯1‿0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[33], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, -1), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 2, 0, 3, 11, 3, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("/=⌜˜↕2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "/=⌜˜↕2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[15], runtime[28], runtime[33],
                            runtime[45], runtime[48], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 3, 0, 4, 0, 0, 26, 26, 16, 0, 2, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2/<2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2/<2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[33], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("0‿1/\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿1/\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[33], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨↕3,↕3⟩/\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨↕3,↕3⟩/\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[33], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 16, 0, 2, 0, 0, 16, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1‿2/○≍\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2/○≍\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24],          runtime[33],
                            runtime[54],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 0, 0, 2, 0, 1, 27, 0, 3, 0, 4, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("¯1‿2/\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1‿2/\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[33], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 1, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∾'c'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾'c'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[23], CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∾\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[23], CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∾≍\"ab\"‿\"cde\"‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾≍\"ab\"‿\"cde\"‿\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[23], runtime[24], CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"cde"), CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 3, 0, 4, 11, 3, 0, 1, 16, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∾⟨2‿3,1‿3,2‿2⟩⥊¨0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∾⟨2‿3,1‿3,2‿2⟩⥊¨0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[23],
                            runtime[47],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6,  0, 2, 0, 0, 26, 0,  3, 0,  4, 11, 2, 0, 5,  0,
             4, 11, 2, 0, 3, 0, 3,  11, 2, 11, 3, 17, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("'a'∾≍\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'a'∾≍\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[23], runtime[24],
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("\"ab\"∾○≍\"cde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ab\"∾○≍\"cde\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[23], runtime[24], runtime[54],
                            CXBQN_NEW(Array, U"ab"), CXBQN_NEW(Array, U"cde")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 0, 0, 27, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(2‿3⥊↕6)∾↕2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿3⥊↕6)∾↕2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[23],
                            runtime[28],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 16, 0, 1,  0, 5,  0,  2, 16,
             0, 0, 0, 3, 0,  4, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊔3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[42], CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊔<3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔<3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[42], CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊔≍↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔≍↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[28], runtime[42],
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 0, 16, 0, 2, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊔1.5‿0‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔1.5‿0‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[42], CXBQN_NEW(Number, 1.5),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 2, 0, 3, 11, 3, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊔1‿¯2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔1‿¯2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[42], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, -2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 2, 11, 2, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊔˜'a'‿1‿0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊔˜'a'‿1‿0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[42], runtime[45], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 0, 3, 11, 3, 0, 1, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("4⊔○↕2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4⊔○↕2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[42], runtime[54],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 2, 0, 1, 27, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨1‿2,3‿1⟩⊔2‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿2,3‿1⟩⊔2‿3⥊0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[42],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0,  0, 0, 3, 0, 4, 11, 2, 17, 0, 1,  0, 2,
             0, 3, 11, 2, 0, 4, 0, 2, 11, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨1‿2,3‿4‿5,6‿7⟩⊔2‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿2,3‿4‿5,6‿7⟩⊔2‿3⥊0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[42],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 7), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 0, 0, 3, 0,  4, 11, 2, 17, 0, 1,  0, 2,  0, 3,  11, 2,
             0, 4, 0, 5, 0, 6, 11, 3, 0,  7, 0,  8, 11, 2, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("≍⊸⊔≍˘↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⊸⊔≍˘↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[28], runtime[42],
                            runtime[46], runtime[55], CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 3, 0, 0, 26, 16, 0, 2, 0, 4, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨⟨<3,2⟩,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟨<3,2⟩,¯1‿0‿¯1⟩⊔2‿3‿4⥊↕24");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],           runtime[22],
                            runtime[28],           runtime[42],
                            CXBQN_NEW(Number, 3),  CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -1), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 4),  CXBQN_NEW(Number, 24)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0,  2, 16, 0,  1, 0, 5, 0, 4, 0, 8, 11, 3, 17, 0, 3,  0, 4,
             0, 0, 16, 0, 5,  11, 2, 0, 6, 0, 7, 0, 6, 11, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(2‿3⥊↕4)⊔↕2‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿3⥊↕4)⊔↕2‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[28],
                            runtime[42],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3,  0, 3, 11, 2, 0, 1, 16, 0, 2,  0,  5, 0,
             1, 16, 0, 0, 0,  3, 0, 4, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(3‿3⥊↕4)⊔↕2‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿3⥊↕4)⊔↕2‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[28],
                            runtime[42],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5,  0, 5, 11, 2, 0, 1, 16, 0, 2,  0,  4, 0,
             1, 16, 0, 0, 0,  3, 0, 3, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊐˜'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊐˜'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[38], runtime[45],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊏⊸⊐\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊏⊸⊐\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[36], runtime[38], runtime[55],
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(3‿2‿4⥊0)⊐4⥊1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿4⥊0)⊐4⥊1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[38],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 0, 0, 4, 17, 0,  1, 0,  5,  0,
             0, 0, 2, 0, 3, 0, 4,  11, 3, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⊐+˙@") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⊐+˙@");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[38], runtime[44],
                            CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 0, 0, 26, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(↕5)∊1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕5)∊1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[40], CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2∊≍˘↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2∊≍˘↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24],          runtime[28],
                            runtime[40],          runtime[46],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 16, 0, 3, 0, 0, 26, 16, 0, 2, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∊<4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∊<4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[40], CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍷'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍷'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[41], CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("≍⊸⍷\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≍⊸⍷\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[41], runtime[55],
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("0‿¯1‿1⍉(3⥊1)⥊1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿¯1‿1⍉(3⥊1)⥊1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[32],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 4, 0, 0, 0,  5, 17, 17,
             0, 1, 0, 2, 0, 3, 0, 4, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1‿0≍˘⊸⍉\"ab\"≍\"cd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿0≍˘⊸⍉\"ab\"≍\"cd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24],
                            runtime[32],
                            runtime[46],
                            runtime[55],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"cd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0,  0,  0, 6, 17, 0, 1,  0, 3,  0, 2,
             0, 0, 26, 27, 0, 4, 0,  5, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("0‿2⍉+⌜˜↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿2⍉+⌜˜↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[28],
                            runtime[32],          runtime[45],
                            runtime[48],          CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  7,  0, 1, 16, 0, 3, 0, 4,  0, 0,  26,
             26, 16, 0, 2, 0,  5, 0, 6, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("2‿0‿0⍉↕↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‿0‿0⍉↕↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[32], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 0, 16, 0, 1, 0, 2, 0, 3, 0, 3, 11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("3⍉↕↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3⍉↕↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[32], CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 0, 16, 0, 0, 16, 0, 1, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍋'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍋'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[34], CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍋'a'‿∘") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍋'a'‿∘");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[34], runtime[53],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 11, 2, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍒2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍒2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[35], CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∧⊏⟨+⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧⊏⟨+⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[10], runtime[36]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 0, 11, 1, 0, 2, 16, 0, 1, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∧+‿-") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧+‿-");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[1], runtime[10]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 0, 0, 1, 11, 2, 0, 2, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("∨'c'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∨'c'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[11], CXBQN_NEW(Character, U'c')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 1, 0, 0, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍋˜6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍋˜6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[34], runtime[45], CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍒⟜↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍒⟜↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[28], runtime[35], runtime[56],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 2, 0, 1, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(3‿2‿4⥊0)⍋4⥊1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿4⥊0)⍋4⥊1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[34],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 0, 0, 4, 17, 0,  1, 0,  5,  0,
             0, 0, 2, 0, 3, 0, 4,  11, 3, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("(3‿2‿4⥊0)⍒1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‿2‿4⥊0)⍒1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[22],          runtime[35],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 5, 0, 0, 0, 2, 0, 3, 0, 4, 11, 3, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨+⟩⍋↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨+⟩⍋↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0], runtime[28], runtime[34],
                            CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 16, 0, 2, 0, 0, 11, 1, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⟨1‿3‿1,1‿3‿2⟩⍒⟨1‿3‿{𝕩}⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨1‿3‿1,1‿3‿2⟩⍒⟨1‿3‿{𝕩}⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[35], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 0, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  1, 0, 2, 1, 1, 11, 3, 11, 1, 0,  0, 0,  1, 0,  2, 0, 1,
             11, 3, 0, 1, 0, 2, 0,  3, 11, 3, 11, 2, 17, 7, 34, 0, 1, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {32, 3}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⍉⌾≍ \"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⍉⌾≍ \"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[24], runtime[32], runtime[57],
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 0, 0, 2, 0, 1, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("-⌾⊏ 4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "-⌾⊏ 4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[36], runtime[57],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕∘≠⊸+⌾(10⊸⥊)↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕∘≠⊸+⌾(10⊸⥊)↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[14],           runtime[22],
        runtime[28], runtime[53],           runtime[55],
        runtime[57], CXBQN_NEW(Number, 10), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 3, 16, 0, 2, 0, 5, 0,  7,  27, 0,  6, 0,
             0, 0, 5, 0, 1,  0, 4, 0, 3, 27, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("↕∘≠⊸+⌾(2⊸/)↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕∘≠⊸+⌾(2⊸/)↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[14],          runtime[28],
        runtime[33], runtime[53],          runtime[55],
        runtime[57], CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 2, 16, 0, 3, 0, 5, 0,  7,  27, 0,  6, 0,
             0, 0, 5, 0, 1,  0, 4, 0, 2, 27, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("1⊸⌽⌾(1‿3‿3‿0⊸⊏)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1⊸⌽⌾(1‿3‿3‿0⊸⊏)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[31],          runtime[36],
                            runtime[55],          runtime[57],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 1, 0, 2, 0, 4, 0, 5, 0,  5,  0,  6, 11,
             4, 27, 0, 3, 0, 0, 0, 2, 0, 4, 27, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}

TEST_CASE("⌽⌾(1↓4↑⊢)\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⌽⌾(1↓4↑⊢)\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[21],          runtime[26],
                            runtime[27],          runtime[31],
                            runtime[57],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 0, 0, 1, 0, 6, 21, 0, 2, 0, 5, 21, 0, 4, 0, 3, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  REQUIRE_THROWS(vm::run(cu));
}
