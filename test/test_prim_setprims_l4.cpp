/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:51
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("\"a\"‚â°‚ãà'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"‚â°‚ãà'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[25],
                            CXBQN_NEW(Character, U'a'), CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 16, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("({‚ü®ùï©‚ü©}‚â°‚ãà)'a'‚Äø2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "({‚ü®ùï©‚ü©}‚â°‚ãà)'a'‚Äø2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[25], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 0, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3,  0,  2, 11, 2, 0, 1,  0, 0, 1,
             1, 21, 16, 7, 34, 0, 1, 11, 1, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {15, 3}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"‚Äø1‚â°\"abc\"‚ãà1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"‚Äø1‚â°\"abc\"‚ãà1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[25], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 0, 3, 17, 0, 0, 0, 3, 0, 2, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ãà¬¥‚ä∏‚â°\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "‚ãà¬¥‚ä∏‚â°\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[25], runtime[50], runtime[55],
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 3, 0, 2, 0, 1, 26, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚àß¬¥‚â°‚üú>¬®‚ü®1,<'a',<‚àû,‚Üï5,5‚Äø3‚•ä2‚ü©") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "‚àß¬¥‚â°‚üú>¬®‚ü®1,<'a',<‚àû,‚Üï5,5‚Äø3‚•ä2‚ü©");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10],
                            runtime[12],
                            runtime[13],
                            runtime[18],
                            runtime[22],
                            runtime[28],
                            runtime[47],
                            runtime[50],
                            runtime[56],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9, 0,  14, 0, 1, 16, 0,  10, 0,  1, 16, 0,  11, 0,  5,
             16, 0, 13, 0,  4, 0, 11, 0,  12, 11, 2, 17, 11, 5,  0,  6,
             0,  2, 0,  8,  0, 3, 27, 26, 16, 0,  7, 0,  0,  26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø3‚Äø2‚â°‚â¢>‚Üï2‚Äø3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‚Äø3‚Äø2‚â°‚â¢>‚Üï2‚Äø3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[13],          runtime[18],
                            runtime[19],          runtime[28],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  4, 0, 5, 11, 2, 0, 3, 16, 0,  0, 16, 0, 2,
             16, 0, 1, 0, 4,  0, 5, 0, 4,  11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø3‚â°>‚ü®<2,3‚ü©") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‚Äø3‚â°>‚ü®<2,3‚ü©");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[13], runtime[18],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  3, 0, 0, 16, 0, 4, 11, 2, 0,  1,
             16, 0, 2, 0, 3,  0, 4, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((4‚•ä2)‚ä∏‚•ä‚â°(>2‚Äø2‚•ä¬∑<2‚Äø2‚•ä‚ä¢))\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((4‚•ä2)‚ä∏‚•ä‚â°(>2‚Äø2‚•ä¬∑<2‚Äø2‚•ä‚ä¢))\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[13],          runtime[18],
        runtime[21],          runtime[22],          runtime[55],
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0, 3, 0, 4, 0, 7,  0, 7,  11, 2,  21, 0,  0,
             20, 0, 4, 0, 7, 0, 7, 11, 2, 21, 0,  1,  20, 0,  2,
             0,  4, 0, 5, 0, 7, 0, 4,  0, 6,  17, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ä¢‚â°>‚àò<)5‚Äø3‚•ä‚Üï15") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚ä¢‚â°>‚àò<)5‚Äø3‚•ä‚Üï15");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[13],
                            runtime[18],          runtime[21],
                            runtime[22],          runtime[28],
                            runtime[53],          CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 15)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 5, 16, 0, 4,  0, 7, 0, 8, 11, 2,  17,
             0, 0, 0, 6, 0,  1, 27, 0, 2, 0, 3, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ä¢‚â°(><¬®))5‚Äø3‚•ä‚Üï15") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚ä¢‚â°(><¬®))5‚Äø3‚•ä‚Üï15");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[13],
                            runtime[18],          runtime[21],
                            runtime[22],          runtime[28],
                            runtime[47],          CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 15)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 5,  16, 0, 4,  0, 7, 0, 8, 11, 2,  17, 0,
             6, 0, 0, 26, 0,  1, 20, 0, 2, 0, 3, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚•ä‚â°‚âç)'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚•ä‚â°‚âç)'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[22], runtime[24],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 0, 0, 0, 1, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚•ä‚â°‚âç)<'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚•ä‚â°‚âç)<'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[22], runtime[24],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 3, 0, 1, 0, 2, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1‚Äø2‚ä∏‚•ä‚â°‚âç)\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1‚Äø2‚ä∏‚•ä‚â°‚âç)\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[22],
                            runtime[24],
                            runtime[55],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 2, 0, 0, 0, 1, 0, 3, 0, 4, 0, 5, 11, 2, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‚Äø2‚â°1‚âç2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‚Äø2‚â°1‚âç2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[24], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 17, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø1(‚âç‚â°2‚Äø2‚•ä‚àæ)4‚Äø3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‚Äø1(‚âç‚â°2‚Äø2‚•ä‚àæ)4‚Äø3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[23],          runtime[24],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6,  0, 7, 11, 2, 0,  2, 0, 1, 0, 4,  0, 4,  11,
             2, 21, 0, 0, 0,  3, 21, 0, 4, 0, 5, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚âç‚üú<‚â°‚âçÀú)'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚âç‚üú<‚â°‚âçÀú)'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18],
                            runtime[24], runtime[45],
                            runtime[56], CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 3, 0, 2, 26, 0, 1, 0, 0, 0, 4, 0, 2, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚âçÀòÀú‚•äÀò1‚Äø5‚Äø9)‚â°‚åΩ‚éâ2‚ä∏+‚•ä‚üú(‚Üï√ó¬¥)3‚Äø2‚Äø1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚âçÀòÀú‚•äÀò1‚Äø5‚Äø9)‚â°‚åΩ‚éâ2‚ä∏+‚•ä‚üú(‚Üï√ó¬¥)3‚Äø2‚Äø1");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[22],          runtime[24],          runtime[28],
        runtime[31],          runtime[45],          runtime[46],
        runtime[50],          runtime[55],          runtime[56],
        runtime[60],          CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 9), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  17, 0,  16, 0,  13, 11, 3, 0,  9,  0,  1,  26, 0,  5, 20,
             0,  11, 0,  3,  27, 16, 0,  0, 0,  10, 0,  16, 0,  12, 0, 6,
             27, 27, 16, 0,  2,  0,  13, 0, 14, 0,  15, 11, 3,  0,  8, 0,
             3,  26, 16, 0,  7,  0,  8,  0, 4,  26, 26, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<0)‚â°‚â°Àò0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<0)‚â°‚â°Àò0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[46],
                            CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 2, 0, 1, 26, 16, 0, 1, 0, 3, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<1)‚â°‚â°Àò<0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<1)‚â°‚â°Àò<0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[46],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 16, 0, 2, 0, 1, 26, 16, 0, 1, 0, 3, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‚•ä<<\"ab\") ‚â° ‚ãàÀúÀò<\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‚•ä<<\"ab\") ‚â° ‚ãàÀúÀò<\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[22],          runtime[25],
                            runtime[45],          runtime[46],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 0, 16, 0, 5, 0,  4, 0, 3, 26, 26, 16, 0, 1,
             0, 7, 0, 0, 16, 0, 0, 16, 0, 2, 0, 6,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚•ä0) ‚â° {-}=Àò‚Üï3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‚•ä0) ‚â° {-}=Àò‚Üï3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],  runtime[15], runtime[18],          runtime[22],
        runtime[28], runtime[46], CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 1, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 4, 16, 0, 5, 0,  1,  26, 1, 1, 17, 0,
             2, 0, 7, 0, 3,  0, 6, 17, 17, 7,  0, 0, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {24, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚Üï4)(√ó‚åú‚â°√ó‚éâ0‚Äø2)‚Üï5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚Üï4)(√ó‚åú‚â°√ó‚éâ0‚Äø2)‚Üï5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[2],           runtime[18],          runtime[28],
        runtime[48],          runtime[60],          CXBQN_NEW(Number, 4),
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 2, 16, 0, 6,  0,  7, 11, 2, 0, 4,  0,  0, 27,
             0, 1, 0, 3, 0,  0, 26, 21, 0, 5,  0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚Üï4)(‚ãÜÀú‚åúÀú‚â°‚ãÜ‚éâ‚àû‚Äø¬Ø4)‚Üï5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(‚Üï4)(‚ãÜÀú‚åúÀú‚â°‚ãÜ‚éâ‚àû‚Äø¬Ø4)‚Üï5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[4],
                            runtime[18],
                            runtime[28],
                            runtime[45],
                            runtime[48],
                            runtime[60],
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, -4),
                            CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 2, 16, 0, 7, 0,  8,  11, 2,  0, 5, 0, 0, 27, 0,  1, 0,
             3, 0, 4, 0, 3,  0, 0, 26, 26, 26, 21, 0, 6, 0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ü®2‚ü©‚ä∏‚àæ‚çü(2‚Äø2‚•ä0‚Äø1‚Äø1‚Äø1)2‚Äø3)‚â°‚â¢¬®‚âç‚éâ(‚åä‚óã=)‚åúÀú‚ü®‚Üï3,2‚Äø3‚•ä‚Üï6‚ü©") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(‚ü®2‚ü©‚ä∏‚àæ‚çü(2‚Äø2‚•ä0‚Äø1‚Äø1‚Äø1)2‚Äø3)‚â°‚â¢¬®‚âç‚éâ(‚åä‚óã=)‚åúÀú‚ü®‚Üï3,2‚Äø3‚•ä‚Üï6‚ü©");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[6],           runtime[15],          runtime[18],
        runtime[19],          runtime[22],          runtime[23],
        runtime[24],          runtime[28],          runtime[45],
        runtime[47],          runtime[48],          runtime[54],
        runtime[55],          runtime[60],          runtime[62],
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  18, 0,  7,  16, 0,  19, 0,  7,  16, 0,  4,  0,  15, 0,
             18, 11, 2,  17, 11, 2,  0,  8,  0,  10, 0,  1,  0,  11, 0,
             0,  27, 0,  13, 0,  6,  27, 26, 26, 16, 0,  9,  0,  3,  26,
             16, 0,  2,  0,  15, 0,  18, 11, 2,  0,  16, 0,  17, 0,  17,
             0,  17, 11, 4,  0,  4,  0,  15, 0,  15, 11, 2,  17, 0,  14,
             0,  5,  0,  12, 0,  15, 11, 1,  27, 27, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2=‚åú‚óã‚Üï3)‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ1(2‚Äø3‚Äø4‚•ä\"abc\")") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2=‚åú‚óã‚Üï3)‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ1(2‚Äø3‚Äø4‚•ä\"abc\")");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[15],          runtime[18],          runtime[22],
        runtime[28],          runtime[48],          runtime[54],
        runtime[60],          CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0,  2, 0,  7, 0, 8, 0, 9, 11, 3,  17, 0,  10, 0,  6,
             0, 1,  27, 0, 11, 0, 2, 0, 7, 0, 9,  11, 2,  17, 17, 0,  1,
             0, 8,  0,  3, 0,  5, 0, 4, 0, 0, 26, 27, 0,  7,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®0,0‚ü©‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ¬Ø1(2‚Äø3‚Äø4‚•ä\"abc\")") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "‚ü®0,0‚ü©‚â°(2‚Äø4‚•ä\"abc\")‚â°‚éâ¬Ø1(2‚Äø3‚Äø4‚•ä\"abc\")");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],           runtime[22],          runtime[60],
        CXBQN_NEW(Number, 0),  CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 4),
        CXBQN_NEW(Number, -1), CXBQN_NEW(Number, 3), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0,  1,  0, 4,  0, 7, 0, 5, 11, 3, 17, 0,
             6,  0, 2,  0,  0, 27, 0, 8, 0, 1, 0,  4, 0,  5,
             11, 2, 17, 17, 0, 0,  0, 3, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(-‚â°-‚öá¬Ø1)5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(-‚â°-‚öá¬Ø1)5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1], runtime[18], runtime[61],
                            CXBQN_NEW(Number, -1), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 3, 0, 2, 0, 0, 27, 0, 1, 0, 0, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®5,‚ü®15,1‚ü©‚ü©‚â°+¬¥‚öá1‚ü®‚ü®3,2‚ü©,‚ü®‚ü®4,5,6‚ü©,‚ü®1‚ü©‚ü©‚ü©") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "‚ü®5,‚ü®15,1‚ü©‚ü©‚â°+¬¥‚öá1‚ü®‚ü®3,2‚ü©,‚ü®‚ü®4,5,6‚ü©,‚ü®1‚ü©‚ü©‚ü©");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[18],          runtime[50],
        runtime[61],          CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 15),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  7, 0,  8, 11, 2, 0, 9, 0, 4,  0, 10, 11, 3,  0,  6,
             11, 1, 11, 2, 11, 2, 0, 6, 0, 3,  0, 2,  0,  0,  26, 27,
             16, 0, 1,  0, 4,  0, 5, 0, 6, 11, 2, 11, 2,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‚Äø6‚Äø15‚â°‚àæ¬¥+¬¥‚öá1‚ü®‚ü®0,1‚ü©,‚ü®‚ü®‚ü©‚ü©‚ü©‚•ä‚ä∏‚àæ‚öá¬Ø2‚Äø1‚ü®‚ü®2,3‚ü©,‚ü®4,5,6‚ü©‚ü©") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "5‚Äø6‚Äø15‚â°‚àæ¬¥+¬¥‚öá1‚ü®‚ü®0,1‚ü©,‚ü®‚ü®‚ü©‚ü©‚ü©‚•ä‚ä∏‚àæ‚öá¬Ø2‚Äø1‚ü®‚ü®2,3‚ü©,‚ü®4,5,6‚ü©‚ü©");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[18],
                            runtime[22],
                            runtime[23],
                            runtime[50],
                            runtime[55],
                            runtime[61],
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 15),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -2),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  13, 0,  14, 11, 2,  0,  15, 0,  7,  0,  8, 11, 3, 11,
             2,  0,  12, 0,  10, 11, 2,  0,  6,  0,  3,  0, 5,  0, 2,
             27, 27, 0,  11, 0,  10, 11, 2,  11, 0,  11, 1, 11, 2, 17,
             0,  10, 0,  6,  0,  4,  0,  0,  26, 27, 16, 0, 4,  0, 3,
             26, 16, 0,  1,  0,  7,  0,  8,  0,  9,  11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(5‚•ä1)‚â°(‚Üï5)=‚óã=‚öá0{‚âç}") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(5‚•ä1)‚â°(‚Üï5)=‚óã=‚öá0{‚âç}");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[15],          runtime[18],
                            runtime[22],          runtime[24],
                            runtime[28],          runtime[54],
                            runtime[61],          CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 1, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{1, 1,  0,  9, 0, 6, 0, 0, 0, 5, 0, 0,  27, 27, 0, 7, 0,
             4, 16, 17, 0, 1, 0, 8, 0, 2, 0, 7, 17, 17, 7,  0, 3, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {31, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4‚â°2+‚çü¬Ø1 6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4‚â°2+‚çü¬Ø1 6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[62],          CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 5, 0, 2, 0, 0, 27, 0, 4, 17, 0, 1, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2√ó‚Üï7)‚â°2+‚çü(¬Ø3+‚Üï7)6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2√ó‚Üï7)‚â°2+‚çü(¬Ø3+‚Üï7)6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[2],
                            runtime[18],          runtime[28],
                            runtime[62],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 7), CXBQN_NEW(Number, -3),
                            CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0,  6, 0, 3, 16, 0, 0, 0,  7, 17, 0, 4, 0,  0,  27,
             0, 5, 17, 0, 2, 0, 6,  0, 3, 16, 0, 1,  0, 5, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚åä‚Üï5)‚â°{i‚Üê0‚ãÑr‚Üê{i+‚Ü©1‚ãÑ1+ùï©}‚çü(‚Üï4)ùï©‚ãÑr‚àæi}0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(3‚åä‚Üï5)‚â°{i‚Üê0‚ãÑr‚Üê{i+‚Ü©1‚ãÑ1+ùï©}‚çü(‚Üï4)ùï©‚ãÑr‚àæi}0");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[6],           runtime[18],
        runtime[23],          runtime[28],          runtime[62],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}, {0, 0, 1}, {0, 0, 2}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8,  1,  1,  16, 0,  2,  0, 7,  0,  4,  16, 0, 1,  0,
             6,  17, 17, 7,  0,  8,  33, 0, 3,  48, 6,  34, 0, 1,  0,
             10, 0,  4,  16, 0,  5,  1,  2, 27, 16, 33, 0,  4, 48, 6,
             32, 0,  3,  0,  3,  34, 0,  4, 17, 7,  0,  9,  0, 0,  33,
             1,  3,  50, 6,  34, 0,  1,  0, 0,  0,  9,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {19, 5}, {55, 3}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(+‚åúÀú‚â°¬∑>1+‚çü‚ä¢‚ä¢)‚Üï5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(+‚åúÀú‚â°¬∑>1+‚çü‚ä¢‚ä¢)‚Üï5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[13],         runtime[18], runtime[21],
        runtime[28],          runtime[45],         runtime[48], runtime[62],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0,  4, 16, 0, 3, 0, 3, 0, 7, 0,  0,  27, 0,  8, 21,
             0, 1, 20, 0, 2,  0, 5, 0, 6, 0, 0, 26, 26, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‚Äø1‚Äø3‚Äø6‚Äø10‚â°+`‚Üï5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‚Äø1‚Äø3‚Äø6‚Äø10‚â°+`‚Üï5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[18],          runtime[28],
        runtime[52],          CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 10),
        CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 2, 16, 0, 3, 0, 0, 26, 16, 0,  1, 0,
             4, 0, 5, 0, 6,  0, 7, 0, 8, 11, 5,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(-0‚Äø1‚Äø3‚Äø6‚Äø10)‚â°-`‚Üï5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(-0‚Äø1‚Äø3‚Äø6‚Äø10)‚â°-`‚Üï5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[18],          runtime[28],
        runtime[52],          CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 10),
        CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 2, 16, 0, 3, 0, 0,  26, 16, 0, 1,  0,  4,
             0, 5, 0, 6, 0,  7, 0, 8, 11, 5,  0,  0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((0‚àæ¬®‚Üï3)‚âç3‚•ä0)‚â°‚â°`‚Üï2‚Äø3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((0‚àæ¬®‚Üï3)‚âç3‚•ä0)‚â°‚â°`‚Üï2‚Äø3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[23],          runtime[24],
                            runtime[28],          runtime[47],
                            runtime[52],          CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9, 0,  8, 11, 2, 0, 4,  16, 0,  6,  0,  0,  26,
             16, 0, 0,  0, 7,  0, 1, 0,  8,  17, 0,  3,  0,  8,
             0,  4, 16, 0, 5,  0, 2, 26, 0,  7,  17, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®‚ü©‚â°√ó`‚ü®‚ü©") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "‚ü®‚ü©‚â°√ó`‚ü®‚ü©");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[2], runtime[18], runtime[52]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 2, 0, 0, 26, 16, 0, 1, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚â°‚üú(!‚àò0`)3‚Äø0‚Äø2‚•ä\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "‚â°‚üú(!‚àò0`)3‚Äø0‚Äø2‚•ä\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[43],          runtime[52],
                            runtime[53],          runtime[56],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 1, 0, 7, 0,  6,  0, 8, 11, 3, 17, 0,  3,
             0, 6, 0, 4, 0, 2, 27, 26, 0, 5, 0,  0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø3‚Äø5‚Äø8‚Äø12‚â°2+`‚Üï5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2‚Äø3‚Äø5‚Äø8‚Äø12‚â°2+`‚Üï5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[18],          runtime[28],
        runtime[52],          CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 8), CXBQN_NEW(Number, 12)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 2, 16, 0, 3, 0, 0, 26, 0,  4, 17, 0, 1,
             0, 4, 0, 5, 0,  6, 0, 7, 0, 8,  11, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‚ãÜ1‚Äø2‚Äø6√ó‚åú0‚Äø2)‚â°3‚Äø4‚ãÜ`3+‚åú‚óã‚Üï2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‚ãÜ1‚Äø2‚Äø6√ó‚åú0‚Äø2)‚â°3‚Äø4‚ãÜ`3+‚åú‚óã‚Üï2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[4],
        runtime[18],          runtime[28],          runtime[48],
        runtime[52],          runtime[54],          CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0,  4,  0,  7,  0,  5,  0, 0,  26, 27, 0,  12,
             17, 0, 6,  0,  2,  26, 0,  12, 0, 13, 11, 2,  17, 0,
             3,  0, 11, 0,  8,  11, 2,  0,  5, 0,  1,  26, 0,  9,
             0,  8, 0,  10, 11, 3,  17, 0,  2, 0,  8,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
