/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:52:52
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("(<'a')≡⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<'a')≡⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[36],
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 16, 0, 1, 0, 3, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⊏⥊˘\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"≡⊏⥊˘\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[22],
                            runtime[36],
                            runtime[46],
                            CXBQN_NEW(Array, U"a"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 3, 0, 1, 26, 16, 0, 2, 16, 0, 0, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<'c')≡2⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<'c')≡2⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[36],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'c'),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 3, 17, 0, 1, 0, 4, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<'c')≡¯1⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<'c')≡¯1⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[36],
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Character, U'c'),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 3, 17, 0, 1, 0, 4, 0, 0, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ccc\"≡2‿¯1‿2⊏\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ccc\"≡2‿¯1‿2⊏\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[36],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Array, U"ccc"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 1, 0, 2, 0, 3, 0, 2, 11, 3, 17, 0, 0, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((3-˜↕5)⊸⊏≡2⊸⌽)↕5‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((3-˜↕5)⊸⊏≡2⊸⌽)↕5‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],           runtime[18],
                            runtime[28],          runtime[31],
                            runtime[36],          runtime[45],
                            runtime[55],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 9, 11, 2, 0,  2, 16, 0, 3, 0,  6, 0, 9,  27, 0,  1,  0, 4,
             0, 6, 0, 8, 0,  2, 16, 0, 5,  0, 0, 26, 0, 7, 17, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿3⥊0)≡⟨⟩⊏2‿3⥊↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿3⥊0)≡⟨⟩⊏2‿3⥊↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[28],          runtime[36],
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 2, 16, 0, 1, 0, 6, 0, 5, 11, 2,  17, 0,  3,  11,
             0, 17, 0, 0, 0,  4, 0, 1, 0, 4, 0, 5,  11, 2,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨3‿0,2‿1‿2⟩(×⟜5⊸+⌜´∘⊣≡⊏)⥊⟜(↕×´)6‿5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨3‿0,2‿1‿2⟩(×⟜5⊸+⌜´∘⊣≡⊏)⥊⟜(↕×´)6‿5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[20],          runtime[22],          runtime[28],
        runtime[36],          runtime[48],          runtime[50],
        runtime[53],          runtime[55],          runtime[56],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  17, 0,  16, 11, 2,  0,  8, 0,  1,  26, 0,  5,  20, 0, 11, 0,
             4,  27, 16, 0,  6,  0,  2,  0, 3,  0,  9,  0,  8,  0,  7, 0,  0,
             0,  10, 0,  16, 0,  11, 0,  1, 27, 27, 26, 26, 27, 21, 0, 12, 0,
             13, 11, 2,  0,  14, 0,  15, 0, 14, 11, 3,  11, 2,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2‿0⥊0)≡⟨3‿¯1,⟨⟩⟩⊏4‿3⥊0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2‿0⥊0)≡⟨3‿¯1,⟨⟩⟩⊏4‿3⥊0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],           runtime[22],
                            runtime[36],           CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 0),  CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, -1), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4,  0, 1,  0, 7, 0, 5, 11, 2, 17, 0, 2, 0, 5,  0, 6,  11, 2, 11,
             0, 11, 2, 17, 0, 0, 0, 4, 0,  1, 0,  3, 0, 4, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‿1(<⊸⊏≡⊏)↕6‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5‿1(<⊸⊏≡⊏)↕6‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[28],
        runtime[36],          runtime[55],          CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 8, 11, 2,  0, 2, 16, 0, 3,  0, 1,  0, 3,
             0, 4, 0, 0, 27, 21, 0, 5, 0,  6, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨4‿0,1‿2‿3‿2‿1‿0⟩(+⌜´⊸(×⌜)≡⊏⟜(×⌜˜))+⌜˜↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨4‿0,1‿2‿3‿2‿1‿0⟩(+⌜´⊸(×⌜)≡⊏⟜(×⌜˜))+⌜˜↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[28],          runtime[36],          runtime[45],
        runtime[48],          runtime[50],          runtime[55],
        runtime[56],          CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  15, 0,  3,  16, 0,  5,  0,  6,  0, 0,  26, 26, 16,
             0,  5,  0,  6,  0,  1,  26, 26, 0,  9, 0,  4,  27, 0,
             2,  0,  6,  0,  1,  26, 0,  8,  0,  7, 0,  6,  0,  0,
             26, 26, 27, 21, 0,  10, 0,  11, 11, 2, 0,  12, 0,  13,
             0,  14, 0,  13, 0,  12, 0,  11, 11, 6, 11, 2,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´1=≡¨(<⟨⟩)(↑¨∾↓¨)⟨@,+,<@,↕3⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧´1=≡¨(<⟨⟩)(↑¨∾↓¨)⟨@,+,<@,↕3⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[10],
                            runtime[12],          runtime[15],
                            runtime[18],          runtime[23],
                            runtime[26],          runtime[27],
                            runtime[28],          runtime[47],
                            runtime[50],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 13, 0,  0,  0,  13, 0, 2, 16, 0,  12, 0,  8, 16, 11, 4,  0,  9,
             0, 7,  26, 0,  5,  0,  9, 0, 6,  26, 21, 11, 0, 0,  2,  16, 17, 0,
             9, 0,  4,  26, 16, 0,  3, 0, 11, 17, 0,  10, 0, 1,  26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡3↑\"abce\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡3↑\"abce\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[26], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"abce")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"e\"≡¯1↑\"abce\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"e\"≡¯1↑\"abce\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[26], CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Array, U"e"), CXBQN_NEW(Array, U"abce")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"\"≡0↑\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"\"≡0↑\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[26], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U""), CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<⟜3⊸×↕5)≡5↑↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<⟜3⊸×↕5)≡5↑↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[2],  runtime[12],          runtime[18],
        runtime[26], runtime[28],          runtime[55],
        runtime[56], CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  7, 0, 4, 16, 0, 3, 0, 8, 17, 0, 2,  0,  8,  0,  4,
             16, 0, 0, 0, 5,  0, 7, 0, 6, 0,  1, 27, 27, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6⥊0)≡¯6↑↕0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(6⥊0)≡¯6↑↕0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[26],          runtime[28],
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, -6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 3, 16, 0, 2, 0, 6, 17, 0, 0, 0, 5, 0, 1, 0, 4, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍↕3)≡1↑2‿3⥊↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍↕3)≡1↑2‿3⥊↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[24],
        runtime[26],          runtime[28],          CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0,  4, 16, 0, 1, 0, 7, 0,  5, 11, 2,  17, 0, 3,
             0, 6, 17, 0, 0,  0, 5, 0, 4, 16, 0, 2,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↑⟜4≡⥊⟜0)↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↑⟜4≡⥊⟜0)↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[26],          runtime[28],
                            runtime[56],          CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 3, 16, 0, 6, 0, 4,  0,  1,  27,
             0, 0, 0, 5, 0,  4, 0, 2, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍\"abc\")≡(<1)↑2‿3↑\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍\"abc\")≡(<1)↑2‿3↑\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[24],
                            runtime[26],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 3,  0,  5, 0, 6, 11, 2, 17, 0,  3,  0,
             4, 0, 0, 16, 17, 0, 1, 0, 7,  0, 2,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6⥊1)(↑≡⥊⟜⊑)2‿3⥊↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(6⥊1)(↑≡⥊⟜⊑)2‿3⥊↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[26],          runtime[28],
                            runtime[37],          runtime[56],
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0,  3, 16, 0, 1, 0,  8, 0, 9, 11, 2, 17, 0,  4,  0, 5,
             0, 1, 27, 0, 0,  0, 2, 21, 0, 7, 0, 1,  0, 6,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕¨∘↕∘(1⊸+)≡↑∘↕)5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕¨∘↕∘(1⊸+)≡↑∘↕)5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[18],          runtime[26],
        runtime[28], runtime[47],          runtime[53],
        runtime[55], CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0, 3, 0, 5, 0, 2, 27, 0, 1, 0,  0,  0,  6,  0,  7,
             27, 0, 5, 0, 3, 0, 5, 0, 4,  0, 3, 26, 27, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↑≡((↕4)≍¨2)⥊¨<)3‿2⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↑≡((↕4)≍¨2)⥊¨<)3‿2⥊\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[22],
                            runtime[24],
                            runtime[26],
                            runtime[28],
                            runtime[47],
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 2, 0,  9, 0, 8, 11, 2,  17, 0,  0, 0, 6, 0, 2,  26, 0, 8,
             0, 6,  0, 3, 26, 0, 7, 0, 5,  16, 17, 21, 0, 1, 0, 4, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"d\"≡3↓\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"d\"≡3↓\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[27], CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"d"), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿2≡⟜(¯3⊸↓)○↕4‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿2≡⟜(¯3⊸↓)○↕4‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],           runtime[27],
                            runtime[28],           runtime[54],
                            runtime[55],           runtime[56],
                            CXBQN_NEW(Number, 1),  CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, -3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9, 0, 7, 11, 2,  0,  2, 0, 3, 0, 1,  0, 4,  0, 8,
             27, 0, 5, 0, 0,  27, 27, 0, 6, 0, 7, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿1‿3‿2‿1≡≢(5⥊0)↓↕3‿2‿1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿1‿3‿2‿1≡≢(5⥊0)↓↕3‿2‿1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[19],
                            runtime[22],          runtime[27],
                            runtime[28],          CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  6, 0, 7,  0, 5, 11, 3, 0, 4, 16, 0, 3, 0, 9, 0, 2,  0, 8,  17,
             17, 0, 1, 16, 0, 0, 0,  5, 0, 5, 0,  6, 0, 7, 0, 5, 11, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↓∘↕≡↕∘(1⊸+)+⟜⌽↑∘↕)5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↓∘↕≡↕∘(1⊸+)+⟜⌽↑∘↕)5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],  runtime[18],          runtime[26],         runtime[27],
        runtime[28], runtime[31],          runtime[53],         runtime[55],
        runtime[56], CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  10, 0, 4, 0, 6, 0, 2, 27, 0,  5,  0,  8, 0,
             0,  27, 0, 0, 0, 7, 0, 9, 27, 0,  6,  0,  4, 27,
             21, 0,  1, 0, 4, 0, 6, 0, 3,  27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(↕3‿4)≡1↓¨⊏↕2‿3‿4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(↕3‿4)≡1↓¨⊏↕2‿3‿4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[27],          runtime[28],
        runtime[36],          runtime[47],          CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0, 5,  0, 6, 11, 3, 0, 2, 16, 0, 3, 16, 0,  4,  0, 1,
             26, 0, 7, 17, 0, 0, 0,  5, 0, 6, 11, 2, 0, 2,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(4+⌜○↕2)≡2↕↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(4+⌜○↕2)≡2↕↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[28],          runtime[48],
                            runtime[54],          CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 2, 16, 0, 2, 0,  6,  17, 0, 1,  0,  6, 0,
             2, 0, 4, 0, 3,  0, 0, 26, 27, 0,  5, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(↕≡⊢)4‿3⥊\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩(↕≡⊢)4‿3⥊\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[21],
                            runtime[22],
                            runtime[28],
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 2, 0, 4, 0,  5,  11, 2,  17,
             0, 1, 0, 0, 0, 3, 21, 11, 0,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0⊸↕≡(0≍˜1+≠)⊸⥊)↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0⊸↕≡(0≍˜1+≠)⊸⥊)↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[14],         runtime[18],
        runtime[22],          runtime[24],         runtime[28],
        runtime[45],          runtime[55],         CXBQN_NEW(Number, 0),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 5, 16, 0,  3, 0, 7, 0, 1, 0, 0, 0, 9,  21, 0,  6, 0,
             4, 26, 0, 8, 21, 27, 0, 2, 0, 5, 0, 7, 0, 8, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(7↕6‿0⥊\"\")≡0‿7‿0⥊\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(7↕6‿0⥊\"\")≡0‿7‿0⥊\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[28],          CXBQN_NEW(Number, 7),
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 5, 0,  3, 0,  5, 11, 3, 17, 0,  0,  0, 6,
             0, 1, 0, 4, 0, 5, 11, 2, 17, 0, 2,  0, 3,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(»˜⊸≡∧«˜⊸≡)\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(»˜⊸≡∧«˜⊸≡)\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10],          runtime[18], runtime[29],
                            runtime[30],          runtime[45], runtime[55],
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 0, 5, 0, 4, 0,  2,  26, 27, 0, 0,
             0, 1, 0, 5, 0, 4, 0, 3, 26, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⟨⟩»\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"≡⟨⟩»\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[30], CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 0, 1, 11, 0, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡\"a\"»⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡\"a\"»⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[30], CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 17, 0, 0, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aBC\"≡\"a\"»\"BCD\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"aBC\"≡\"a\"»\"BCD\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[30], CXBQN_NEW(Array, U"aBC"),
                            CXBQN_NEW(Array, U"a"), CXBQN_NEW(Array, U"BCD")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"CDa\"≡\"a\"«\"BCD\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"CDa\"≡\"a\"«\"BCD\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[29], CXBQN_NEW(Array, U"CDa"),
                            CXBQN_NEW(Array, U"a"), CXBQN_NEW(Array, U"BCD")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 3, 17, 0, 0, 0, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"d\"≡\"abcd\"«⟨4⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"d\"≡\"abcd\"«⟨4⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[29], CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Array, U"d"), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 2, 11, 1, 0, 1, 0, 4, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((⊢⌜˜≠¨)≡(≠¨«⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((⊢⌜˜≠¨)≡(≠¨«⌜˜))\"\"‿⟨2,3⟩‿\"abcde\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[14],
                            runtime[18],
                            runtime[21],
                            runtime[29],
                            runtime[45],
                            runtime[47],
                            runtime[48],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U""),
                            CXBQN_NEW(Array, U"abcde")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0,  7,  0,  8, 11, 2, 0, 10, 11, 3,  0,  4,  0,
             6, 0, 3,  26, 26, 0, 5,  0, 0, 26, 20, 0,  1,  0,  5,
             0, 0, 26, 0,  4,  0, 6,  0, 2, 26, 26, 20, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"Zcab\"≡\"WXYZ\"«´\"ab\"‿\"c\"‿\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"Zcab\"≡\"WXYZ\"«´\"ab\"‿\"c\"‿\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[29],
                            runtime[50],
                            CXBQN_NEW(Array, U"Zcab"),
                            CXBQN_NEW(Array, U"WXYZ"),
                            CXBQN_NEW(Array, U"ab"),
                            CXBQN_NEW(Array, U"c"),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5,  0, 6, 0,  7, 11, 3, 0, 2,  0,
             1, 26, 0, 4, 17, 0, 0,  0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dab\"≡'d'»\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"dab\"≡'d'»\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[30],
                            CXBQN_NEW(Character, U'd'),
                            CXBQN_NEW(Array, U"dab"), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"dab\"≡'d'<⊸»\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"dab\"≡'d'<⊸»\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[30],
                            runtime[55],
                            CXBQN_NEW(Character, U'd'),
                            CXBQN_NEW(Array, U"dab"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 2, 0, 3, 0, 0, 27, 0, 4, 17, 0, 1, 0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1⊸⌽≡⊏⊸«)'a'+⥊⟜(↕×´)4‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1⊸⌽≡⊏⊸«)'a'+⥊⟜(↕×´)4‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[22],          runtime[28],          runtime[29],
        runtime[31],          runtime[36],          runtime[50],
        runtime[55],          runtime[56],          CXBQN_NEW(Number, 1),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2), CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  12, 0, 13, 11, 2, 0, 8, 0,  1,  26, 0,  4,  20, 0,
             10, 0,  3, 27, 16, 0, 0, 0, 14, 17, 0,  5,  0,  9,  0,
             7,  27, 0, 2,  0,  6, 0, 9, 0,  11, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯2(⌽≡↑»⊢)'a'+⥊⟜(↕×´)4‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯2(⌽≡↑»⊢)'a'+⥊⟜(↕×´)4‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[2],           runtime[18],
        runtime[21],          runtime[22],          runtime[26],
        runtime[28],          runtime[30],          runtime[31],
        runtime[50],          runtime[56],          CXBQN_NEW(Number, -2),
        CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 2), CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 12, 0, 13, 11, 2,  0, 9, 0,  1,  26, 0,  6, 20,
             0, 10, 0, 4,  27, 16, 0, 0, 0,  14, 17, 0,  3, 0,
             7, 0,  5, 21, 0,  2,  0, 8, 21, 0,  11, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6(↑≡»⟜(⥊⟜0)˜)↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6(↑≡»⟜(⥊⟜0)˜)↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[26],          runtime[28],
                            runtime[30],          runtime[45],
                            runtime[56],          CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 3,  16, 0, 5, 0, 8, 0,  6, 0, 1,  27, 0,
             6, 0, 4, 27, 26, 0, 0, 0, 2, 21, 0, 7, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("«˜⊸≡2‿3⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "«˜⊸≡2‿3⥊\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[22],
                            runtime[29],          runtime[45],
                            runtime[55],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 1, 0, 5, 0, 6,  11, 2,  17, 0,
             0, 0, 4, 0, 3, 0, 2, 26, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(»≡0⌈-⟜1)↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(»≡0⌈-⟜1)↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[7],           runtime[18],
        runtime[28],          runtime[30],          runtime[56],
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 3, 16, 0, 7, 0, 5, 0,  0,  27,
             0, 1, 0, 6, 21, 0, 2, 0, 4, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(«≡1⊸⌽)↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(«≡1⊸⌽)↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18], runtime[28],          runtime[29],         runtime[31],
        runtime[55], CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 1, 16, 0, 3, 0, 4, 0, 5, 27, 0, 0, 0, 2, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(»≡0⌈-⟜2)⥊⟜(↕×´)5‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(»≡0⌈-⟜2)⥊⟜(↕×´)5‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[2],           runtime[7],
        runtime[18],          runtime[22],          runtime[28],
        runtime[30],          runtime[50],          runtime[56],
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 10, 11, 2,  0,  7, 0,  1, 26, 0,  5,
             20, 0,  8, 0,  4,  27, 16, 0, 10, 0, 8,  0,  0,
             27, 0,  2, 0,  9,  21, 0,  3, 0,  6, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(«≡1⌽1⊸<⊸×)⥊⟜(↕×´)5‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(«≡1⌽1⊸<⊸×)⥊⟜(↕×´)5‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[2],          runtime[12],          runtime[18],
        runtime[22],         runtime[28],          runtime[29],
        runtime[31],         runtime[50],          runtime[55],
        runtime[56],         CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 12, 11, 2,  0,  7, 0, 0, 26, 0,  4,  20, 0,
             9,  0,  3, 27, 16, 0,  0,  0, 8, 0, 1,  0,  8,  0,  10,
             27, 27, 0, 6,  0,  10, 21, 0, 2, 0, 5,  21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⌽⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⌽⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[31], runtime[56]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⌽\"a\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⌽\"a\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[31], runtime[56],
                            CXBQN_NEW(Array, U"a")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ba\"≡⟜⌽\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ba\"≡⟜⌽\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[31], runtime[56],
                            CXBQN_NEW(Array, U"ba"), CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 0, 0, 27, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽≡(1-˜≠)(-○⊑∾1↓⊢)⚇1⊢)↕3‿2‿4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽≡(1-˜≠)(-○⊑∾1↓⊢)⚇1⊢)↕3‿2‿4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[14],          runtime[18],
        runtime[21],          runtime[23],          runtime[27],
        runtime[28],          runtime[31],          runtime[37],
        runtime[45],          runtime[54],          runtime[61],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 13, 0, 14, 0,  15, 11, 3,  0,  6,  16, 0,  3, 0, 12, 0,  11, 0,
             3, 0,  5, 0,  12, 21, 0,  4,  0,  8,  0,  10, 0, 0, 27, 21, 27, 0,
             1, 0,  9, 0,  0,  26, 0,  12, 21, 21, 0,  2,  0, 7, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜⌽↕↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜⌽↕↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[28], runtime[31], runtime[56],
                            CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 16, 0, 1, 16, 0, 2, 0, 3, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´5(⌽≡⊢)¨⟨\"\",⥊∞,↕5,↕0‿4,2‿0‿3⥊\"\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∧´5(⌽≡⊢)¨⟨\"\",⥊∞,↕5,↕0‿4,2‿0‿3⥊\"\"⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10],          runtime[18],
                            runtime[21],          runtime[22],
                            runtime[28],          runtime[31],
                            runtime[47],          runtime[50],
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0,  9,  0, 3,  16, 0, 8,  0, 4, 16, 0,  10,
             0,  11, 11, 2,  0, 4,  16, 0, 14, 0, 3, 0,  12, 0,
             10, 0,  13, 11, 3, 17, 11, 5, 0,  6, 0, 2,  0,  1,
             0,  5,  21, 26, 0, 8,  17, 0, 7,  0, 0, 26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´(\"bcdea\"≡⌽⟜\"abcde\")¨1+5×¯10‿¯2‿¯1‿0‿1‿6‿61") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "∧´(\"bcdea\"≡⌽⟜\"abcde\")¨1+5×¯10‿¯2‿¯1‿0‿1‿6‿61");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[2],
                            runtime[10],
                            runtime[18],
                            runtime[31],
                            runtime[47],
                            runtime[50],
                            runtime[56],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, -10),
                            CXBQN_NEW(Number, -2),
                            CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 6),
                            CXBQN_NEW(Number, 61),
                            CXBQN_NEW(Array, U"bcdea"),
                            CXBQN_NEW(Array, U"abcde")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  10, 0, 11, 0,  12, 0,  13, 0,  8, 0, 14, 0,  15, 11, 7, 0,
             1,  0,  9, 17, 0,  0,  0,  8,  17, 0, 5, 0,  17, 0,  7,  0, 4,
             27, 0,  3, 0,  16, 21, 26, 16, 0,  6, 0, 2,  26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∧´⟨1,0‿2,¯1‿1‿3⟩(⊑∘⌽≡(3⊸↑)⊸⊑)⚇¯1‿∞ 2‿3‿5⥊\"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "∧´⟨1,0‿2,¯1‿1‿3⟩(⊑∘⌽≡(3⊸↑)⊸⊑)⚇¯1‿∞ 2‿3‿5⥊\"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[10],          runtime[18],
                            runtime[22],          runtime[26],
                            runtime[31],          runtime[37],
                            runtime[50],          runtime[53],
                            runtime[55],          runtime[61],
                            CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, -1),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 1.0 / 0.0),
                            CXBQN_NEW(Number, 5), CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  17, 0,  2,  0,  12, 0,  14, 0,  16, 11, 3,  17, 0,
             13, 0,  15, 11, 2,  0,  9,  0,  5,  0,  8,  0,  3,  0,
             8,  0,  14, 27, 27, 0,  1,  0,  4,  0,  7,  0,  5,  27,
             21, 27, 0,  10, 0,  11, 0,  12, 11, 2,  0,  13, 0,  10,
             0,  14, 11, 3,  11, 3,  17, 0,  6,  0,  0,  26, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸⌽≡<)'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⟨⟩⊸⌽≡<)'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[31], runtime[55],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0‿4≡/1‿0‿0‿0‿1‿0") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0‿4≡/1‿0‿0‿0‿1‿0");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[33], CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0,  2, 0, 2, 0, 2, 0, 4,  0, 2,  11, 6,
             0, 1, 16, 0, 0, 0, 2, 0, 3, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1‿1‿2≡/0‿2‿1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1‿1‿2≡/0‿2‿1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[33], CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 3, 0, 2, 11, 3,  0, 1,  16, 0,
             0, 0, 2, 0, 2, 0, 3,  11, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜/⟨⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜/⟨⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[33], runtime[56]};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{11, 0, 0, 1, 0, 2, 0, 0, 27, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"aabbcc\"≡2/\"abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"aabbcc\"≡2/\"abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[33], CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Array, U"aabbcc"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"\"≡4/\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"\"≡4/\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[33], CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(6‿0⥊\"\")≡⟨5,1⟩‿⟨⟩/2‿0⥊\"\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(6‿0⥊\"\")≡⟨5,1⟩‿⟨⟩/2‿0⥊\"\"");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[22],          runtime[33],
        CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 5),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8,  0, 1,  0, 7, 0, 4, 11, 2, 17, 0, 2, 0, 5,  0, 6,  11, 2, 11,
             0, 11, 2, 17, 0, 0, 0, 8, 0,  1, 0,  3, 0, 4, 11, 2, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‿3‿3‿2‿2‿1≡/˜3‿2‿1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3‿3‿3‿2‿2‿1≡/˜3‿2‿1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[33],
                            runtime[45],          CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 3, 0, 4, 0, 5, 11, 3, 0, 2, 0, 1, 26, 16, 0,  0,
             0, 3, 0, 3, 0, 3, 0,  4, 0, 4, 0, 5, 11, 6,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‿3‿3‿2‿2‿1≡<⊸/3‿2‿1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3‿3‿3‿2‿2‿1≡<⊸/3‿2‿1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[33],          runtime[55],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 5, 0, 6, 11, 3, 0, 2, 0, 3, 0, 0,  27, 16, 0,
             1, 0, 4, 0, 4, 0, 4,  0, 5, 0, 5, 0, 6, 11, 6,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(≍1∾¨1‿2‿2)≡(↕¨/↕)2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(≍1∾¨1‿2‿2)≡(↕¨/↕)2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[23],          runtime[24],
        runtime[28],          runtime[33],          runtime[47],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  7,  0,  8,  11, 2, 0,  3, 0, 4,  0,  5,  0, 3,
             26, 21, 16, 0,  0,  0, 6,  0, 7, 0,  7,  11, 3, 0,
             5,  0,  1,  26, 0,  6, 17, 0, 2, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⟨⟩⊸/≡<)'a'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⟨⟩⊸/≡<)'a'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12], runtime[18], runtime[33], runtime[55],
                            CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 0, 0, 1, 0, 2, 0, 3, 11, 0, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(/≡⊢)↕10") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩(/≡⊢)↕10");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[21], runtime[28], runtime[33],
                            CXBQN_NEW(Number, 10)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 16, 0, 1, 0, 0, 0, 3, 21, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩(/≡⊢)≍\"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩(/≡⊢)≍\"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18], runtime[21], runtime[24], runtime[33],
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 4, 0, 2, 16, 0, 1, 0, 0, 0, 3, 21, 11, 0, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨2,<3⟩(/≡⥊˜¨⟜≢/⊢)'a'+4‿2⥊↕8") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨2,<3⟩(/≡⥊˜¨⟜≢/⊢)'a'+4‿2⥊↕8");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[12],
                            runtime[18],          runtime[19],
                            runtime[21],          runtime[22],
                            runtime[28],          runtime[33],
                            runtime[45],          runtime[47],
                            runtime[56],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 8), CXBQN_NEW(Character, U'a')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  14, 0, 6, 16, 0,  5, 0,  13, 0,  11, 11, 2,  17, 0, 0,  0,  15,
             17, 0,  4, 0, 7,  0,  3, 0,  10, 0,  9,  0,  8,  0,  5, 26, 26, 27,
             21, 0,  2, 0, 7,  21, 0, 11, 0,  12, 0,  1,  16, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
