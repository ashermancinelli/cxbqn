/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-22T17:39:03
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("(⊑≡⊑⌾⊢) ⟨↕3,2,<\"abc\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊑≡⊑⌾⊢) ⟨↕3,2,<\"abc\"⟩");
  CompileParams p({0, 6, 0, 3, 16, 0, 7,  0, 8, 0, 0, 16, 11, 3,
                   0, 2, 0, 5, 0,  4, 27, 0, 1, 0, 4, 21, 16, 7},
                  {runtime[12], runtime[18], runtime[21], runtime[28],
                   runtime[37], runtime[57], 3, 2,
                   std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 9, 9, 9, 12, 12, 15, 15, 14, 14, 14, 8, 8,
                    5,  5,  4, 4, 3, 3,  4,  2,  2,  1,  1,  2,  0, 0},
                   {10, 10, 9, 9, 9, 12, 12, 19, 19, 14, 14, 14, 20, 20,
                    5,  5,  4, 4, 3, 3,  4,  2,  2,  1,  1,  2,  6,  6}},
                  std::make_shared<Array>(U"(⊑≡⊑⌾⊢) ⟨↕3,2,<\"abc\"⟩"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3 (+≡+⌾⊣) 4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3 (+≡+⌾⊣) 4");
  CompileParams p({0, 5, 0, 2, 0, 3, 0, 0, 27, 0, 1, 0, 0, 21, 0, 4, 17, 7},
                  {runtime[0], runtime[18], runtime[20], runtime[57], 3, 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{10, 10, 7, 7, 6, 6, 5, 5, 6, 4, 4, 3, 3, 4, 0, 0, 2, 0},
                   {10, 10, 7, 7, 6, 6, 5, 5, 6, 4, 4, 3, 3, 4, 0, 0, 8, 0}},
                  std::make_shared<Array>(U"3 (+≡+⌾⊣) 4"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(¯2⊸↓ ≡ 2⊸↓⌾⌽) ↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(¯2⊸↓ ≡ 2⊸↓⌾⌽) ↕6");
  CompileParams p({0,  8,  0, 2, 16, 0, 3, 0, 5, 0, 1,  0,  4,  0, 7,
                   27, 27, 0, 0, 0,  1, 0, 4, 0, 6, 27, 21, 16, 7},
                  {runtime[18], runtime[27], runtime[28], runtime[31],
                   runtime[55], runtime[57], -2, 2, 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{16, 16, 15, 15, 15, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8,
                    9,  11, 6,  6,  4,  4,  3,  3,  1,  1,  3,  6, 0, 0},
                   {16, 16, 15, 15, 15, 12, 12, 11, 11, 10, 10, 9, 9,  8, 8,
                    9,  11, 6,  6,  4,  4,  3,  3,  2,  2,  3,  6, 13, 13}},
                  std::make_shared<Array>(U"(-2⊸↓ ≡ 2⊸↓⌾⌽) ↕6"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1⊸↓⌾⍉ ≡ 1⊸↓˘) ↕3‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1⊸↓⌾⍉ ≡ 1⊸↓˘) ↕3‿3");
  CompileParams p(
      {0,  8, 0, 8, 11, 2, 0, 2, 16, 0, 4, 0, 1, 0,  5,  0,  7,  27,
       26, 0, 0, 0, 3,  0, 6, 0, 1,  0, 5, 0, 7, 27, 27, 21, 16, 7},
      {runtime[18], runtime[27], runtime[28], runtime[32], runtime[46],
       runtime[55], runtime[57], 1, 3},
      {{0, 1, 0}}, {{0, 0}},
      {{16, 16, 18, 18, 18, 18, 15, 15, 15, 12, 12, 11, 11, 10, 10, 9, 9, 10,
        12, 7,  7,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  7, 0, 0},
       {16, 16, 18, 18, 18, 18, 15, 15, 15, 12, 12, 11, 11, 10, 10, 9, 9,  10,
        12, 7,  7,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  7, 13, 13}},
      std::make_shared<Array>(U"(1⊸↓⌾⍉ ≡ 1⊸↓˘) ↕3‿3"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7(⥊⌾(<˘)≡·<˘⁼⥊⟜(<˘))3‿3⥊↕9") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7(⥊⌾(<˘)≡·<˘⁼⥊⟜(<˘))3‿3⥊↕9");
  CompileParams p(
      {0, 10, 0, 3, 16, 0,  2,  0, 9, 0, 9,  11, 2, 17, 0,  4,  0,
       0, 26, 0, 6, 0,  2,  27, 0, 5, 0, 4,  0,  0, 26, 26, 20, 0,
       1, 0,  4, 0, 0,  26, 0,  7, 0, 2, 27, 21, 0, 8,  17, 7},
      {runtime[12], runtime[18], runtime[22], runtime[28], runtime[46],
       runtime[49], runtime[56], runtime[57], 7, 3, 9},
      {{0, 1, 0}}, {{0, 0}},
      {{25, 25, 24, 24, 24, 23, 23, 20, 20, 22, 22, 22, 22, 23, 17, 17, 16,
        16, 17, 14, 14, 13, 13, 14, 12, 12, 11, 11, 10, 10, 11, 12, 10, 8,
        8,  6,  6,  5,  5,  6,  3,  3,  2,  2,  3,  8,  0,  0,  1,  0},
       {25, 25, 24, 24, 24, 23, 23, 20, 20, 22, 22, 22, 22, 23, 17, 17, 16,
        16, 17, 14, 14, 13, 13, 14, 12, 12, 11, 11, 10, 10, 11, 12, 12, 8,
        8,  6,  6,  5,  5,  6,  3,  3,  2,  2,  3,  8,  0,  0,  19, 0}},
      std::make_shared<Array>(U"7(⥊⌾(<˘)≡·<˘⁼⥊⟜(<˘))3‿3⥊↕9"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\" (⊣≡»⌾≍) ↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\" (⊣≡»⌾≍) ↕4");
  CompileParams p(
      {0, 6, 0, 3, 16, 0, 2, 0, 5, 0, 4, 27, 0, 0, 0, 1, 21, 0, 7, 17, 7},
      {runtime[18], runtime[20], runtime[24], runtime[28], runtime[30],
       runtime[57], 4, std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{16, 16, 15, 15, 15, 12, 12, 11, 11, 10, 10,
        11, 9,  9,  8,  8,  9,  0,  0,  7,  0},
       {16, 16, 15, 15, 15, 12, 12, 11, 11, 10, 10,
        11, 9,  9,  8,  8,  9,  5,  5,  13, 5}},
      std::make_shared<Array>(U"\"abcd\" (⊣≡»⌾≍) ↕4"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽∘|⊸/4‿¯3) ≡ ↕∘≠⊸-⌾(3⊸⌽)↕7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽∘|⊸/4‿¯3) ≡ ↕∘≠⊸-⌾(3⊸⌽)↕7");
  CompileParams p(
      {0,  13, 0, 4, 16, 0, 5, 0,  8,  0,  12, 27, 0,  9,  0,  0,  0,
       8,  0,  2, 0, 7,  0, 4, 27, 27, 27, 16, 0,  3,  0,  10, 0,  11,
       11, 2,  0, 6, 0,  8, 0, 1,  0,  7,  0,  5,  27, 27, 16, 17, 7},
      {runtime[1], runtime[8], runtime[14], runtime[18], runtime[28],
       runtime[31], runtime[33], runtime[53], runtime[55], runtime[57], 4, -3,
       3, 7},
      {{0, 1, 0}}, {{0, 0}},
      {{26, 26, 25, 25, 25, 23, 23, 22, 22, 21, 21, 22, 19, 19, 18, 18, 17,
        17, 16, 16, 15, 15, 14, 14, 15, 17, 19, 14, 12, 12, 6,  6,  8,  8,
        8,  8,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  1,  12, 0},
       {26, 26, 25, 25, 25, 23, 23, 22, 22, 21, 21, 22, 19, 19, 18, 18, 17,
        17, 16, 16, 15, 15, 14, 14, 15, 17, 19, 24, 12, 12, 6,  6,  9,  9,
        9,  9,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  2,  4,  5,  12, 10}},
      std::make_shared<Array>(U"(⌽∘|⊸/4‿-3) ≡ ↕∘≠⊸-⌾(3⊸⌽)↕7"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bbcd\" ≡ 1⊸+⌾⊑ \"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bbcd\" ≡ 1⊸+⌾⊑ \"abcd\"");
  CompileParams p(
      {0, 7, 0, 2, 0, 4, 0, 0, 0, 3, 0, 5, 27, 27, 16, 0, 1, 0, 6, 17, 7},
      {runtime[0], runtime[18], runtime[37], runtime[55], runtime[57], 1,
       std::make_shared<Array>(U"bbcd"), std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{15, 15, 13, 13, 12, 12, 11, 11, 10, 10, 9,
        9,  10, 12, 9,  7,  7,  0,  0,  7,  0},
       {20, 20, 13, 13, 12, 12, 11, 11, 10, 10, 9,
        9,  10, 12, 13, 7,  7,  5,  5,  7,  5}},
      std::make_shared<Array>(U"\"bbcd\" ≡ 1⊸+⌾⊑ \"abcd\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<∘- ≡ -⌾⊑) 4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<∘- ≡ -⌾⊑) 4");
  CompileParams p(
      {0, 6, 0, 3, 0, 5, 0, 0, 27, 0, 2, 0, 0, 0, 4, 0, 1, 27, 21, 16, 7},
      {runtime[1], runtime[12], runtime[18], runtime[37], runtime[53],
       runtime[57], 4},
      {{0, 1, 0}}, {{0, 0}},
      {{12, 12, 9, 9, 8, 8, 7, 7, 8, 5, 5, 3, 3, 2, 2, 1, 1, 2, 5, 0, 0},
       {12, 12, 9, 9, 8, 8, 7, 7, 8, 5, 5, 3, 3, 2, 2, 1, 1, 2, 5, 10, 10}},
      std::make_shared<Array>(U"(<∘- ≡ -⌾⊑) 4"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽⌾⊏ ≡ ⌽⊸≍˝) \"abc\"≍\"def\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽⌾⊏ ≡ ⌽⊸≍˝) \"abc\"≍\"def\"");
  CompileParams p({0,  8,  0, 1, 0, 7, 17, 0, 4, 0, 1,  0,  5,  0, 2,
                   27, 26, 0, 0, 0, 3, 0,  6, 0, 2, 27, 21, 16, 7},
                  {runtime[18], runtime[24], runtime[31], runtime[36],
                   runtime[51], runtime[55], runtime[57],
                   std::make_shared<Array>(U"abc"),
                   std::make_shared<Array>(U"def")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{19, 19, 18, 18, 13, 13, 18, 10, 10, 9, 9, 8, 8, 7, 7,
                    8,  10, 5,  5,  3,  3,  2,  2,  1,  1, 2, 5, 0, 0},
                   {23, 23, 18, 18, 17, 17, 18, 10, 10, 9, 9, 8, 8,  7, 7,
                    8,  10, 5,  5,  3,  3,  2,  2,  1,  1, 2, 5, 11, 11}},
                  std::make_shared<Array>(U"(⌽⌾⊏ ≡ ⌽⊸≍˝) \"abc\"≍\"def\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1 ≡ \"cd\"‿\"ab\"⊸⊐⌾< \"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1 ≡ \"cd\"‿\"ab\"⊸⊐⌾< \"ab\"");
  CompileParams p({0, 7,  0, 0,  0,  4,  0, 2, 0, 3, 0,  6, 0,
                   7, 11, 2, 27, 27, 16, 0, 1, 0, 5, 17, 7},
                  {runtime[12], runtime[18], runtime[38], runtime[55],
                   runtime[57], 1, std::make_shared<Array>(U"cd"),
                   std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}}, {{0, 0}},
                  {{18, 18, 16, 16, 15, 15, 14, 14, 13, 13, 4, 4, 9,
                    9,  9,  9,  13, 15, 9,  2,  2,  0,  0,  2, 0},
                   {21, 21, 16, 16, 15, 15, 14, 14, 13, 13, 7, 7, 12,
                    12, 12, 12, 13, 15, 16, 2,  2,  0,  0,  2, 0}},
                  std::make_shared<Array>(U"1 ≡ \"cd\"‿\"ab\"⊸⊐⌾< \"ab\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿1+⌜0‿4‿2) ≡ ⍋∘⍋⌾⥊ \"apl\"≍\"bqn\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿1+⌜0‿4‿2) ≡ ⍋∘⍋⌾⥊ \"apl\"≍\"bqn\"");
  CompileParams p(
      {0, 13, 0,  3,  0,  12, 17, 0, 2, 0,  7,  0,  4,  0,  6,
       0, 4,  27, 27, 16, 0,  1,  0, 8, 0,  10, 0,  11, 11, 3,
       0, 5,  0,  0,  26, 0,  8,  0, 9, 11, 2,  17, 17, 7},
      {runtime[0], runtime[18], runtime[22], runtime[24], runtime[34],
       runtime[48], runtime[53], runtime[57], 0, 1, 4, 2,
       std::make_shared<Array>(U"apl"), std::make_shared<Array>(U"bqn")},
      {{0, 1, 0}}, {{0, 0}},
      {{27, 27, 26, 26, 21, 21, 26, 19, 19, 18, 18, 17, 17, 16, 16,
        15, 15, 16, 18, 15, 13, 13, 6,  6,  8,  8,  10, 10, 10, 10,
        5,  5,  4,  4,  5,  1,  1,  3,  3,  3,  3,  4,  13, 0},
       {31, 31, 26, 26, 25, 25, 26, 19, 19, 18, 18, 17, 17, 16, 16,
        15, 15, 16, 18, 19, 13, 13, 6,  6,  8,  8,  10, 10, 10, 10,
        5,  5,  4,  4,  5,  1,  1,  3,  3,  3,  3,  5,  13, 11}},
      std::make_shared<Array>(U"(0‿1+⌜0‿4‿2) ≡ ⍋∘⍋⌾⥊ \"apl\"≍\"bqn\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2 (⌽⌾⥊ ≡ 12|+) ⥊⟜(↕×´)6‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2 (⌽⌾⥊ ≡ 12|+) ⥊⟜(↕×´)6‿2");
  CompileParams p({0, 12, 0, 10, 11, 2,  0, 7,  0,  1, 26, 0,  5,  20,
                   0, 8,  0, 4,  27, 16, 0, 0,  0,  2, 0,  11, 21, 0,
                   3, 0,  4, 0,  9,  0,  6, 27, 21, 0, 10, 17, 7},
                  {runtime[0], runtime[2], runtime[8], runtime[18], runtime[22],
                   runtime[28], runtime[31], runtime[50], runtime[56],
                   runtime[57], 2, 12, 6},
                  {{0, 1, 0}}, {{0, 0}},
                  {{22, 22, 24, 24, 24, 24, 20, 20, 19, 19, 20, 18, 18, 18,
                    16, 16, 15, 15, 16, 15, 12, 12, 11, 11, 9,  9,  11, 7,
                    7,  5,  5,  4,  4,  3,  3,  4,  7,  0,  0,  2,  0},
                   {22, 22, 24, 24, 24, 24, 20, 20, 19, 19, 20, 18, 18, 18,
                    16, 16, 15, 15, 16, 21, 12, 12, 11, 11, 10, 10, 11, 7,
                    7,  5,  5,  4,  4,  3,  3,  4,  7,  0,  0,  13, 0}},
                  std::make_shared<Array>(U"2 (⌽⌾⥊ ≡ 12|+) ⥊⟜(↕×´)6‿2"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("↕∘≠⊸+{𝔽≡𝔽¨⌾↑} \"abcde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕∘≠⊸+{𝔽≡𝔽¨⌾↑} \"abcde\"");
  CompileParams p(
      {0, 9, 1, 1, 0, 0, 0,  7, 0, 1,  0,  6, 0, 4,  27, 27, 26, 16, 7,
       0, 3, 0, 8, 0, 5, 32, 0, 1, 26, 27, 0, 2, 34, 0,  1,  21, 7},
      {runtime[0], runtime[14], runtime[18], runtime[26], runtime[28],
       runtime[47], runtime[53], runtime[55], runtime[57],
       std::make_shared<Array>(U"abcde")},
      {{0, 1, 0}, {1, 1, 1}}, {{0, 0}, {19, 2}},
      {{14, 14, 5,  5,  4, 4, 3, 3, 2, 2, 1,  1, 0, 0, 1, 3, 5, 0, 5,
        11, 11, 10, 10, 9, 9, 8, 8, 8, 9, 10, 7, 7, 6, 6, 6, 7, 6},
       {20, 20, 12, 12, 4, 4, 3, 3, 2, 2, 1,  1, 0, 0, 1, 3, 12, 12, 12,
        11, 11, 10, 10, 9, 9, 8, 8, 8, 9, 10, 7, 7, 6, 6, 6, 7,  6}},
      std::make_shared<Array>(U"↕∘≠⊸+{𝔽≡𝔽¨⌾↑} \"abcde\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2⊸+{𝔽≡𝔽¨⌾↓} \"abcde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2⊸+{𝔽≡𝔽¨⌾↓} \"abcde\"");
  CompileParams p({0, 7, 1, 1, 0,  0, 0, 4,  0,  6, 27, 26, 16, 7, 0,  2,
                   0, 5, 0, 3, 32, 0, 1, 26, 27, 0, 1,  34, 0,  1, 21, 7},
                  {runtime[0], runtime[18], runtime[27], runtime[47],
                   runtime[55], runtime[57], 2,
                   std::make_shared<Array>(U"abcde")},
                  {{0, 1, 0}, {1, 1, 1}}, {{0, 0}, {14, 2}},
                  {{12, 12, 3, 3, 2, 2, 1, 1, 0, 0, 1, 3, 0, 3, 9, 9,
                    8,  8,  7, 7, 6, 6, 6, 7, 8, 5, 5, 4, 4, 4, 5, 4},
                   {18, 18, 10, 10, 2, 2, 1, 1, 0, 0, 1, 10, 10, 10, 9, 9,
                    8,  8,  7,  7,  6, 6, 6, 7, 8, 5, 5, 4,  4,  4,  5, 4}},
                  std::make_shared<Array>(U"2⊸+{𝔽≡𝔽¨⌾↓} \"abcde\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽⍒⌊2÷˜↕7) ≡ ⌽˘⌾(⌊‿2⥊⊢)↕7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽⍒⌊2÷˜↕7) ≡ ⌽˘⌾(⌊‿2⥊⊢)↕7");
  CompileParams p(
      {0,  12, 0,  5, 16, 0,  3,  0,  4,  0, 1, 0,  11, 11, 2,  21, 0,
       10, 0,  9,  0, 6,  26, 27, 16, 0,  2, 0, 12, 0,  5,  16, 0,  8,
       0,  0,  26, 0, 11, 17, 0,  1,  16, 0, 7, 16, 0,  6,  16, 17, 7},
      {runtime[3], runtime[6], runtime[18], runtime[21], runtime[22],
       runtime[28], runtime[31], runtime[35], runtime[45], runtime[46],
       runtime[57], 2, 7},
      {{0, 1, 0}}, {{0, 0}},
      {{24, 24, 23, 23, 23, 21, 21, 20, 20, 17, 17, 19, 19, 19, 19, 20, 15,
        15, 14, 14, 13, 13, 14, 15, 13, 11, 11, 8,  8,  7,  7,  7,  6,  6,
        5,  5,  6,  4,  4,  5,  3,  3,  3,  2,  2,  2,  1,  1,  1,  11, 0},
       {24, 24, 23, 23, 23, 21, 21, 20, 20, 17, 17, 19, 19, 19, 19, 20, 15,
        15, 14, 14, 13, 13, 14, 15, 22, 11, 11, 8,  8,  7,  7,  7,  6,  6,
        5,  5,  6,  4,  4,  6,  3,  3,  3,  2,  2,  2,  1,  1,  1,  11, 9}},
      std::make_shared<Array>(U"(⌽⍒⌊2÷˜↕7) ≡ ⌽˘⌾(⌊‿2⥊⊢)↕7"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1‿0‿1‿3 ≡ -⟜(+´÷≠)⌾(3⊸↑)↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1‿0‿1‿3 ≡ -⟜(+´÷≠)⌾(3⊸↑)↕4");
  CompileParams p({0,  15, 0, 6, 16, 0, 5,  0,  8,  0, 14, 27, 0, 10, 0,
                   3,  0,  2, 0, 7,  0, 0,  26, 21, 0, 9,  0,  1, 27, 27,
                   16, 0,  4, 0, 11, 0, 12, 0,  13, 0, 14, 11, 4, 17, 7},
                  {runtime[0], runtime[1], runtime[3], runtime[14], runtime[18],
                   runtime[26], runtime[28], runtime[50], runtime[55],
                   runtime[56], runtime[57], -1, 0, 1, 3, 4},
                  {{0, 1, 0}}, {{0, 0}},
                  {{26, 26, 25, 25, 25, 23, 23, 22, 22, 21, 21, 22, 19, 19, 17,
                    17, 16, 16, 15, 15, 14, 14, 15, 16, 12, 12, 11, 11, 12, 19,
                    11, 9,  9,  0,  0,  3,  3,  5,  5,  7,  7,  7,  7,  9,  7},
                   {26, 26, 25, 25, 25, 23, 23, 22, 22, 21, 21, 22, 19, 19, 17,
                    17, 16, 16, 15, 15, 14, 14, 15, 16, 12, 12, 11, 11, 12, 19,
                    24, 9,  9,  1,  1,  3,  3,  5,  5,  7,  7,  7,  7,  9,  7}},
                  std::make_shared<Array>(U"-1‿0‿1‿3 ≡ -⟜(+´÷≠)⌾(3⊸↑)↕4"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"adcb\" ≡ ⌽⌾(1⊸↓)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"adcb\" ≡ ⌽⌾(1⊸↓)\"abcd\"");
  CompileParams p(
      {0, 7, 0, 1, 0, 3, 0, 5, 27, 0, 4, 0, 2, 27, 16, 0, 0, 0, 6, 17, 7},
      {runtime[18], runtime[27], runtime[31], runtime[55], runtime[57], 1,
       std::make_shared<Array>(U"adcb"), std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{16, 16, 14, 14, 13, 13, 12, 12, 13, 10, 10,
        9,  9,  10, 9,  7,  7,  0,  0,  7,  0},
       {21, 21, 14, 14, 13, 13, 12, 12, 13, 10, 10,
        9,  9,  10, 15, 7,  7,  5,  5,  7,  5}},
      std::make_shared<Array>(U"\"adcb\" ≡ ⌽⌾(1⊸↓)\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‿6‿3‿0 ≡ (5‿3‿1⌾(0‿0⊸⍉)4‿3⥊0) +´∘×⎉1‿∞ 1+↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5‿6‿3‿0 ≡ (5‿3‿1⌾(0‿0⊸⍉)4‿3⥊0) +´∘×⎉1‿∞ 1+↕3");
  CompileParams p(
      {0,  13, 0,  4,  16, 0,  0,  0,  15, 17, 0,  15, 0,  17, 11, 2,
       0,  10, 0,  1,  0,  7,  0,  6,  0,  0,  26, 27, 27, 0,  14, 0,
       3,  0,  16, 0,  13, 11, 2,  17, 0,  5,  0,  8,  0,  14, 0,  14,
       11, 2,  27, 0,  9,  0,  11, 0,  13, 0,  15, 11, 3,  27, 16, 17,
       0,  2,  0,  11, 0,  12, 0,  13, 0,  14, 11, 4,  17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[22], runtime[28],
       runtime[32], runtime[50], runtime[53], runtime[55], runtime[57],
       runtime[60], 5, 6, 3, 0, 1, 4, std::make_shared<Number>(1.0 / 0.0)},
      {{0, 1, 0}}, {{0, 0}},
      {{43, 43, 42, 42, 42, 41, 41, 40, 40, 41, 36, 36, 38, 38, 38, 38,
        35, 35, 34, 34, 33, 33, 32, 32, 31, 31, 32, 33, 35, 28, 28, 27,
        27, 24, 24, 26, 26, 26, 26, 27, 22, 22, 21, 21, 18, 18, 20, 20,
        20, 20, 21, 16, 16, 11, 11, 13, 13, 15, 15, 15, 15, 16, 15, 31,
        8,  8,  0,  0,  2,  2,  4,  4,  6,  6,  6,  6,  8,  6},
       {43, 43, 42, 42, 42, 41, 41, 40, 40, 41, 36, 36, 38, 38, 38, 38,
        35, 35, 34, 34, 33, 33, 32, 32, 31, 31, 32, 33, 35, 28, 28, 27,
        27, 24, 24, 26, 26, 26, 26, 27, 22, 22, 21, 21, 18, 18, 20, 20,
        20, 20, 21, 16, 16, 11, 11, 13, 13, 15, 15, 15, 15, 16, 23, 38,
        8,  8,  0,  0,  2,  2,  4,  4,  6,  6,  6,  6,  8,  6}},
      std::make_shared<Array>(U"5‿6‿3‿0 ≡ (5‿3‿1⌾(0‿0⊸⍉)4‿3⥊0) +´∘×⎉1‿∞ 1+↕3"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"AbcD\" ≡ ('A'-'a')⊸+⌾(1‿0‿0‿1⊸/)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"AbcD\" ≡ ('A'-'a')⊸+⌾(1‿0‿0‿1⊸/)\"abcd\"");
  CompileParams p(
      {0, 11, 0, 3, 0, 4, 0, 6, 0, 7,  0,  7,  0,  6, 11, 4, 27, 0,  5, 0,
       0, 0,  4, 0, 9, 0, 1, 0, 8, 17, 27, 27, 16, 0, 2,  0, 10, 17, 7},
      {runtime[0], runtime[1], runtime[18], runtime[33], runtime[55],
       runtime[57], 1, 0, std::make_shared<Character>(U'A'),
       std::make_shared<Character>(U'a'), std::make_shared<Array>(U"AbcD"),
       std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{32, 32, 30, 30, 29, 29, 22, 22, 24, 24, 26, 26, 28,
        28, 28, 28, 29, 20, 20, 19, 19, 18, 18, 14, 14, 13,
        13, 10, 10, 13, 18, 20, 9,  7,  7,  0,  0,  7,  0},
       {37, 37, 30, 30, 29, 29, 22, 22, 24, 24, 26, 26, 28,
        28, 28, 28, 29, 20, 20, 19, 19, 18, 18, 16, 16, 13,
        13, 12, 12, 13, 18, 20, 31, 7,  7,  5,  5,  7,  5}},
      std::make_shared<Array>(
          U"\"AbcD\" ≡ (\'A\'-\'a\')⊸+⌾(1‿0‿0‿1⊸/)\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"AbcD\" ≡ \"ABCD\"⊣⌾(1‿0‿0‿1⊸/)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"AbcD\" ≡ \"ABCD\"⊣⌾(1‿0‿0‿1⊸/)\"abcd\"");
  CompileParams p(
      {0,  9, 0, 2, 0, 3,  0, 5, 0,  6, 0, 6, 0, 5,  11, 4,
       27, 0, 4, 0, 1, 27, 0, 8, 17, 0, 0, 0, 7, 17, 7},
      {runtime[18], runtime[20], runtime[33], runtime[55], runtime[57], 1, 0,
       std::make_shared<Array>(U"AbcD"), std::make_shared<Array>(U"ABCD"),
       std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{28, 28, 26, 26, 25, 25, 18, 18, 20, 20, 22, 22, 24, 24, 24, 24,
        25, 16, 16, 15, 15, 16, 9,  9,  15, 7,  7,  0,  0,  7,  0},
       {33, 33, 26, 26, 25, 25, 18, 18, 20, 20, 22, 22, 24, 24, 24, 24,
        25, 16, 16, 15, 15, 16, 14, 14, 27, 7,  7,  5,  5,  7,  5}},
      std::make_shared<Array>(U"\"AbcD\" ≡ \"ABCD\"⊣⌾(1‿0‿0‿1⊸/)\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1⊸⌽ ≡ 2⊸⌽⌾(2⊸/)) ↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1⊸⌽ ≡ 2⊸⌽⌾(2⊸/)) ↕5");
  CompileParams p(
      {0, 8, 0, 1,  16, 0, 3, 0, 4, 0, 7, 27, 0, 5,  0,  2,  0,
       4, 0, 7, 27, 27, 0, 0, 0, 2, 0, 4, 0,  6, 27, 21, 16, 7},
      {runtime[18], runtime[28], runtime[31], runtime[33], runtime[55],
       runtime[57], 1, 2, 5},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 18, 18, 18, 14, 14, 13, 13, 12, 12, 13, 10, 10, 9, 9, 8,
        8,  7,  7,  8,  10, 5,  5,  3,  3,  2,  2,  1,  1,  2,  5, 0, 0},
       {19, 19, 18, 18, 18, 14, 14, 13, 13, 12, 12, 13, 10, 10, 9, 9,  8,
        8,  7,  7,  8,  10, 5,  5,  3,  3,  2,  2,  1,  1,  2,  5, 16, 16}},
      std::make_shared<Array>(U"(1⊸⌽ ≡ 2⊸⌽⌾(2⊸/)) ↕5"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0⊸⊏)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0⊸⊏)\"abcd\"");
  CompileParams p(
      {0, 9, 0, 2, 0, 3, 0, 5,  0,  6,  0, 7, 11, 3, 27, 0,
       4, 0, 1, 0, 3, 0, 5, 27, 27, 16, 0, 0, 0,  8, 17, 7},
      {runtime[18], runtime[31], runtime[36], runtime[55], runtime[57], 1, 3, 0,
       std::make_shared<Array>(U"bdca"), std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{22, 22, 20, 20, 19, 19, 14, 14, 16, 16, 18, 18, 18, 18, 19, 12,
        12, 11, 11, 10, 10, 9,  9,  10, 12, 9,  7,  7,  0,  0,  7,  0},
       {27, 27, 20, 20, 19, 19, 14, 14, 16, 16, 18, 18, 18, 18, 19, 12,
        12, 11, 11, 10, 10, 9,  9,  10, 12, 21, 7,  7,  5,  5,  7,  5}},
      std::make_shared<Array>(U"\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0⊸⊏)\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((¯1⋆2∧⌜○(⌽0=↕)3)⊸× ≡ -⌾(1‿2⊑⊢))↕2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((¯1⋆2∧⌜○(⌽0=↕)3)⊸× ≡ -⌾(1‿2⊑⊢))↕2‿3");
  CompileParams p(
      {0,  15, 0,  17, 11, 2,  0,  7,  16, 0,  6,  0,  9,  0,  18, 0,
       15, 11, 2,  21, 0,  13, 0,  0,  27, 0,  5,  0,  1,  0,  12, 0,
       17, 0,  7,  0,  4,  0,  16, 21, 0,  8,  20, 0,  11, 0,  10, 0,
       3,  26, 27, 0,  15, 17, 0,  2,  0,  14, 17, 27, 21, 16, 7},
      {runtime[1], runtime[2], runtime[4], runtime[10], runtime[15],
       runtime[18], runtime[21], runtime[28], runtime[31], runtime[37],
       runtime[48], runtime[54], runtime[55], runtime[57], -1, 2, 0, 3, 1},
      {{0, 1, 0}}, {{0, 0}},
      {{33, 33, 35, 35, 35, 35, 32, 32, 32, 29, 29, 28, 28, 25, 25, 27,
        27, 27, 27, 28, 23, 23, 22, 22, 23, 20, 20, 18, 18, 17, 17, 15,
        15, 13, 13, 12, 12, 11, 11, 12, 10, 10, 10, 8,  8,  7,  7,  6,
        6,  7,  8,  5,  5,  6,  4,  4,  2,  2,  4,  17, 20, 0,  0},
       {33, 33, 35, 35, 35, 35, 32, 32, 32, 29, 29, 28, 28, 25, 25, 27,
        27, 27, 27, 28, 23, 23, 22, 22, 23, 20, 20, 18, 18, 17, 17, 15,
        15, 13, 13, 12, 12, 11, 11, 12, 10, 10, 10, 8,  8,  7,  7,  6,
        6,  7,  8,  5,  5,  14, 4,  4,  3,  3,  4,  17, 20, 31, 31}},
      std::make_shared<Array>(U"((-1⋆2∧⌜○(⌽0=↕)3)⊸× ≡ -⌾(1‿2⊑⊢))↕2‿3"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((0‿3≍1‿2)⊸+ ≡ ⟨1,2‿3⟩⊸+⌾(⟨1‿0,⟨1‿1,0‿1⟩⟩⊸⊑))↕2‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "((0‿3≍1‿2)⊸+ ≡ ⟨1,2‿3⟩⊸+⌾(⟨1‿0,⟨1‿1,0‿1⟩⟩⊸⊑))↕2‿2");
  CompileParams p(
      {0, 10, 0, 10, 11, 2,  0, 3, 16, 0,  4,  0,  5,  0,  9,  0,  7,  11, 2, 0,
       9, 0,  9, 11, 2,  0,  7, 0, 9,  11, 2,  11, 2,  11, 2,  27, 0,  6,  0, 0,
       0, 5,  0, 9,  0,  10, 0, 8, 11, 2,  11, 2,  27, 27, 0,  1,  0,  0,  0, 5,
       0, 9,  0, 10, 11, 2,  0, 2, 0,  7,  0,  8,  11, 2,  17, 27, 21, 16, 7},
      {runtime[0], runtime[18], runtime[24], runtime[28], runtime[37],
       runtime[55], runtime[57], 0, 3, 1, 2},
      {{0, 1, 0}}, {{0, 0}},
      {{46, 46, 48, 48, 48, 48, 45, 45, 45, 42, 42, 41, 41, 27, 27, 29,
        29, 29, 29, 32, 32, 34, 34, 34, 34, 36, 36, 38, 38, 38, 38, 31,
        31, 26, 26, 41, 24, 24, 23, 23, 22, 22, 16, 16, 18, 18, 20, 20,
        20, 20, 15, 15, 22, 24, 13, 13, 11, 11, 10, 10, 6,  6,  8,  8,
        8,  8,  5,  5,  2,  2,  4,  4,  4,  4,  5,  10, 13, 0,  0},
       {46, 46, 48, 48, 48, 48, 45, 45, 45, 42, 42, 41, 41, 27, 27, 29,
        29, 29, 29, 32, 32, 34, 34, 34, 34, 36, 36, 38, 38, 38, 38, 39,
        39, 40, 40, 41, 24, 24, 23, 23, 22, 22, 16, 16, 18, 18, 20, 20,
        20, 20, 21, 21, 22, 24, 13, 13, 11, 11, 10, 10, 6,  6,  8,  8,
        8,  8,  5,  5,  2,  2,  4,  4,  4,  4,  5,  10, 13, 44, 44}},
      std::make_shared<Array>(
          U"((0‿3≍1‿2)⊸+ ≡ ⟨1,2‿3⟩⊸+⌾(⟨1‿0,⟨1‿1,0‿1⟩⟩⊸⊑))↕2‿2"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1+↕3) ≡ 1⊸↓⌾(@⊢·⊑<)↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1+↕3) ≡ 1⊸↓⌾(@⊢·⊑<)↕4");
  CompileParams p({0,  11, 0, 5, 16, 0, 1, 0, 6, 20, 0,  3,  0, 12,
                   21, 0,  8, 0, 4,  0, 7, 0, 9, 27, 27, 16, 0, 2,
                   0,  10, 0, 5, 16, 0, 0, 0, 9, 17, 17, 7},
                  {runtime[0], runtime[12], runtime[18], runtime[21],
                   runtime[27], runtime[28], runtime[37], runtime[55],
                   runtime[57], 1, 3, 4, std::make_shared<Character>(U'\0')},
                  {{0, 1, 0}}, {{0, 0}},
                  {{21, 21, 20, 20, 20, 18, 18, 17, 17, 17, 15, 15, 14, 14,
                    15, 12, 12, 11, 11, 10, 10, 9,  9,  10, 12, 9,  7,  7,
                    4,  4,  3,  3,  3,  2,  2,  1,  1,  2,  7,  0},
                   {21, 21, 20, 20, 20, 18, 18, 17, 17, 17, 15, 15, 14, 14,
                    15, 12, 12, 11, 11, 10, 10, 9,  9,  10, 12, 19, 7,  7,
                    4,  4,  3,  3,  3,  2,  2,  1,  1,  2,  7,  5}},
                  std::make_shared<Array>(U"(1+↕3) ≡ 1⊸↓⌾(@⊢·⊑<)↕4"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"210abc\" ≡ ⌽⌾((2÷˜≠)⊸↑)\"012abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"210abc\" ≡ ⌽⌾((2÷˜≠)⊸↑)\"012abc\"");
  CompileParams p(
      {0,  10, 0, 3, 0, 6, 0,  1,  0, 5, 0, 0, 26, 0, 8,
       21, 27, 0, 7, 0, 4, 27, 16, 0, 2, 0, 9, 17, 7},
      {runtime[3], runtime[14], runtime[18], runtime[26], runtime[31],
       runtime[45], runtime[55], runtime[57], 2,
       std::make_shared<Array>(U"210abc"), std::make_shared<Array>(U"012abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{23, 23, 21, 21, 20, 20, 18, 18, 17, 17, 16, 16, 17, 15, 15,
        16, 20, 12, 12, 11, 11, 12, 11, 9,  9,  0,  0,  9,  0},
       {30, 30, 21, 21, 20, 20, 18, 18, 17, 17, 16, 16, 17, 15, 15,
        17, 20, 12, 12, 11, 11, 12, 22, 9,  9,  7,  7,  9,  7}},
      std::make_shared<Array>(U"\"210abc\" ≡ ⌽⌾((2÷˜≠)⊸↑)\"012abc\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bac\"‿'d' ≡ ⌽⌾(2↑⊑)\"abc\"‿'d'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bac\"‿'d' ≡ ⌽⌾(2↑⊑)\"abc\"‿'d'");
  CompileParams p(
      {0, 8, 0,  6,  11, 2, 0, 3, 0, 1, 0,  5, 21, 0, 4,
       0, 2, 27, 16, 0,  0, 0, 7, 0, 6, 11, 2, 17, 7},
      {runtime[18], runtime[26], runtime[31], runtime[37], runtime[57], 2,
       std::make_shared<Character>(U'd'), std::make_shared<Array>(U"bac"),
       std::make_shared<Array>(U"abc")},
      {{0, 1, 0}}, {{0, 0}},
      {{19, 19, 25, 25, 25, 25, 17, 17, 16, 16, 15, 15, 16, 13, 13,
        12, 12, 13, 12, 10, 10, 0,  0,  6,  6,  6,  6,  10, 6},
       {23, 23, 27, 27, 27, 27, 17, 17, 16, 16, 15, 15, 16, 13, 13,
        12, 12, 13, 18, 10, 10, 4,  4,  8,  8,  8,  8,  10, 8}},
      std::make_shared<Array>(U"\"bac\"‿\'d\' ≡ ⌽⌾(2↑⊑)\"abc\"‿\'d\'"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽¨⌾(<2‿3⊸⊏) ≡ ⌽⌾(2‿3⊸⊏)) \"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽¨⌾(<2‿3⊸⊏) ≡ ⌽⌾(2‿3⊸⊏)) \"abcdef\"");
  CompileParams p(
      {0,  9, 0,  3,  0, 5, 0, 7, 0, 8, 11, 2,  27, 0,  6,
       0,  2, 27, 0,  1, 0, 3, 0, 5, 0, 7,  0,  8,  11, 2,
       27, 0, 0,  20, 0, 6, 0, 4, 0, 2, 26, 27, 21, 16, 7},
      {runtime[12], runtime[18], runtime[31], runtime[36], runtime[47],
       runtime[55], runtime[57], 2, 3, std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}}, {{0, 0}},
      {{26, 26, 22, 22, 21, 21, 18, 18, 20, 20, 20, 20, 21, 16, 16,
        15, 15, 16, 13, 13, 10, 10, 9,  9,  6,  6,  8,  8,  8,  8,
        9,  5,  5,  5,  3,  3,  2,  2,  1,  1,  2,  3,  13, 0,  0},
       {33, 33, 22, 22, 21, 21, 18, 18, 20, 20, 20, 20, 21, 16, 16,
        15, 15, 16, 13, 13, 10, 10, 9,  9,  6,  6,  8,  8,  8,  8,
        9,  5,  5,  5,  3,  3,  2,  2,  1,  1,  2,  3,  13, 24, 24}},
      std::make_shared<Array>(U"(⌽¨⌾(<2‿3⊸⊏) ≡ ⌽⌾(2‿3⊸⊏)) \"abcdef\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0˙⊏⊢)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0˙⊏⊢)\"abcd\"");
  CompileParams p(
      {0, 11, 0, 1, 0, 3, 0, 4, 0,  7,  0,  8, 0, 9, 11, 3,  26, 21,
       0, 6,  0, 2, 0, 5, 0, 7, 27, 27, 16, 0, 0, 0, 10, 17, 7},
      {runtime[18], runtime[21], runtime[31], runtime[36], runtime[44],
       runtime[55], runtime[57], 1, 3, 0, std::make_shared<Array>(U"bdca"),
       std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}}, {{0, 0}},
      {{23, 23, 21, 21, 20, 20, 19, 19, 14, 14, 16, 16, 18, 18, 18, 18, 19, 20,
        12, 12, 11, 11, 10, 10, 9,  9,  10, 12, 9,  7,  7,  0,  0,  7,  0},
       {28, 28, 21, 21, 20, 20, 19, 19, 14, 14, 16, 16, 18, 18, 18, 18, 19, 20,
        12, 12, 11, 11, 10, 10, 9,  9,  10, 12, 22, 7,  7,  5,  5,  7,  5}},
      std::make_shared<Array>(U"\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0˙⊏⊢)\"abcd\""));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∘‿+ ≡ ⊢⌾∘‿+ 1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∘‿+ ≡ ⊢⌾∘‿+ 1");
  CompileParams p(
      {0,  5,  0, 3, 0, 0, 11, 2, 0,  4, 0,  2,
       27, 16, 0, 1, 0, 3, 0,  0, 11, 2, 17, 7},
      {runtime[0], runtime[18], runtime[21], runtime[53], runtime[57], 1},
      {{0, 1, 0}}, {{0, 0}},
      {{12, 12, 8, 8, 10, 10, 10, 10, 7, 7, 6, 6,
        7,  6,  4, 4, 0,  0,  2,  2,  2, 2, 4, 2},
       {12, 12, 8, 8, 10, 10, 10, 10, 7, 7, 6, 6,
        7,  10, 4, 4, 0,  0,  2,  2,  2, 2, 4, 2}},
      std::make_shared<Array>(U"∘‿+ ≡ ⊢⌾∘‿+ 1"));
  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
