/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-29T16:53:01
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("(⊑≡⊑⌾⊢) ⟨↕3,2,<\"abc\"⟩") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊑≡⊑⌾⊢) ⟨↕3,2,<\"abc\"⟩");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],          runtime[21],
        runtime[28],          runtime[37],          runtime[57],
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 3, 16, 0, 7,  0, 8, 0, 0, 16, 11, 3,
             0, 2, 0, 5, 0,  4, 27, 0, 1, 0, 4, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3 (+≡+⌾⊣) 4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3 (+≡+⌾⊣) 4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[20],          runtime[57],
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 5, 0, 2, 0, 3, 0, 0, 27, 0, 1, 0, 0, 21, 0, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(¯2⊸↓ ≡ 2⊸↓⌾⌽) ↕6") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(¯2⊸↓ ≡ 2⊸↓⌾⌽) ↕6");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],           runtime[27],          runtime[28],
        runtime[31],           runtime[55],          runtime[57],
        CXBQN_NEW(Number, -2), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8,  0, 2, 16, 0, 3, 0, 5, 0, 1,  0,  4,  0, 7,
             27, 27, 0, 0, 0,  1, 0, 4, 0, 6, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1⊸↓⌾⍉ ≡ 1⊸↓˘) ↕3‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1⊸↓⌾⍉ ≡ 1⊸↓˘) ↕3‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18], runtime[27],          runtime[28],
        runtime[32], runtime[46],          runtime[55],
        runtime[57], CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8, 0, 8, 11, 2, 0, 2, 16, 0, 4, 0, 1, 0,  5,  0,  7,  27,
             26, 0, 0, 0, 3,  0, 6, 0, 1,  0, 5, 0, 7, 27, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7(⥊⌾(<˘)≡·<˘⁼⥊⟜(<˘))3‿3⥊↕9") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7(⥊⌾(<˘)≡·<˘⁼⥊⟜(<˘))3‿3⥊↕9");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[12],          runtime[18],         runtime[22],
        runtime[28],          runtime[46],         runtime[49],
        runtime[56],          runtime[57],         CXBQN_NEW(Number, 7),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 9)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 10, 0, 3, 16, 0,  2,  0, 9, 0, 9,  11, 2, 17, 0,  4,  0,
             0, 26, 0, 6, 0,  2,  27, 0, 5, 0, 4,  0,  0, 26, 26, 20, 0,
             1, 0,  4, 0, 0,  26, 0,  7, 0, 2, 27, 21, 0, 8,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\" (⊣≡»⌾≍) ↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\" (⊣≡»⌾≍) ↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],          runtime[20],
                            runtime[24],          runtime[28],
                            runtime[30],          runtime[57],
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 3, 16, 0, 2, 0, 5, 0, 4, 27, 0, 0, 0, 1, 21, 0, 7, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽∘|⊸/4‿¯3) ≡ ↕∘≠⊸-⌾(3⊸⌽)↕7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽∘|⊸/4‿¯3) ≡ ↕∘≠⊸-⌾(3⊸⌽)↕7");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[8],           runtime[14],
        runtime[18],          runtime[28],          runtime[31],
        runtime[33],          runtime[53],          runtime[55],
        runtime[57],          CXBQN_NEW(Number, 4), CXBQN_NEW(Number, -3),
        CXBQN_NEW(Number, 3), CXBQN_NEW(Number, 7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  13, 0, 4, 16, 0, 5, 0,  8,  0,  12, 27, 0,  9,  0,  0,  0,
             8,  0,  2, 0, 7,  0, 4, 27, 27, 27, 16, 0,  3,  0,  10, 0,  11,
             11, 2,  0, 6, 0,  8, 0, 1,  0,  7,  0,  5,  27, 27, 16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bbcd\" ≡ 1⊸+⌾⊑ \"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bbcd\" ≡ 1⊸+⌾⊑ \"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[18],
                            runtime[37],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"bbcd"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 2, 0, 4, 0, 0, 0, 3, 0, 5, 27, 27, 16, 0, 1, 0, 6, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(<∘- ≡ -⌾⊑) 4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(<∘- ≡ -⌾⊑) 4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[1],          runtime[12], runtime[18],
                            runtime[37],         runtime[53], runtime[57],
                            CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 6, 0, 3, 0, 5, 0, 0, 27, 0, 2, 0, 0, 0, 4, 0, 1, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽⌾⊏ ≡ ⌽⊸≍˝) \"abc\"≍\"def\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽⌾⊏ ≡ ⌽⊸≍˝) \"abc\"≍\"def\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[24],
                            runtime[31],
                            runtime[36],
                            runtime[51],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Array, U"abc"),
                            CXBQN_NEW(Array, U"def")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  8,  0, 1, 0, 7, 17, 0, 4, 0, 1,  0,  5,  0, 2,
             27, 26, 0, 0, 0, 3, 0,  6, 0, 2, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1 ≡ \"cd\"‿\"ab\"⊸⊐⌾< \"ab\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1 ≡ \"cd\"‿\"ab\"⊸⊐⌾< \"ab\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],
                            runtime[18],
                            runtime[38],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"cd"),
                            CXBQN_NEW(Array, U"ab")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7,  0, 0,  0,  4,  0, 2, 0, 3, 0,  6, 0,
             7, 11, 2, 27, 27, 16, 0, 1, 0, 5, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿1+⌜0‿4‿2) ≡ ⍋∘⍋⌾⥊ \"apl\"≍\"bqn\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿1+⌜0‿4‿2) ≡ ⍋∘⍋⌾⥊ \"apl\"≍\"bqn\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[18],
                            runtime[22],
                            runtime[24],
                            runtime[34],
                            runtime[48],
                            runtime[53],
                            runtime[57],
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Array, U"apl"),
                            CXBQN_NEW(Array, U"bqn")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 13, 0,  3,  0,  12, 17, 0, 2, 0,  7,  0,  4,  0,  6,
             0, 4,  27, 27, 16, 0,  1,  0, 8, 0,  10, 0,  11, 11, 3,
             0, 5,  0,  0,  26, 0,  8,  0, 9, 11, 2,  17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2 (⌽⌾⥊ ≡ 12|+) ⥊⟜(↕×´)6‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2 (⌽⌾⥊ ≡ 12|+) ⥊⟜(↕×´)6‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],          runtime[2],           runtime[8],
        runtime[18],         runtime[22],          runtime[28],
        runtime[31],         runtime[50],          runtime[56],
        runtime[57],         CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 12),
        CXBQN_NEW(Number, 6)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 12, 0, 10, 11, 2,  0, 7,  0,  1, 26, 0,  5,  20,
             0, 8,  0, 4,  27, 16, 0, 0,  0,  2, 0,  11, 21, 0,
             3, 0,  4, 0,  9,  0,  6, 27, 21, 0, 10, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("↕∘≠⊸+{𝔽≡𝔽¨⌾↑} \"abcde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "↕∘≠⊸+{𝔽≡𝔽¨⌾↑} \"abcde\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],  runtime[14],
                            runtime[18], runtime[26],
                            runtime[28], runtime[47],
                            runtime[53], runtime[55],
                            runtime[57], CXBQN_NEW(Array, U"abcde")};
    std::vector<BlockDef> bds{{0, 1, 0}, {1, 1, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 1, 1, 0, 0, 0,  7, 0, 1,  0,  6, 0, 4,  27, 27, 26, 16, 7,
             0, 3, 0, 8, 0, 5, 32, 0, 1, 26, 27, 0, 2, 34, 0,  1,  21, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {19, 2}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2⊸+{𝔽≡𝔽¨⌾↓} \"abcde\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2⊸+{𝔽≡𝔽¨⌾↓} \"abcde\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[18],
                            runtime[27],          runtime[47],
                            runtime[55],          runtime[57],
                            CXBQN_NEW(Number, 2), CXBQN_NEW(Array, U"abcde")};
    std::vector<BlockDef> bds{{0, 1, 0}, {1, 1, 1}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 1, 1, 0,  0, 0, 4,  0,  6, 27, 26, 16, 7, 0,  2,
             0, 5, 0, 3, 32, 0, 1, 26, 27, 0, 1,  34, 0,  1, 21, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}, {14, 2}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽⍒⌊2÷˜↕7) ≡ ⌽˘⌾(⌊‿2⥊⊢)↕7") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽⍒⌊2÷˜↕7) ≡ ⌽˘⌾(⌊‿2⥊⊢)↕7");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[3],          runtime[6],  runtime[18], runtime[21],
        runtime[22],         runtime[28], runtime[31], runtime[35],
        runtime[45],         runtime[46], runtime[57], CXBQN_NEW(Number, 2),
        CXBQN_NEW(Number, 7)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  12, 0,  5, 16, 0,  3,  0,  4,  0, 1, 0,  11, 11, 2,  21, 0,
             10, 0,  9,  0, 6,  26, 27, 16, 0,  2, 0, 12, 0,  5,  16, 0,  8,
             0,  0,  26, 0, 11, 17, 0,  1,  16, 0, 7, 16, 0,  6,  16, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1‿0‿1‿3 ≡ -⟜(+´÷≠)⌾(3⊸↑)↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1‿0‿1‿3 ≡ -⟜(+´÷≠)⌾(3⊸↑)↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[1],           runtime[3],
        runtime[14],          runtime[18],          runtime[26],
        runtime[28],          runtime[50],          runtime[55],
        runtime[56],          runtime[57],          CXBQN_NEW(Number, -1),
        CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 4)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  15, 0, 6, 16, 0, 5,  0,  8,  0, 14, 27, 0, 10, 0,
             3,  0,  2, 0, 7,  0, 0,  26, 21, 0, 9,  0,  1, 27, 27,
             16, 0,  4, 0, 11, 0, 12, 0,  13, 0, 14, 11, 4, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"adcb\" ≡ ⌽⌾(1⊸↓)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"adcb\" ≡ ⌽⌾(1⊸↓)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[27],
                            runtime[31],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Array, U"adcb"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 7, 0, 1, 0, 3, 0, 5, 27, 0, 4, 0, 2, 27, 16, 0, 0, 0, 6, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5‿6‿3‿0 ≡ (5‿3‿1⌾(0‿0⊸⍉)4‿3⥊0) +´∘×⎉1‿∞ 1+↕3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5‿6‿3‿0 ≡ (5‿3‿1⌾(0‿0⊸⍉)4‿3⥊0) +´∘×⎉1‿∞ 1+↕3");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],           runtime[2],
                            runtime[18],          runtime[22],
                            runtime[28],          runtime[32],
                            runtime[50],          runtime[53],
                            runtime[55],          runtime[57],
                            runtime[60],          CXBQN_NEW(Number, 5),
                            CXBQN_NEW(Number, 6), CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 4), CXBQN_NEW(Number, 1.0 / 0.0)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  13, 0,  4,  16, 0,  0,  0,  15, 17, 0,  15, 0,  17, 11, 2,
             0,  10, 0,  1,  0,  7,  0,  6,  0,  0,  26, 27, 27, 0,  14, 0,
             3,  0,  16, 0,  13, 11, 2,  17, 0,  5,  0,  8,  0,  14, 0,  14,
             11, 2,  27, 0,  9,  0,  11, 0,  13, 0,  15, 11, 3,  27, 16, 17,
             0,  2,  0,  11, 0,  12, 0,  13, 0,  14, 11, 4,  17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"AbcD\" ≡ ('A'-'a')⊸+⌾(1‿0‿0‿1⊸/)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"AbcD\" ≡ ('A'-'a')⊸+⌾(1‿0‿0‿1⊸/)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[1],
                            runtime[18],
                            runtime[33],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Character, U'A'),
                            CXBQN_NEW(Character, U'a'),
                            CXBQN_NEW(Array, U"AbcD"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0, 3, 0, 4, 0, 6, 0, 7,  0,  7,  0,  6, 11, 4, 27, 0,  5, 0,
             0, 0,  4, 0, 9, 0, 1, 0, 8, 17, 27, 27, 16, 0, 2,  0, 10, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"AbcD\" ≡ \"ABCD\"⊣⌾(1‿0‿0‿1⊸/)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"AbcD\" ≡ \"ABCD\"⊣⌾(1‿0‿0‿1⊸/)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[20],
                            runtime[33],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"AbcD"),
                            CXBQN_NEW(Array, U"ABCD"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9, 0, 2, 0, 3,  0, 5, 0,  6, 0, 6, 0, 5,  11, 4,
             27, 0, 4, 0, 1, 27, 0, 8, 17, 0, 0, 0, 7, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1⊸⌽ ≡ 2⊸⌽⌾(2⊸/)) ↕5") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1⊸⌽ ≡ 2⊸⌽⌾(2⊸/)) ↕5");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[18],          runtime[28],          runtime[31],
        runtime[33],          runtime[55],          runtime[57],
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 5)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0, 1,  16, 0, 3, 0, 4, 0, 7, 27, 0, 5,  0,  2,  0,
             4, 0, 7, 27, 27, 0, 0, 0, 2, 0, 4, 0,  6, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0⊸⊏)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0⊸⊏)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[31],
                            runtime[36],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"bdca"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 9, 0, 2, 0, 3, 0, 5,  0,  6,  0, 7, 11, 3, 27, 0,
             4, 0, 1, 0, 3, 0, 5, 27, 27, 16, 0, 0, 0,  8, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((¯1⋆2∧⌜○(⌽0=↕)3)⊸× ≡ -⌾(1‿2⊑⊢))↕2‿3") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "((¯1⋆2∧⌜○(⌽0=↕)3)⊸× ≡ -⌾(1‿2⊑⊢))↕2‿3");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[1],           runtime[2],           runtime[4],
        runtime[10],          runtime[15],          runtime[18],
        runtime[21],          runtime[28],          runtime[31],
        runtime[37],          runtime[48],          runtime[54],
        runtime[55],          runtime[57],          CXBQN_NEW(Number, -1),
        CXBQN_NEW(Number, 2), CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  15, 0,  17, 11, 2,  0,  7,  16, 0,  6,  0,  9,  0,  18, 0,
             15, 11, 2,  21, 0,  13, 0,  0,  27, 0,  5,  0,  1,  0,  12, 0,
             17, 0,  7,  0,  4,  0,  16, 21, 0,  8,  20, 0,  11, 0,  10, 0,
             3,  26, 27, 0,  15, 17, 0,  2,  0,  14, 17, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((0‿3≍1‿2)⊸+ ≡ ⟨1,2‿3⟩⊸+⌾(⟨1‿0,⟨1‿1,0‿1⟩⟩⊸⊑))↕2‿2") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "((0‿3≍1‿2)⊸+ ≡ ⟨1,2‿3⟩⊸+⌾(⟨1‿0,⟨1‿1,0‿1⟩⟩⊸⊑))↕2‿2");
  auto cu = [=] {
    std::vector<O<Value>> c{
        runtime[0],           runtime[18],          runtime[24],
        runtime[28],          runtime[37],          runtime[55],
        runtime[57],          CXBQN_NEW(Number, 0), CXBQN_NEW(Number, 3),
        CXBQN_NEW(Number, 1), CXBQN_NEW(Number, 2)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  10, 0,  10, 11, 2,  0, 3,  16, 0, 4,  0,  5,  0,  9, 0,
             7,  11, 2,  0,  9,  0,  9, 11, 2,  0, 7,  0,  9,  11, 2, 11,
             2,  11, 2,  27, 0,  6,  0, 0,  0,  5, 0,  9,  0,  10, 0, 8,
             11, 2,  11, 2,  27, 27, 0, 1,  0,  0, 0,  5,  0,  9,  0, 10,
             11, 2,  0,  2,  0,  7,  0, 8,  11, 2, 17, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(1+↕3) ≡ 1⊸↓⌾(@⊢·⊑<)↕4") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(1+↕3) ≡ 1⊸↓⌾(@⊢·⊑<)↕4");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],
                            runtime[12],
                            runtime[18],
                            runtime[21],
                            runtime[27],
                            runtime[28],
                            runtime[37],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 4),
                            CXBQN_NEW(Character, U'\0')};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  11, 0, 5, 16, 0, 1, 0, 6, 20, 0,  3,  0, 12,
             21, 0,  8, 0, 4,  0, 7, 0, 9, 27, 27, 16, 0, 2,
             0,  10, 0, 5, 16, 0, 0, 0, 9, 17, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"210abc\" ≡ ⌽⌾((2÷˜≠)⊸↑)\"012abc\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"210abc\" ≡ ⌽⌾((2÷˜≠)⊸↑)\"012abc\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[3],
                            runtime[14],
                            runtime[18],
                            runtime[26],
                            runtime[31],
                            runtime[45],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Array, U"210abc"),
                            CXBQN_NEW(Array, U"012abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  10, 0, 3, 0, 6, 0,  1,  0, 5, 0, 0, 26, 0, 8,
             21, 27, 0, 7, 0, 4, 27, 16, 0, 2, 0, 9, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bac\"‿'d' ≡ ⌽⌾(2↑⊑)\"abc\"‿'d'") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bac\"‿'d' ≡ ⌽⌾(2↑⊑)\"abc\"‿'d'");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[26],
                            runtime[31],
                            runtime[37],
                            runtime[57],
                            CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Character, U'd'),
                            CXBQN_NEW(Array, U"bac"),
                            CXBQN_NEW(Array, U"abc")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 8, 0,  6,  11, 2, 0, 3, 0, 1, 0,  5, 21, 0, 4,
             0, 2, 27, 16, 0,  0, 0, 7, 0, 6, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⌽¨⌾(<2‿3⊸⊏) ≡ ⌽⌾(2‿3⊸⊏)) \"abcdef\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⌽¨⌾(<2‿3⊸⊏) ≡ ⌽⌾(2‿3⊸⊏)) \"abcdef\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[12],          runtime[18],
                            runtime[31],          runtime[36],
                            runtime[47],          runtime[55],
                            runtime[57],          CXBQN_NEW(Number, 2),
                            CXBQN_NEW(Number, 3), CXBQN_NEW(Array, U"abcdef")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  9, 0,  3,  0, 5, 0, 7, 0, 8, 11, 2,  27, 0,  6,
             0,  2, 27, 0,  1, 0, 3, 0, 5, 0, 7,  0,  8,  11, 2,
             27, 0, 0,  20, 0, 6, 0, 4, 0, 2, 26, 27, 21, 16, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0˙⊏⊢)\"abcd\"") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"bdca\" ≡ 1⊸⌽⌾(1‿3‿0˙⊏⊢)\"abcd\"");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[18],
                            runtime[21],
                            runtime[31],
                            runtime[36],
                            runtime[44],
                            runtime[55],
                            runtime[57],
                            CXBQN_NEW(Number, 1),
                            CXBQN_NEW(Number, 3),
                            CXBQN_NEW(Number, 0),
                            CXBQN_NEW(Array, U"bdca"),
                            CXBQN_NEW(Array, U"abcd")};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0, 11, 0, 1, 0, 3, 0, 4, 0,  7,  0,  8, 0, 9, 11, 3,  26, 21,
             0, 6,  0, 2, 0, 5, 0, 7, 27, 27, 16, 0, 0, 0, 10, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∘‿+ ≡ ⊢⌾∘‿+ 1") {
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∘‿+ ≡ ⊢⌾∘‿+ 1");
  auto cu = [=] {
    std::vector<O<Value>> c{runtime[0],  runtime[18], runtime[21],
                            runtime[53], runtime[57], CXBQN_NEW(Number, 1)};
    std::vector<BlockDef> bds{{0, 1, 0}};
    auto cu = make_observer(new CompUnit{
        ._bc{0,  5,  0, 3, 0, 0, 11, 2, 0,  4, 0,  2,
             27, 16, 0, 1, 0, 3, 0,  0, 11, 2, 17, 7},
        ._consts{CXBQN_NEW(Array, c.size())},
        ._blocks{},
        ._bodies{{0, 0}},
    });
    for (auto &bd : bds)
      cu->_blocks.emplace_back(bd);
    cu->_consts->values = std::move(c);
    cu->_consts->shape.push_back(c.size());
    GC::register_ptr(cu.get());
    return cu;
  }();
  auto ret = vm::run(cu);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dyncast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
