/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-22T17:39:04
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("‚àß¬¥{ùï©‚â°ùï©‚Åºùï©}¬®‚ü®¬Ø‚àû,3,@,'‚Åº',‚Üï4‚ü©") {
  spdlog::critical("test='{}', ans='{}'", "‚àß¬¥{ùï©‚â°ùï©‚Åºùï©}¬®‚ü®¬Ø‚àû,3,@,'‚Åº',‚Üï4‚ü©", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 7,  0,  9,  0,  10, 0, 8, 0,  2,  16, 11, 5,
       0, 3, 1, 1,  26, 16, 0,  5,  0, 0, 26, 16, 7,  32, 0,
       1, 0, 4, 32, 0,  1,  26, 16, 0, 1, 34, 0,  1,  17, 7},
      {runtime[10], runtime[18], runtime[28], runtime[47], runtime[49],
       runtime[50], std::make_shared<Number>(-1.0 / 0.0), 3, 4,
       std::make_shared<Character>(U'\0'), std::make_shared<Character>(U'‚Åº')},
      {{0, 1, 0}, {0, 0, 1}},
      {{0, 0}, {28, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3‚Åº4") {
  spdlog::critical("test='{}', ans='{}'", "3‚Åº4", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 2, 0, 0, 0, 1, 26, 16, 7}, {runtime[49], 3, 4}, {{0, 1, 0}}, {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("2‚Äø3‚Åº2‚Äø3.1") {
  spdlog::critical("test='{}', ans='{}'", "2‚Äø3‚Åº2‚Äø3.1", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 1, 0, 3, 11, 2, 0, 0, 0, 1, 0, 2, 11, 2, 26, 16, 7},
                  {runtime[49], 2, 3, 3.1},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("‚àß¬¥ {(ùïé‚â°ùïé‚Åº)ùï©}‚üú¬Ø0.3‚Äø0‚Äø8¬® +‚Äø-‚Äø√∑‚Äø¬¨‚Äø‚ä¢‚Äø‚ä£‚Äø‚åΩ") {
  spdlog::critical("test='{}', ans='{}'",
                   "‚àß¬¥ {(ùïé‚â°ùïé‚Åº)ùï©}‚üú¬Ø0.3‚Äø0‚Äø8¬® +‚Äø-‚Äø√∑‚Äø¬¨‚Äø‚ä¢‚Äø‚ä£‚Äø‚åΩ", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  0, 0,  1, 0,  2,  0,  3,  0,  7, 0,  6,  0,  8,  11, 7,  0,  9,  0,
       13, 0, 14, 0, 15, 11, 3,  0,  12, 1, 1,  27, 26, 16, 0,  11, 0,  4,  26,
       16, 7, 34, 0, 1,  0,  10, 32, 0,  2, 26, 0,  5,  34, 0,  2,  21, 16, 7},
      {runtime[0], runtime[1], runtime[3], runtime[9], runtime[10], runtime[18],
       runtime[20], runtime[21], runtime[31], runtime[47], runtime[49],
       runtime[50], runtime[56], -0.3, 0, 8},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {40, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("-‚Åº 'a'") {
  spdlog::critical("test='{}', ans='{}'", "-‚Åº 'a'", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[1], runtime[49], std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("√ó‚Åº 5") {
  spdlog::critical("test='{}', ans='{}'", "√ó‚Åº 5", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 1, 0, 0, 26, 16, 7},
                  {runtime[2], runtime[49], 5},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("(‚àö‚àö‚Åº)‚ä∏‚â° 0‚Äø0.4‚ÄøœÄ‚Äø1e9‚Äø‚àû") {
  spdlog::critical("test='{}', ans='{}'", "(‚àö‚àö‚Åº)‚ä∏‚â° 0‚Äø0.4‚ÄøœÄ‚Äø1e9‚Äø‚àû", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 5, 0, 6, 0,  7, 0, 8,  11, 5,  0, 1,
       0, 3, 0, 2, 0, 0, 26, 0, 0, 20, 27, 16, 7},
      {runtime[5], runtime[18], runtime[49], runtime[55], 0, 0.4,
       3.141592653589793, 1000000000, std::make_shared<Number>(1.0 / 0.0)},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ãÜ‚Åº‚ãÜ)‚ä∏‚â° ‚Üï4") {
  spdlog::critical("test='{}', ans='{}'", "(‚ãÜ‚Åº‚ãÜ)‚ä∏‚â° ‚Üï4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 2, 16, 0, 1, 0, 4, 0, 0, 0, 3, 0, 0, 26, 20, 27, 16, 7},
      {runtime[4], runtime[18], runtime[28], runtime[49], runtime[55], 4},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1e¬Ø14>|1-‚ãÜ+¬¥‚ãÜ‚Åº1(‚ä¢√∑¬´)1+‚Üï11") {
  spdlog::critical("test='{}', ans='{}'", "1e¬Ø14>|1-‚ãÜ+¬¥‚ãÜ‚Åº1(‚ä¢√∑¬´)1+‚Üï11", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  13, 0,  7, 16, 0,  0, 0,  12, 17, 0,  8, 0,  2,  0,  6, 21,
       0,  12, 17, 0, 9,  0,  3, 26, 16, 0,  10, 0, 0,  26, 16, 0, 3,
       16, 0,  1,  0, 12, 17, 0, 4,  16, 0,  5,  0, 11, 17, 7},
      {runtime[0], runtime[1], runtime[3], runtime[4], runtime[8], runtime[13],
       runtime[21], runtime[28], runtime[29], runtime[49], runtime[50], 1e-14,
       1, 11},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚àß¬¥ {ùï©‚â°6ùïé6ùïé‚Åºùï©}‚üú1‚Äø2‚Äø3¬® +‚Äø-‚Äø√ó‚Äø√∑‚Äø‚àö‚Äø‚àß‚Äø¬¨‚Äø‚ä¢") {
  spdlog::critical("test='{}', ans='{}'",
                   "‚àß¬¥ {ùï©‚â°6ùïé6ùïé‚Åºùï©}‚üú1‚Äø2‚Äø3¬® +‚Äø-‚Äø√ó‚Äø√∑‚Äø‚àö‚Äø‚àß‚Äø¬¨‚Äø‚ä¢", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  0,  0,  1,  0,  2,  0,  3,  0,  4,  0, 6,  0,  5,  0,  8,  11,
       8,  0,  9,  0,  14, 0,  15, 0,  16, 11, 3, 0,  12, 1,  1,  27, 26,
       16, 0,  11, 0,  6,  26, 16, 7,  32, 0,  1, 0,  10, 32, 0,  2,  26,
       0,  13, 17, 34, 0,  2,  0,  13, 17, 0,  7, 34, 0,  1,  17, 7},
      {runtime[0], runtime[1], runtime[2], runtime[3], runtime[5], runtime[9],
       runtime[10], runtime[18], runtime[21], runtime[47], runtime[49],
       runtime[50], runtime[56], 6, 1, 2, 3},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {42, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'a' ‚â° 3+‚Åº'd'") {
  spdlog::critical("test='{}', ans='{}'", "'a' ‚â° 3+‚Åº'd'", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 5, 0, 2, 0, 0, 26, 0, 3, 17, 0, 1, 0, 4, 17, 7},
      {runtime[0], runtime[18], runtime[49], 3,
       std::make_shared<Character>(U'a'), std::make_shared<Character>(U'd')},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'d'-‚Åº'a'") {
  spdlog::critical("test='{}', ans='{}'", "'d'-‚Åº'a'", "3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 0, 0, 26, 0, 2, 17, 7},
                  {runtime[1], runtime[49], std::make_shared<Character>(U'd'),
                   std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(3 == doctest::Approx(n->v));
}

TEST_CASE("0.3‚Äø1.01‚ÄøœÄ(‚ãÜ‚Åº‚åú‚â°√∑Àú‚åú‚óã(‚ãÜ‚Åº))0‚Äø2‚Äø5.6‚Äø‚àû") {
  spdlog::critical("test='{}', ans='{}'", "0.3‚Äø1.01‚ÄøœÄ(‚ãÜ‚Åº‚åú‚â°√∑Àú‚åú‚óã(‚ãÜ‚Åº))0‚Äø2‚Äø5.6‚Äø‚àû",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 10, 0,  11, 0,  12, 0, 13, 11, 4,  0, 5,  0, 1,  26, 0,
       6, 0,  4,  0,  3,  0,  0, 26, 26, 27, 0, 2,  0, 4,  0,  5,
       0, 1,  26, 26, 21, 0,  7, 0,  8,  0,  9, 11, 3, 17, 7},
      {runtime[3], runtime[4], runtime[18], runtime[45], runtime[48],
       runtime[49], runtime[54], 0.3, 1.01, 3.141592653589793, 0, 2, 5.6,
       std::make_shared<Number>(1.0 / 0.0)},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚ä¢‚â°‚ä£‚ÅºÀú)\"abcd\"") {
  spdlog::critical("test='{}', ans='{}'", "(‚ä¢‚â°‚ä£‚ÅºÀú)\"abcd\"", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 3, 0, 4, 0, 1, 26, 26, 0, 0, 0, 2, 21, 16, 7},
                  {runtime[18], runtime[20], runtime[21], runtime[45],
                   runtime[49], std::make_shared<Array>(U"abcd")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"‚ä£‚Åº\"ac\"") {
  spdlog::critical("test='{}', ans='{}'", "\"ab\"‚ä£‚Åº\"ac\"", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 0, 0, 26, 0, 2, 17, 7},
                  {runtime[20], runtime[49], std::make_shared<Array>(U"ab"),
                   std::make_shared<Array>(U"ac")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("(<‚Åº<)¬®‚ä∏‚â°‚ü®0,‚ü®‚ü©,\"abc\"‚ü©") {
  spdlog::critical("test='{}', ans='{}'", "(<‚Åº<)¬®‚ä∏‚â°‚ü®0,‚ü®‚ü©,\"abc\"‚ü©", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 11, 0, 0, 6, 11, 3,  0,  1,  0,  4,  0,
                   2, 0, 0,  0, 3, 0, 0,  26, 20, 26, 27, 16, 7},
                  {runtime[12], runtime[18], runtime[47], runtime[49],
                   runtime[55], 0, std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(/‚Åº/)‚ä∏‚â°1‚Äø0‚Äø2‚Äø4") {
  spdlog::critical("test='{}', ans='{}'", "(/‚Åº/)‚ä∏‚â°1‚Äø0‚Äø2‚Äø4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 5, 0, 6, 0, 7,  11, 4,  0,  0, 0,
       3, 0, 1, 0, 2, 0, 1, 26, 20, 27, 16, 7},
      {runtime[18], runtime[33], runtime[49], runtime[55], 1, 0, 2, 4},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®‚ü©‚â°/‚Åº‚ü®‚ü©") {
  spdlog::critical("test='{}', ans='{}'", "‚ü®‚ü©‚â°/‚Åº‚ü®‚ü©", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 2, 0, 1, 26, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[33], runtime[49]},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚ä∏‚åΩ‚â°2‚åΩ‚Åº‚ä¢)‚Üï5") {
  spdlog::critical("test='{}', ans='{}'", "(3‚ä∏‚åΩ‚â°2‚åΩ‚Åº‚ä¢)‚Üï5", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  8, 0, 2, 16, 0, 1, 0, 4, 0,  3,  26, 0, 7,
                   21, 0, 0, 0, 3,  0, 5, 0, 6, 27, 21, 16, 7},
                  {runtime[18], runtime[21], runtime[28], runtime[31],
                   runtime[49], runtime[55], 3, 2, 5},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("((‚â¢‚çâ‚Åº)‚â°¬Ø1‚åΩ‚â¢)‚Üï‚Üï4") {
  spdlog::critical("test='{}', ans='{}'", "((‚â¢‚çâ‚Åº)‚â°¬Ø1‚åΩ‚â¢)‚Üï‚Üï4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  7, 0, 2, 16, 0, 2, 16, 0, 1, 0,  3,  0,  6,
                   21, 0, 0, 0, 5,  0, 4, 26, 0, 1, 20, 21, 16, 7},
                  {runtime[18], runtime[19], runtime[28], runtime[31],
                   runtime[32], runtime[49], -1, 4},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚â°¬¥‚çâ‚çü¬Ø1‚Äø2‚•ä‚üú(‚Üï√ó¬¥)2‚Äø3‚Äø3") {
  spdlog::critical("test='{}', ans='{}'", "‚â°¬¥‚çâ‚çü¬Ø1‚Äø2‚•ä‚üú(‚Üï√ó¬¥)2‚Äø3‚Äø3", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  9, 0, 10, 0, 10, 11, 3, 0, 5, 0, 0,  26, 0, 3, 20, 0, 6,  0,  2, 27,
       16, 0, 8, 0,  9, 11, 2,  0, 7, 0, 4, 27, 16, 0, 5, 0,  1, 26, 16, 7},
      {runtime[2], runtime[18], runtime[22], runtime[28], runtime[32],
       runtime[50], runtime[56], runtime[62], -1, 2, 3},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2‚Äø1(‚ä¢‚â°‚ä£‚çâ‚çâ‚Åº)‚•ä‚üú(‚Üï√ó¬¥)2‚Äø3‚Äø1‚Äø4") {
  spdlog::critical("test='{}', ans='{}'", "2‚Äø1(‚ä¢‚â°‚ä£‚çâ‚çâ‚Åº)‚•ä‚üú(‚Üï√ó¬¥)2‚Äø3‚Äø1‚Äø4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 10, 0, 12, 0, 11, 0,  13, 11, 4, 0,  8,  0,  0,  26, 0,
                   5, 20, 0, 9,  0, 4,  27, 16, 0,  7, 0,  6,  26, 0,  6,  0,
                   2, 21, 0, 1,  0, 3,  21, 0,  10, 0, 11, 11, 2,  17, 7},
                  {runtime[2], runtime[18], runtime[20], runtime[21],
                   runtime[22], runtime[28], runtime[32], runtime[49],
                   runtime[50], runtime[56], 2, 1, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚àß¬¥ {6(ùïéÀú‚Åº‚â°ùïé‚Åº)ùï©}‚üú¬Ø0.8‚Äø0‚Äø3¬® +‚Äø√ó‚Äø‚àß") {
  spdlog::critical("test='{}', ans='{}'", "‚àß¬¥ {6(ùïéÀú‚Åº‚â°ùïé‚Åº)ùï©}‚üú¬Ø0.8‚Äø0‚Äø3¬® +‚Äø√ó‚Äø‚àß",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 0, 0,  1,  0,  2,  11, 3, 0, 5,  0,  10, 0,  11, 0,  12, 11, 3,  0,
       8, 1, 1,  27, 26, 16, 0,  7, 0, 2,  26, 16, 7,  34, 0,  1,  0,  6,  32,
       0, 2, 26, 0,  3,  0,  6,  0, 4, 34, 0,  2,  26, 26, 21, 0,  9,  17, 7},
      {runtime[0], runtime[2], runtime[10], runtime[18], runtime[45],
       runtime[47], runtime[49], runtime[50], runtime[56], 6, -0.8, 0, 3},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {32, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("+Àú‚Åº7") {
  spdlog::critical("test='{}', ans='{}'", "+Àú‚Åº7", "3.5");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 0, 0, 26, 26, 16, 7},
                  {runtime[0], runtime[45], runtime[49], 7},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(3.5 == doctest::Approx(n->v));
}

TEST_CASE("‚à®Àú‚Åº0.75") {
  spdlog::critical("test='{}', ans='{}'", "‚à®Àú‚Åº0.75", "0.5");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 0, 0, 26, 26, 16, 7},
                  {runtime[11], runtime[45], runtime[49], 0.75},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(0.5 == doctest::Approx(n->v));
}

TEST_CASE("+¬¥‚àä‚ü®‚àö,√óÀú‚Åº,‚àßÀú‚Åº‚ü©{ùïéùï©}‚åú0‚Äø2‚Äø‚àû") {
  spdlog::critical("test='{}', ans='{}'", "+¬¥‚àä‚ü®‚àö,√óÀú‚Åº,‚àßÀú‚Åº‚ü©{ùïéùï©}‚åú0‚Äø2‚Äø‚àû", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  9, 0, 10, 0,  11, 11, 3, 0,  6, 1, 1,  26, 0,  2,  0,  7, 0,
       5,  0, 1, 26, 26, 0,  7,  0, 5,  0, 3, 26, 26, 11, 3,  17, 0, 4,
       16, 0, 8, 0,  0,  26, 16, 7, 34, 0, 1, 34, 0,  2,  16, 7},
      {runtime[0], runtime[2], runtime[5], runtime[10], runtime[40],
       runtime[45], runtime[48], runtime[49], runtime[50], 0, 2,
       std::make_shared<Number>(1.0 / 0.0)},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {44, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚àß¬¥ -‚Äø√∑‚Äø‚ãÜ {3(ùïéÀú‚Åº‚â°ùïè)2‚ÄøœÄ‚àæ‚ãÜ2}¬® +‚Äø√ó‚Äø‚àö") {
  spdlog::critical("test='{}', ans='{}'", "‚àß¬¥ -‚Äø√∑‚Äø‚ãÜ {3(ùïéÀú‚Åº‚â°ùïè)2‚ÄøœÄ‚àæ‚ãÜ2}¬® +‚Äø√ó‚Äø‚àö",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 0,  0, 2,  0,  5,  11, 3,  0,  10, 1,  1,  26, 0, 1,  0,
       3, 0,  4, 11, 3,  17, 0,  12, 0,  6,  26, 16, 7,  0, 14, 0,
       4, 16, 0, 8,  0,  14, 0,  15, 11, 2,  17, 34, 0,  1, 0,  7,
       0, 11, 0, 9,  34, 0,  2,  26, 26, 21, 0,  13, 17, 7},
      {runtime[0], runtime[1], runtime[2], runtime[3], runtime[4], runtime[5],
       runtime[10], runtime[18], runtime[23], runtime[45], runtime[47],
       runtime[49], runtime[50], 3, 2, 3.141592653589793},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {29, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("16‚àöÀú‚Åº2") {
  spdlog::critical("test='{}', ans='{}'", "16‚àöÀú‚Åº2", "4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 2, 0, 1, 0, 0, 26, 26, 0, 3, 17, 7},
                  {runtime[5], runtime[45], runtime[49], 16, 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(4 == doctest::Approx(n->v));
}

TEST_CASE("4‚Äø2‚Äø0(¬¨Àú‚Åº‚â°¬Ø1++)1‚Äø2‚Äø9") {
  spdlog::critical("test='{}', ans='{}'", "4‚Äø2‚Äø0(¬¨Àú‚Åº‚â°¬Ø1++)1‚Äø2‚Äø9", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 6, 0, 10, 11, 3,  0, 0, 0, 0, 0, 8, 21, 0, 2,  0,
                   4, 0, 3, 0, 1, 26, 26, 21, 0, 5, 0, 6, 0, 7, 11, 3, 17, 7},
                  {runtime[0], runtime[9], runtime[18], runtime[45],
                   runtime[49], 4, 2, 0, -1, 1, 9},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("-¬®‚Åº 2") {
  spdlog::critical("test='{}', ans='{}'", "-¬®‚Åº 2", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 0, 0, 26, 26, 16, 7},
                  {runtime[1], runtime[47], runtime[49], 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("-‚åú‚Åº 2") {
  spdlog::critical("test='{}', ans='{}'", "-‚åú‚Åº 2", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 0, 0, 26, 26, 16, 7},
                  {runtime[1], runtime[48], runtime[49], 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("-Àò‚Åº 2") {
  spdlog::critical("test='{}', ans='{}'", "-Àò‚Åº 2", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 0, 0, 26, 26, 16, 7},
                  {runtime[1], runtime[46], runtime[49], 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("-Àò‚Åº <2") {
  spdlog::critical("test='{}', ans='{}'", "-Àò‚Åº <2", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 16, 0, 3, 0, 2, 0, 0, 26, 26, 16, 7},
                  {runtime[1], runtime[12], runtime[46], runtime[49], 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("-`‚Åº 2") {
  spdlog::critical("test='{}', ans='{}'", "-`‚Åº 2", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 1, 0, 2, 0, 0, 26, 26, 16, 7},
                  {runtime[1], runtime[49], runtime[52], 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("0-¬¥‚Åº 2") {
  spdlog::critical("test='{}', ans='{}'", "0-¬¥‚Åº 2", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 1, 0, 2, 0, 0, 26, 26, 0, 3, 17, 7},
                  {runtime[1], runtime[49], runtime[50], 0, 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("(‚àæÀú ‚â° ¬∑(<‚åú‚Åº‚àæ<¬®‚Åº)<¬®) \"abcd\"") {
  spdlog::critical("test='{}', ans='{}'", "(‚àæÀú ‚â° ¬∑(<‚åú‚Åº‚àæ<¬®‚Åº)<¬®) \"abcd\"", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0, 4, 0,  0,  26, 0,  6, 0, 4, 0, 0, 26, 26, 0,  2,  0, 6,
       0, 5, 0, 0, 26, 26, 21, 20, 0, 1, 0, 3, 0, 2,  26, 21, 16, 7},
      {runtime[12], runtime[18], runtime[23], runtime[45], runtime[47],
       runtime[48], runtime[49], std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"‚Äø\"abc\"‚â°1‚åΩ‚Åº¬®\"ba\"‚Äø\"bca\"") {
  spdlog::critical("test='{}', ans='{}'", "\"ab\"‚Äø\"abc\"‚â°1‚åΩ‚Åº¬®\"ba\"‚Äø\"bca\"",
                   "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0,  8, 11, 2, 0, 2, 0, 3,  0, 1,  26, 26,
       0, 4, 17, 0, 0,  0, 5, 0, 6, 11, 2, 17, 7},
      {runtime[18], runtime[31], runtime[47], runtime[49], 1,
       std::make_shared<Array>(U"ab"), std::make_shared<Array>(U"abc"),
       std::make_shared<Array>(U"ba"), std::make_shared<Array>(U"bca")},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2-=‚åúÀú‚Üï2)‚â°/Àò‚Åº0‚Äø1‚Äø1‚âç0‚Äø0‚Äø1") {
  spdlog::critical("test='{}', ans='{}'", "(2-=‚åúÀú‚Üï2)‚â°/Àò‚Åº0‚Äø1‚Äø1‚âç0‚Äø0‚Äø1", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  11, 0, 11, 0, 12, 11, 3,  0,  3,  0,  11, 0, 12, 0,  12, 11,
       3,  17, 0, 9,  0, 7,  0,  5,  26, 26, 16, 0,  2, 0,  10, 0,  4,
       16, 0,  6, 0,  8, 0,  1,  26, 26, 16, 0,  0,  0, 10, 17, 17, 7},
      {runtime[1], runtime[15], runtime[18], runtime[24], runtime[28],
       runtime[33], runtime[45], runtime[46], runtime[48], runtime[49], 2, 0,
       1},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2(‚åΩÀò‚Åº‚â°¬∑‚çâ‚åΩ‚Åº‚üú‚çâ)‚âç\"abcde\"") {
  spdlog::critical("test='{}', ans='{}'", "2(‚åΩÀò‚Åº‚â°¬∑‚çâ‚åΩ‚Åº‚üú‚çâ)‚âç\"abcde\"", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  8, 0, 1, 16, 0, 3, 0, 6, 0,  5,  0,  2, 26, 27, 0, 3,
       20, 0, 0, 0, 5,  0, 4, 0, 2, 26, 26, 21, 0, 7,  17, 7},
      {runtime[18], runtime[24], runtime[31], runtime[32], runtime[46],
       runtime[49], runtime[56], 2, std::make_shared<Array>(U"abcde")},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(4‚•ä1) ‚â° +`‚Åº 1+‚Üï4") {
  spdlog::critical("test='{}', ans='{}'", "(4‚•ä1) ‚â° +`‚Åº 1+‚Üï4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 6,  0,  3,  16, 0, 0, 0, 7, 17, 0, 4, 0,  5,  0,
                   0, 26, 26, 16, 0,  1, 0, 7, 0, 2,  0, 6, 17, 17, 7},
                  {runtime[0], runtime[18], runtime[22], runtime[28],
                   runtime[49], runtime[52], 4, 1},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚ü®‚ü© ‚â° !`‚Åº‚ü®‚ü©") {
  spdlog::critical("test='{}', ans='{}'", "‚ü®‚ü© ‚â° !`‚Åº‚ü®‚ü©", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{11, 0, 0, 2, 0, 3, 0, 1, 26, 26, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[43], runtime[49], runtime[52]},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(-‚üú¬ª ‚â° +`‚Åº) 2|‚åä√ó‚åúÀúœÄ+‚Üï5") {
  spdlog::critical("test='{}', ans='{}'", "(-‚üú¬ª ‚â° +`‚Åº) 2|‚åä√ó‚åúÀúœÄ+‚Üï5", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  15, 0,  6, 16, 0,  0, 0, 14, 17, 0,  8,  0,  9,  0,  2,
       26, 26, 16, 0, 3,  16, 0, 4, 0,  13, 17, 0,  10, 0,  11, 0,
       0,  26, 26, 0, 5,  0,  7, 0, 12, 0,  1,  27, 21, 16, 7},
      {runtime[0], runtime[1], runtime[2], runtime[6], runtime[8], runtime[18],
       runtime[28], runtime[30], runtime[45], runtime[48], runtime[49],
       runtime[52], runtime[56], 2, 3.141592653589793, 5},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(5‚•ä2)‚â°2√∑`‚Åº2‚ãÜ-‚Üï5") {
  spdlog::critical("test='{}', ans='{}'", "(5‚•ä2)‚â°2√∑`‚Åº2‚ãÜ-‚Üï5", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 8,  0,  5, 16, 0,  0, 16, 0, 2, 0, 9, 17, 0, 6,  0,  7, 0,
                   1, 26, 26, 0, 9,  17, 0, 3,  0, 9, 0, 4, 0,  8, 17, 17, 7},
                  {runtime[1], runtime[3], runtime[4], runtime[18], runtime[22],
                   runtime[28], runtime[49], runtime[52], 5, 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‚Äø1‚Äø1√ó‚åú‚•äÀú4)‚â°(‚Üï4)+`‚Åº3‚Äø4‚•ä‚Üï12") {
  spdlog::critical("test='{}', ans='{}'", "(0‚Äø1‚Äø1√ó‚åú‚•äÀú4)‚â°(‚Üï4)+`‚Åº3‚Äø4‚•ä‚Üï12", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  13, 0,  4,  16, 0,  3,  0, 12, 0,  11, 11, 2,  17, 0, 7,  0,  8,
       0,  0,  26, 26, 0,  11, 0,  4, 16, 17, 0,  2,  0,  11, 0, 5,  0,  3,
       26, 16, 0,  6,  0,  1,  26, 0, 9,  0,  10, 0,  10, 11, 3, 17, 17, 7},
      {runtime[0], runtime[2], runtime[18], runtime[22], runtime[28],
       runtime[45], runtime[48], runtime[49], runtime[52], 0, 1, 4, 3, 12},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚Üï3)+`‚Åº3‚Äø4‚•ä‚Üï12") {
  spdlog::critical("test='{}', ans='{}'", "(‚Üï3)+`‚Åº3‚Äø4‚•ä‚Üï12", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 7, 0, 2, 16, 0,  1,  0, 5, 0, 6, 11, 2,  17, 0,
                   3, 0, 4, 0, 0,  26, 26, 0, 5, 0, 2, 16, 17, 7},
                  {runtime[0], runtime[22], runtime[28], runtime[49],
                   runtime[52], 3, 4, 12},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("(√∑¬¨)‚Åº 4") {
  spdlog::critical("test='{}', ans='{}'", "(√∑¬¨)‚Åº 4", "0.75");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 3, 0, 2, 0, 1, 0, 0, 20, 26, 16, 7},
                  {runtime[3], runtime[9], runtime[49], 4},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(0.75 == doctest::Approx(n->v));
}

TEST_CASE("‚ä¢‚àò‚àö‚Åº 2") {
  spdlog::critical("test='{}', ans='{}'", "‚ä¢‚àò‚àö‚Åº 2", "4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 4, 0, 2, 0, 0, 0, 3, 0, 1, 27, 26, 16, 7},
                  {runtime[5], runtime[21], runtime[49], runtime[53], 2},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(4 == doctest::Approx(n->v));
}

TEST_CASE("(‚åΩ/1‚Äø3)‚â°(¬∑+`‚åΩ)‚Åº‚Üï4") {
  spdlog::critical("test='{}', ans='{}'", "(‚åΩ/1‚Äø3)‚â°(¬∑+`‚åΩ)‚Åº‚Üï4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 9, 0, 2, 16, 0, 5,  0, 3, 0, 6,  0, 0, 26, 20, 26, 16,
                   0, 1, 0, 7, 0,  8, 11, 2, 0, 4, 16, 0, 3, 16, 17, 7},
                  {runtime[0], runtime[18], runtime[28], runtime[31],
                   runtime[33], runtime[49], runtime[52], 1, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(‚åΩ‚ä∏/1‚Äø3)‚â°(‚åΩ¬∑-`‚åΩ)‚Åº‚Üï4") {
  spdlog::critical("test='{}', ans='{}'", "(‚åΩ‚ä∏/1‚Äø3)‚â°(‚åΩ¬∑-`‚åΩ)‚Åº‚Üï4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  10, 0, 2, 16, 0, 5, 0,  3, 0, 6, 0, 0, 26, 20, 0,  3,  20, 26,
       16, 0,  1, 0, 8,  0, 9, 11, 2, 0, 4, 0, 7, 0,  3,  27, 16, 17, 7},
      {runtime[1], runtime[18], runtime[28], runtime[31], runtime[33],
       runtime[49], runtime[52], runtime[55], 1, 3, 4},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(¬Ø1‚Äø0+‚åú\"BQN\")‚â°(1‚åΩ‚çâ)‚Åº3‚Äø2‚•ä\"PQMNAB\"") {
  spdlog::critical("test='{}', ans='{}'",
                   "(¬Ø1‚Äø0+‚åú\"BQN\")‚â°(1‚åΩ‚çâ)‚Åº3‚Äø2‚•ä\"PQMNAB\"", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0,  13, 0, 2, 0, 10, 0, 11, 11, 2, 17, 0, 6, 0, 4, 0,  3, 0,  9,  21,
       26, 16, 0, 1, 0, 12, 0, 5,  0,  0, 26, 0, 7, 0, 8, 11, 2, 17, 17, 7},
      {runtime[0], runtime[18], runtime[22], runtime[31], runtime[32],
       runtime[48], runtime[49], -1, 0, 1, 3, 2,
       std::make_shared<Array>(U"BQN"), std::make_shared<Array>(U"PQMNAB")},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(3√ó¬∑‚àö2+¬¨)‚Åº6") {
  spdlog::critical("test='{}', ans='{}'", "(3√ó¬∑‚àö2+¬¨)‚Åº6", "-1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0, 4, 0, 3, 0, 0, 0, 6, 21, 0, 2, 20, 0, 1, 0, 5, 21, 26, 16, 7},
      {runtime[0], runtime[2], runtime[5], runtime[9], runtime[49], 3, 2, 6},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(-1 == doctest::Approx(n->v));
}

TEST_CASE("(3‚ä∏‚àö+‚üú7)‚Åº2") {
  spdlog::critical("test='{}', ans='{}'", "(3‚ä∏‚àö+‚üú7)‚Åº2", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0, 2, 0, 6, 0, 4, 0, 0, 27, 0, 1, 0, 3, 0, 5, 27, 20, 26, 16, 7},
      {runtime[0], runtime[5], runtime[49], runtime[55], runtime[56], 3, 7, 2},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5√ó‚üú¬¨‚Åº10") {
  spdlog::critical("test='{}', ans='{}'", "5√ó‚üú¬¨‚Åº10", "-1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 2, 0, 1, 0, 3, 0, 0, 27, 26, 0, 4, 17, 7},
                  {runtime[2], runtime[9], runtime[49], runtime[56], 5, 10},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(-1 == doctest::Approx(n->v));
}

TEST_CASE("(‚àö-2{ùîΩ})‚Åº1") {
  spdlog::critical("test='{}', ans='{}'", "(‚àö-2{ùîΩ})‚Åº1", "9");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 2, 1, 1, 0, 3, 26, 0, 0, 0, 1, 21, 26, 16, 7, 34, 0, 1, 7},
      {runtime[1], runtime[5], runtime[49], 2, 1},
      {{0, 1, 0}, {1, 1, 1}},
      {{0, 0}, {17, 2}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(9 == doctest::Approx(n->v));
}

TEST_CASE("(‚àö-2Àô)‚Åº1") {
  spdlog::critical("test='{}', ans='{}'", "(‚àö-2Àô)‚Åº1", "9");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 3, 0, 2, 0, 4, 26, 0, 0, 0, 1, 21, 26, 16, 7},
                  {runtime[1], runtime[5], runtime[44], runtime[49], 2, 1},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(9 == doctest::Approx(n->v));
}

TEST_CASE("21(1+√∑)‚Åº8") {
  spdlog::critical("test='{}', ans='{}'", "21(1+√∑)‚Åº8", "3");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 2, 0, 1, 0, 0, 0, 4, 21, 26, 0, 3, 17, 7},
                  {runtime[0], runtime[3], runtime[49], 21, 1, 8},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(3 == doctest::Approx(n->v));
}

TEST_CASE("(2‚ä∏‚åΩ ‚â° 2‚ä∏(-‚ä∏‚åΩ)‚Åº)\"abcde\"") {
  spdlog::critical("test='{}', ans='{}'", "(2‚ä∏‚åΩ ‚â° 2‚ä∏(-‚ä∏‚åΩ)‚Åº)\"abcde\"", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0,  6,  0, 3, 0, 2, 0, 4, 0, 0, 27, 0,  4,  0, 5,
                   27, 26, 0, 1, 0, 2, 0, 4, 0, 5, 27, 21, 16, 7},
                  {runtime[1], runtime[18], runtime[31], runtime[49],
                   runtime[55], 2, std::make_shared<Array>(U"abcde")},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¬Ø2 √∑Àú‚óã¬¨‚Åº ¬Ø1") {
  spdlog::critical("test='{}', ans='{}'", "¬Ø2 √∑Àú‚óã¬¨‚Åº ¬Ø1", "4");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 6, 0, 3, 0, 1, 0, 4, 0, 2, 0, 0, 26, 27, 26, 0, 5, 17, 7},
      {runtime[3], runtime[9], runtime[45], runtime[49], runtime[54], -2, -1},
      {{0, 1, 0}},
      {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(4 == doctest::Approx(n->v));
}

TEST_CASE("1e¬Ø12>|16- 2 √∑Àú‚óã(‚ãÜ‚Åº)‚Åº 4") {
  spdlog::critical("test='{}', ans='{}'", "1e¬Ø12>|16- 2 √∑Àú‚óã(‚ãÜ‚Åº)‚Åº 4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 11, 0,  6, 0, 6, 0, 2,  26, 0, 7,  0, 5, 0, 1, 26, 27, 26,
                   0, 10, 17, 0, 0, 0, 9, 17, 0,  3, 16, 0, 4, 0, 8, 17, 7},
                  {runtime[1], runtime[3], runtime[4], runtime[8], runtime[13],
                   runtime[45], runtime[49], runtime[54], 1e-12, 16, 2, 4},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(+`‚åæ‚åΩ‚Åº‚â°+`‚Åº‚åæ‚åΩ) ‚Üï4") {
  spdlog::critical("test='{}', ans='{}'", "(+`‚åæ‚åΩ‚Åº‚â°+`‚Åº‚åæ‚åΩ) ‚Üï4", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 7, 0, 2, 16, 0, 3, 0, 6, 0, 4, 0, 5,  0,  0,  26, 26, 27,
                   0, 1, 0, 4, 0,  3, 0, 6, 0, 5, 0, 0, 26, 27, 26, 21, 16, 7},
                  {runtime[0], runtime[18], runtime[28], runtime[31],
                   runtime[49], runtime[52], runtime[57], 4},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("√óÀú‚çü3‚Åº256") {
  spdlog::critical("test='{}', ans='{}'", "√óÀú‚çü3‚Åº256", "2");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 5, 0, 2, 0, 4, 0, 3, 0, 1, 0, 0, 26, 27, 26, 16, 7},
                  {runtime[2], runtime[45], runtime[49], runtime[62], 3, 256},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(2 == doctest::Approx(n->v));
}

TEST_CASE("‚àö‚äò-{ùïó‚Åº‚â°6ùïó‚Åº‚ä¢} ¬Ø3‚Äø2") {
  spdlog::critical("test='{}', ans='{}'", "‚àö‚äò-{ùïó‚Åº‚â°6ùïó‚Åº‚ä¢} ¬Ø3‚Äø2", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 7, 0,  8, 11, 2,  1, 1, 0,  0, 0, 5, 0, 1,  27, 26, 16, 7,  0, 3,
       0, 4, 32, 0, 1,  26, 0, 6, 21, 0, 2, 0, 4, 34, 0,  1,  26, 21, 7},
      {runtime[1], runtime[5], runtime[18], runtime[21], runtime[49],
       runtime[58], 6, -3, 2},
      {{0, 1, 0}, {1, 1, 1}},
      {{0, 0}, {18, 2}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("‚àß¬¥ {(ùïé‚â°ùïé‚Åº‚Åº)ùï©}‚üú2‚Äø4‚Äø1¬® /‚Äø‚åΩ‚Äø<") {
  spdlog::critical("test='{}', ans='{}'", "‚àß¬¥ {(ùïé‚â°ùïé‚Åº‚Åº)ùï©}‚üú2‚Äø4‚Äø1¬® /‚Äø‚åΩ‚Äø<", "1");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 3,  0,  1,  11, 3,  0, 5, 0,  9,  0,  10, 0,  11, 11, 3,
       0, 8, 1, 1,  27, 26, 16, 0,  7, 0, 0,  26, 16, 7,  34, 0,  1,  0,
       6, 0, 6, 32, 0,  2,  26, 26, 0, 2, 34, 0,  2,  21, 16, 7},
      {runtime[10], runtime[12], runtime[18], runtime[31], runtime[33],
       runtime[47], runtime[49], runtime[50], runtime[56], 2, 4, 1},
      {{0, 1, 0}, {0, 0, {{}, {1}}}},
      {{0, 0}, {32, 3}}

  };

  auto ret = vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("/‚Åº‚Åº2‚Äø3‚Äø0") {
  spdlog::critical("test='{}', ans='{}'", "/‚Åº‚Åº2‚Äø3‚Äø0", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{{0, 2, 0, 3, 0, 4, 11, 3, 0, 1, 0, 1, 0, 0, 26, 26, 16, 7},
                  {runtime[33], runtime[49], 2, 3, 0},
                  {{0, 1, 0}},
                  {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}

TEST_CASE("/‚çü¬Ø1‚Åº2‚Äø3‚Äø0") {
  spdlog::critical("test='{}', ans='{}'", "/‚çü¬Ø1‚Åº2‚Äø3‚Äø0", "!");
  const auto rt = provides::get_runtime_setprims_cached();
  const auto runtime = rt->values;
  CompileParams p{
      {0, 4, 0, 5, 0, 6, 11, 3, 0, 1, 0, 3, 0, 2, 0, 0, 27, 26, 16, 7},
      {runtime[33], runtime[49], runtime[62], -1, 2, 3, 0},
      {{0, 1, 0}},
      {{0, 0}}

  };

  REQUIRE_THROWS(vm::run(p.bc, p.consts.to_arr(), p.blk_defs, p.bodies));
}
