/*
 * This file is generated, don't edit!
 * Generated by the CXBQN build system on 2021-11-14T17:27:30
 */
#include <cxbqn/comp_utils.hpp>
#include <cxbqn/cxbqn.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

using namespace cxbqn;
using namespace cxbqn::types;
using namespace cxbqn::provides;

TEST_CASE("3≡4>◶+‿-1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡4>◶+‿-1");
  CompileParams p{
      {0, 7, 0, 0, 0, 1, 11, 2, 0, 4, 0, 2, 27, 0, 6, 17, 0, 3, 0, 5, 17, 7},
      {runtime[0], runtime[1], runtime[13], runtime[18], runtime[59], 3, 4, 1},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡4⊢◶+‿-1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡4⊢◶+‿-1");
  CompileParams p{
      {0, 7, 0, 0, 0, 1, 11, 2, 0, 4, 0, 3, 27, 0, 6, 17, 0, 2, 0, 5, 17, 7},
      {runtime[0], runtime[1], runtime[18], runtime[21], runtime[59], 3, 4, 1},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡4 1◶+‿-1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡4 1◶+‿-1");
  CompileParams p{
      {0, 6, 0, 0, 0, 1, 11, 2, 0, 3, 0, 6, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
      {runtime[0], runtime[1], runtime[18], runtime[59], 3, 4, 1},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡4<◶+‿-1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡4<◶+‿-1");
  CompileParams p{
      {0, 7, 0, 0, 0, 1, 11, 2, 0, 4, 0, 2, 27, 0, 6, 17, 0, 3, 0, 5, 17, 7},
      {runtime[0], runtime[1], runtime[12], runtime[18], runtime[59], 5, 4, 1},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡4 0◶+‿-1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡4 0◶+‿-1");
  CompileParams p{
      {0, 7, 0, 0, 0, 1, 11, 2, 0, 3, 0, 6, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
      {runtime[0], runtime[1], runtime[18], runtime[59], 5, 4, 0, 1},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡-⊘0 ¯1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡-⊘0 ¯1");
  CompileParams p{{0, 5, 0, 4, 0, 2, 0, 0, 27, 16, 0, 1, 0, 3, 17, 7},
                  {runtime[1], runtime[18], runtime[58], 1, 0, -1},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡¯1-⊘+2") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡¯1-⊘+2");
  CompileParams p{{0, 6, 0, 0, 0, 3, 0, 1, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
                  {runtime[0], runtime[1], runtime[18], runtime[58], 1, -1, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abc\"≡⊢\"abc\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abc\"≡⊢\"abc\"");
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[21], std::make_shared<Array>(U"abc")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"\"≡3⊢\"\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"\"≡3⊢\"\"");
  CompileParams p{{0, 3, 0, 1, 0, 2, 17, 0, 0, 0, 3, 17, 7},
                  {runtime[18], runtime[21], 3, std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡⊣⟨⟩") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡⊣⟨⟩");
  CompileParams p{{11, 0, 0, 1, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[20]},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"ab\"≡\"ab\"⊣⟨⟩") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"ab\"≡\"ab\"⊣⟨⟩");
  CompileParams p{{11, 0, 0, 1, 0, 2, 17, 0, 0, 0, 2, 17, 7},
                  {runtime[18], runtime[20], std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡+˜2") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡+˜2");
  CompileParams p{{0, 4, 0, 2, 0, 0, 26, 16, 0, 1, 0, 3, 17, 7},
                  {runtime[0], runtime[18], runtime[45], 4, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡1-˜4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡1-˜4");
  CompileParams p{{0, 5, 0, 2, 0, 0, 26, 0, 4, 17, 0, 1, 0, 3, 17, 7},
                  {runtime[1], runtime[18], runtime[45], 3, 1, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡-∘×¯6") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡-∘×¯6");
  CompileParams p{{0, 5, 0, 1, 0, 3, 0, 0, 27, 16, 0, 2, 0, 4, 17, 7},
                  {runtime[1], runtime[2], runtime[18], runtime[53], 1, -6},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯6≡2-∘×3") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯6≡2-∘×3");
  CompileParams p{{0, 6, 0, 1, 0, 3, 0, 0, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
                  {runtime[1], runtime[2], runtime[18], runtime[53], -6, 2, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡-○×¯7") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡-○×¯7");
  CompileParams p{{0, 5, 0, 1, 0, 3, 0, 0, 27, 16, 0, 2, 0, 4, 17, 7},
                  {runtime[1], runtime[2], runtime[18], runtime[54], 1, -7},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡5-○×¯7") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡5-○×¯7");
  CompileParams p{{0, 6, 0, 1, 0, 3, 0, 0, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
                  {runtime[1], runtime[2], runtime[18], runtime[54], 2, 5, -7},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯20≡1⊸-⊸×5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯20≡1⊸-⊸×5");
  CompileParams p{
      {0, 6, 0, 1, 0, 3, 0, 0, 0, 3, 0, 5, 27, 27, 16, 0, 2, 0, 4, 17, 7},
      {runtime[1], runtime[2], runtime[18], runtime[55], -20, 1, 5},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(0‿2+⌜0‿1)≡(>⟨\"ab\",\"cd\"⟩)≢⊸⥊↕4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(0‿2+⌜0‿1)≡(>⟨\"ab\",\"cd\"⟩)≢⊸⥊↕4");
  CompileParams p{{0,  11, 0, 5, 16, 0,  4,  0, 7, 0,  3, 27, 0,  12, 0,
                   13, 11, 2, 0, 1,  16, 17, 0, 2, 0,  8, 0,  10, 11, 2,
                   0,  6,  0, 0, 26, 0,  8,  0, 9, 11, 2, 17, 17, 7},
                  {runtime[0], runtime[13], runtime[18], runtime[19],
                   runtime[22], runtime[28], runtime[48], runtime[55], 0, 2, 1,
                   4, std::make_shared<Array>(U"ab"),
                   std::make_shared<Array>(U"cd")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("20≡×⟜(-⟜1)5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "20≡×⟜(-⟜1)5");
  CompileParams p{
      {0, 6, 0, 5, 0, 3, 0, 0, 27, 0, 3, 0, 1, 27, 16, 0, 2, 0, 4, 17, 7},
      {runtime[1], runtime[2], runtime[18], runtime[56], 20, 1, 5},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡5+⟜×¯3") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡5+⟜×¯3");
  CompileParams p{{0, 6, 0, 1, 0, 3, 0, 0, 27, 0, 5, 17, 0, 2, 0, 4, 17, 7},
                  {runtime[0], runtime[2], runtime[18], runtime[56], 4, 5, -3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7≡5+⟜2 ¯3") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7≡5+⟜2 ¯3");
  CompileParams p{{0, 6, 0, 5, 0, 2, 0, 0, 27, 0, 4, 17, 0, 1, 0, 3, 17, 7},
                  {runtime[0], runtime[18], runtime[56], 7, 5, 2, -3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡√4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡√4");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[5], runtime[18], 2, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡3√27") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡3√27");
  CompileParams p{{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[5], runtime[18], 3, 27},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6≡2∧3") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6≡2∧3");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[10], runtime[18], 6, 2, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¯2∧0") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡¯2∧0");
  CompileParams p{{0, 2, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[10], runtime[18], 0, -2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0.75≡∨˜0.5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0.75≡∨˜0.5");
  CompileParams p{{0, 4, 0, 2, 0, 0, 26, 16, 0, 1, 0, 3, 17, 7},
                  {runtime[11], runtime[18], runtime[45], 0.75, 0.5},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1.75≡2∨0.25") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1.75≡2∨0.25");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[11], runtime[18], 1.75, 2, 0.25},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡¬1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡¬1");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 0, 1},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡¬0") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡¬0");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 1, 0},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡¬¯1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡¬¯1");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 2, -1},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡3¬4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡3¬4");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 0, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡4¬3") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡4¬3");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 2, 4, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡5¬2") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡5¬2");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 4, 5, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡'g'¬'c'") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡'g'¬'c'");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[9], runtime[18], 5,
                   std::make_shared<Character>(U'g'),
                   std::make_shared<Character>(U'c')},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("'b'≡'c'¬2") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "'b'≡'c'¬2");
  CompileParams p{{0, 2, 0, 0, 0, 4, 17, 0, 1, 0, 3, 17, 7},
                  {runtime[9], runtime[18], 2,
                   std::make_shared<Character>(U'b'),
                   std::make_shared<Character>(U'c')},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡|0") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡|0");
  CompileParams p{{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], 0},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡|¯5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡|¯5");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], 5, -5},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6≡|6") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6≡|6");
  CompileParams p{{0, 2, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], 6},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("∞≡|¯∞") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "∞≡|¯∞");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], std::make_shared<Number>(1.0 / 0.0),
                   std::make_shared<Number>(-1.0 / 0.0)},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡3|8") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡3|8");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], 2, 3, 8},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡3|¯7") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡3|¯7");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], 2, 3, -7},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1≡¯3|8") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1≡¯3|8");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[8], runtime[18], -1, -3, 8},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"a\"≡⥊<'a'") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"a\"≡⥊<'a'");
  CompileParams p{{0, 3, 0, 0, 16, 0, 2, 16, 0, 1, 0, 4, 17, 7},
                  {runtime[12], runtime[18], runtime[22],
                   std::make_shared<Character>(U'a'),
                   std::make_shared<Array>(U"a")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("\"abcd\"≡⊑<\"abcd\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "\"abcd\"≡⊑<\"abcd\"");
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 2, 16, 0, 1, 0, 3, 17, 7},
      {runtime[12], runtime[18], runtime[37], std::make_shared<Array>(U"abcd")},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢<⟨2,⟨3,4⟩⟩") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡≢<⟨2,⟨3,4⟩⟩");
  CompileParams p{
      {0, 3, 0, 4, 0, 5, 11, 2, 11, 2, 0, 0, 16, 0, 2, 16, 0, 1, 11, 0, 17, 7},
      {runtime[12], runtime[18], runtime[19], 2, 3, 4},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡4<2") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡4<2");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[12], runtime[18], 0, 4, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡5>5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡5>5");
  CompileParams p{{0, 3, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[13], runtime[18], 0, 5},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡3≥4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡3≥4");
  CompileParams p{{0, 4, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[17], runtime[18], 0, 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0≡≠\"\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0≡≠\"\"");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[14], runtime[18], 0, std::make_shared<Array>(U"")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≠\"a\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡≠\"a\"");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[14], runtime[18], 1, std::make_shared<Array>(U"a")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡≠'a'") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡≠'a'");
  CompileParams p{
      {0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
      {runtime[14], runtime[18], 1, std::make_shared<Character>(U'a')},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2≡≠\"ab\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2≡≠\"ab\"");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[14], runtime[18], 2, std::make_shared<Array>(U"ab")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("25≡≠↕25") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "25≡≠↕25");
  CompileParams p{{0, 3, 0, 2, 16, 0, 0, 16, 0, 1, 0, 3, 17, 7},
                  {runtime[14], runtime[18], runtime[28], 25},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡×5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡×5");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[2], runtime[18], 1, 5},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯1≡×¯2.5") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯1≡×¯2.5");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[2], runtime[18], -1, -2.5},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("3≡3⌊4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "3≡3⌊4");
  CompileParams p{{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[6], runtime[18], 3, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("¯3≡¯3⌊∞") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "¯3≡¯3⌊∞");
  CompileParams p{
      {0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
      {runtime[6], runtime[18], -3, std::make_shared<Number>(1.0 / 0.0)},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("4≡3⌈4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "4≡3⌈4");
  CompileParams p{{0, 2, 0, 0, 0, 3, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[7], runtime[18], 4, 3},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("1≡1⌈¯1") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "1≡1⌈¯1");
  CompileParams p{{0, 3, 0, 0, 0, 2, 17, 0, 1, 0, 2, 17, 7},
                  {runtime[7], runtime[18], 1, -1},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("5≡⌈4.01") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "5≡⌈4.01");
  CompileParams p{{0, 3, 0, 0, 16, 0, 1, 0, 2, 17, 7},
                  {runtime[7], runtime[18], 5, 4.01},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢'a'") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡≢'a'");
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[19], std::make_shared<Character>(U'a')},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨⟩≡≢0") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨⟩≡≢0");
  CompileParams p{{0, 2, 0, 1, 16, 0, 0, 11, 0, 17, 7},
                  {runtime[18], runtime[19], 0},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("⟨0⟩‿⟨1⟩‿⟨2⟩≡⥊¨↕3") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "⟨0⟩‿⟨1⟩‿⟨2⟩≡⥊¨↕3");
  CompileParams p{
      {0,  7, 0, 2, 16, 0, 3, 0, 1,  26, 16, 0, 0,  0, 4,
       11, 1, 0, 5, 11, 1, 0, 6, 11, 1,  11, 3, 17, 7},
      {runtime[18], runtime[22], runtime[28], runtime[47], 0, 1, 2, 3},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE(
    "(↕6)≡⟜(≠¨)○(2‿3⊸⥊)⟨⟩‿\"a\"‿\"ab\"‿\"abc\"‿\"abcd\"‿\"abcde\"‿\"abcdef\"") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'",
                   "(↕6)≡⟜(≠¨)○(2‿3⊸⥊)"
                   "⟨⟩‿\"a\"‿\"ab\"‿\"abc\"‿\"abcd\"‿\"abcde\"‿\"abcdef\"");
  CompileParams p{
      {11, 0,  0, 11, 0, 12, 0,  13, 0,  14, 0,  15, 0,  16, 11, 7,
       0,  2,  0, 6,  0, 9,  0,  10, 11, 2,  27, 0,  5,  0,  4,  0,
       0,  26, 0, 7,  0, 1,  27, 27, 0,  8,  0,  3,  16, 17, 7},
      {runtime[14], runtime[18], runtime[22], runtime[28], runtime[47],
       runtime[54], runtime[55], runtime[56], 6, 2, 3,
       std::make_shared<Array>(U"a"), std::make_shared<Array>(U"ab"),
       std::make_shared<Array>(U"abc"), std::make_shared<Array>(U"abcd"),
       std::make_shared<Array>(U"abcde"), std::make_shared<Array>(U"abcdef")},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("≡⟜(≠¨)4‿0‿2⥊↕0") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "≡⟜(≠¨)4‿0‿2⥊↕0");
  CompileParams p{{0, 7,  0, 3, 16, 0, 2,  0, 6, 0, 7, 0,  8,  11,
                   3, 17, 0, 4, 0,  0, 26, 0, 5, 0, 1, 27, 16, 7},
                  {runtime[14], runtime[18], runtime[22], runtime[28],
                   runtime[47], runtime[56], 4, 0, 2},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("6≡+´↕4") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "6≡+´↕4");
  CompileParams p{{0, 5, 0, 2, 16, 0, 3, 0, 0, 26, 16, 0, 1, 0, 4, 17, 7},
                  {runtime[0], runtime[18], runtime[28], runtime[50], 6, 4},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")");
  CompileParams p{{0, 6, 0, 4, 0,  5, 0, 7, 11, 2,  11, 3,
                   0, 3, 0, 1, 26, 0, 0, 0, 2,  21, 16, 7},
                  {runtime[18], runtime[20], runtime[37], runtime[50], 2, 3,
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"d")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("0(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "0(⊑≡⊣´)\"a\"‿2‿(3‿\"d\")");
  CompileParams p{{0, 7, 0, 5,  0, 6, 0, 8, 11, 2, 11, 3,  0,
                   3, 0, 1, 26, 0, 0, 0, 2, 21, 0, 4,  17, 7},
                  {runtime[18], runtime[20], runtime[37], runtime[50], 0, 2, 3,
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"d")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("(2⊸⊑≡⊢´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "(2⊸⊑≡⊢´)\"a\"‿2‿(3‿\"d\")");
  CompileParams p{{0, 7,  0, 5, 0, 6, 0, 8, 11, 2, 11, 3,  0,  3, 0,
                   1, 26, 0, 0, 0, 2, 0, 4, 0,  5, 27, 21, 16, 7},
                  {runtime[18], runtime[21], runtime[37], runtime[50],
                   runtime[55], 2, 3, std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"d")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("2(⊣≡⊢´)\"a\"‿2‿(3‿\"d\")") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "2(⊣≡⊢´)\"a\"‿2‿(3‿\"d\")");
  CompileParams p{{0, 6, 0, 4,  0, 5, 0, 7, 11, 2, 11, 3,  0,
                   3, 0, 2, 26, 0, 0, 0, 1, 21, 0, 4,  17, 7},
                  {runtime[18], runtime[20], runtime[21], runtime[50], 2, 3,
                   std::make_shared<Array>(U"a"),
                   std::make_shared<Array>(U"d")},
                  {{0, 1, 0}},
                  {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}

TEST_CASE("7‿10≡+¨´⟨⟨2,3⟩,⟨5,7⟩⟩") {
  const auto rt = provides::get_runtime_cached();
  const auto runtime = rt->values;
  spdlog::critical("test='{}'", "7‿10≡+¨´⟨⟨2,3⟩,⟨5,7⟩⟩");
  CompileParams p{
      {0, 6, 0, 7,  11, 2,  0, 8, 0, 4, 11, 2, 11, 2, 0,  3, 0,
       2, 0, 0, 26, 26, 16, 0, 1, 0, 4, 0,  5, 11, 2, 17, 7},
      {runtime[0], runtime[18], runtime[47], runtime[50], 7, 10, 2, 3, 5},
      {{0, 1, 0}},
      {{0, 0}}};
  auto ret = vm::run(p.bc, p.consts.v, p.blk_defs, p.bodies);
  REQUIRE(nullptr != ret.v);
  REQUIRE(nullptr != ret.scp);
  auto n = dynamic_pointer_cast<Number>(ret.v);
  REQUIRE(nullptr != n);
  CHECK(1 == doctest::Approx(n->v));
}
